
miniLogicAnalyzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000f56  00000fea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000315  00800076  00800076  00001000  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000262  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000092b  00000000  00000000  000012a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000408  00000000  00000000  00001bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000955  00000000  00000000  00001fd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  0000292c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000339  00000000  00000000  00002aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004f1  00000000  00000000  00002de5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000032d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c2       	rjmp	.+1530   	; 0x5fc <__ctors_end>
   2:	17 c3       	rjmp	.+1582   	; 0x632 <__bad_interrupt>
   4:	16 c3       	rjmp	.+1580   	; 0x632 <__bad_interrupt>
   6:	15 c3       	rjmp	.+1578   	; 0x632 <__bad_interrupt>
   8:	14 c3       	rjmp	.+1576   	; 0x632 <__bad_interrupt>
   a:	13 c3       	rjmp	.+1574   	; 0x632 <__bad_interrupt>
   c:	12 c3       	rjmp	.+1572   	; 0x632 <__bad_interrupt>
   e:	11 c3       	rjmp	.+1570   	; 0x632 <__bad_interrupt>
  10:	10 c3       	rjmp	.+1568   	; 0x632 <__bad_interrupt>
  12:	0f c3       	rjmp	.+1566   	; 0x632 <__bad_interrupt>
  14:	0e c3       	rjmp	.+1564   	; 0x632 <__bad_interrupt>
  16:	0d c3       	rjmp	.+1562   	; 0x632 <__bad_interrupt>
  18:	0c c3       	rjmp	.+1560   	; 0x632 <__bad_interrupt>
  1a:	0b c3       	rjmp	.+1558   	; 0x632 <__bad_interrupt>
  1c:	0a c3       	rjmp	.+1556   	; 0x632 <__bad_interrupt>
  1e:	09 c3       	rjmp	.+1554   	; 0x632 <__bad_interrupt>
  20:	08 c3       	rjmp	.+1552   	; 0x632 <__bad_interrupt>
  22:	07 c3       	rjmp	.+1550   	; 0x632 <__bad_interrupt>
  24:	06 c3       	rjmp	.+1548   	; 0x632 <__bad_interrupt>

00000026 <introScreen>:
  26:	82 fe 8e 3e f8 e0 30 8e fe fe 82 88 fa fa 80 88     ...>..0.........
  36:	f8 f8 08 f8 f0 80 88 fa fa 80 00 00 00 00 00 00     ................
  46:	00 00 00 00 fe 12 12 12 02 00 78 c0 60 c0 78 00     ..........x.`.x.
  56:	00 00 00 00 00 00 38 40 80 40 38 00 00 84 fe 80     ......8@.@8.....
  66:	00 00 00 c0 c0 00 00 00 7c a2 92 8a 7c 00 00 84     ........|...|...
  76:	fe 80 00 00 10 f0 f0 10 00 00 00 00 80 c0 40 40     ..............@@
  86:	c0 80 00 80 c0 40 e0 a0 00 40 d0 d0 00 80 c0 40     .....@...@.....@
  96:	c0 00 00 00 00 00 00 00 e0 10 70 e0 80 00 40 c0     ..........p...@.
  a6:	c0 40 c0 80 00 00 40 40 40 c0 80 00 10 f0 f0 00     .@....@@@.......
  b6:	40 c0 c0 00 c0 00 40 40 c0 c0 40 00 80 c0 40 c0     @.....@@..@...@.
  c6:	80 00 40 c0 c0 40 c0 00 04 07 07 04 04 04 06 00     ..@..@..........
  d6:	03 07 04 04 07 03 00 0e 15 15 15 0c 00 04 07 07     ................
  e6:	04 03 07 04 04 00 00 00 00 00 04 07 05 01 05 07     ................
  f6:	07 04 04 07 07 00 07 07 04 02 07 05 05 07 07 04     ................
 106:	04 07 07 04 18 19 1b 06 01 00 04 06 07 04 04 00     ................
 116:	03 07 05 05 05 00 04 07 07 04 00 00 7e 02 7e 40     ............~.~@
 126:	7e 02 7e 40 7e 02 7e 40 7e 02 7e 40 7e 02 7e 40     ~.~@~.~@~.~@~.~@
 136:	7e 02 7e 40 7e 02 7e 40 7e 02 7e 40 7e 02 7e 40     ~.~@~.~@~.~@~.~@
 146:	7e 02 7e 40 7e 02 7e 40 7e 02 7e 40 7e 02 7e 40     ~.~@~.~@~.~@~.~@
 156:	7e 02 7e 40 7e 02 7e 40 7e 02 7e 40 7e 02 7e 40     ~.~@~.~@~.~@~.~@
 166:	7e 02 7e 40 7e 02 7e 40 7e 02 7e 40 7e 02 7e 40     ~.~@~.~@~.~@~.~@
 176:	7c 04 04 04 04 04 04 04 7c 40 40 40 40 40 40 40     |.......|@@@@@@@
 186:	7c 04 04 04 04 04 04 04 7c 40 40 40 40 40 40 40     |.......|@@@@@@@
 196:	40 40 40 40 40 40 7c 04 04 04 04 04 04 04 7c 40     @@@@@@|.......|@
 1a6:	40 40 40 40 40 40 7c 04 04 04 04 04 04 04 04 04     @@@@@@|.........
 1b6:	04 04 04 04 04 04 7c 40 40 40 40 40 40 40 7c 04     ......|@@@@@@@|.
 1c6:	04 04 04 04 3e 02 02 3e 20 20 20 20 20 20 20 3e     ....>..>       >
 1d6:	02 02 02 02 3e 20 20 20 20 20 20 20 20 20 20 20     ....>           
 1e6:	20 20 3e 02 02 02 02 02 02 02 3e 20 20 20 20 20       >.......>     
 1f6:	20 20 3e 02 02 02 02 02 02 02 02 02 02 02 02 02       >.............
 206:	02 02 02 02 02 02 3e 20 20 20 20 20 20 20 3e 02     ......>       >.
 216:	02 02 02 02 02 02 3e 20                             ......> 

0000021e <createdBy>:
	...
 232:	00 00 00 3e c0 00 fe 00 80 50 50 e0 00 20 50 90     ...>.....PP.. P.
 242:	20 00 20 50 90 20 00 00 00 f4 00 00 00 02 fe 00      . P. ..........
 252:	00 00 00 f4 00 00 20 50 90 20 00 00 00 00 00 00     ...... P. ......
	...
 286:	00 c0 20 20 c0 03 00 00 01 02 02 03 00 01 02 02     ..  ............
 296:	01 00 01 02 02 01 00 00 02 03 02 00 40 02 03 02     ............@...
 2a6:	00 00 e2 03 02 00 41 02 02 01 00 00 00 00 00 00     ......A.........
	...
 2da:	00 19 22 22 1c 00 1e 29 29 2e 00 01 3e 01 03 00     ..""...))...>...
 2ea:	18 25 25 3e 00 12 25 29 12 00 00 20 3f 20 00 1e     .%%>..%)... ? ..
 2fa:	21 21 3f 00 00 20 3f 20 00 12 25 29 12 00 00 00     !!?.. ? ..%)....
	...
 322:	00 fc 02 00 00 e0 10 10 10 00 00 02 fc 00 00 fc     ................
 332:	02 02 fe 00 08 04 fe 00 00 00 00 00 00 00 80 02     ................
 342:	fe 02 00 80 50 50 e0 00 f0 20 10 e0 00 00 00 00     ....PP... ......
 352:	00 00 8c 42 22 1c 00 fc 02 02 fe 00 08 04 fe 00     ...B"...........
 362:	00 8c 42 22 1c 00 00 00 00 00 00 00 00 00 00 00     ..B"............
 372:	00 00 00 00 00 01 02 00 00 01 02 02 02 00 00 02     ................
 382:	01 00 00 03 02 02 01 00 02 02 03 02 00 00 00 00     ................
 392:	00 00 01 02 01 00 00 01 02 02 03 00 03 00 40 03     ..............@.
 3a2:	00 00 00 00 e0 00 03 02 42 02 00 03 02 02 01 00     ........B.......
 3b2:	02 02 03 02 00 03 02 02 02 00 00 00 00 00 00 00     ................
 3c2:	00 00 00 3f 10 10 3f 00 3f 10 10 3f 00 3f 10 10     ...?..?.?..?.?..
 3d2:	3f 00 00 30 30 00 00 12 25 29 12 00 1e 29 29 2e     ?..00...%)...)).
 3e2:	00 01 3e 01 03 00 18 25 25 3e 00 12 25 29 12 00     ..>....%%>..%)..
 3f2:	00 20 3f 20 00 1e 21 21 3f 00 00 20 3f 20 00 12     . ? ..!!?.. ? ..
 402:	25 29 12 00 00 30 30 00 00 1e a1 a1 7f 00 01 3e     %)...00........>
 412:	01 03 00 00                                         ....

00000416 <font5x7>:
 416:	00 00 00 00 00 00 00 2f 00 00 00 07 00 07 00 14     ......./........
 426:	7f 14 7f 14 24 2a 7f 2a 12 32 34 08 16 26 36 49     ....$*.*.24..&6I
 436:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
 446:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
 456:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
 466:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
 476:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
 486:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
 496:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
 4a6:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
 4b6:	32 49 59 51 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IYQ>~...~.III6>
 4c6:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
 4d6:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
 4e6:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 4f6:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 506:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 516:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 526:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 536:	08 07 61 51 49 45 43 00 7f 41 41 00 55 2a 55 2a     ..aQIEC..AA.U*U*
 546:	55 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40     U.AA.......@@@@@
 556:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 566:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 576:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 586:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 596:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 5a6:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
 5b6:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 5c6:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 5d6:	50 3c 44 64 54 4c 44 00 7f 3e 1c 08 08 1c 3e 7f     P<DdTLD..>....>.
 5e6:	00 08 7c 7e 7c 08 10 3e 7e 3e 10 3e 3e 3e 3e 3e     ..|~|..>~>.>>>>>
 5f6:	00 7f 3e 1c 08 00                                   ..>...

000005fc <__ctors_end>:
 5fc:	11 24       	eor	r1, r1
 5fe:	1f be       	out	0x3f, r1	; 63
 600:	cf e5       	ldi	r28, 0x5F	; 95
 602:	d4 e0       	ldi	r29, 0x04	; 4
 604:	de bf       	out	0x3e, r29	; 62
 606:	cd bf       	out	0x3d, r28	; 61

00000608 <__do_copy_data>:
 608:	10 e0       	ldi	r17, 0x00	; 0
 60a:	a0 e6       	ldi	r26, 0x60	; 96
 60c:	b0 e0       	ldi	r27, 0x00	; 0
 60e:	e6 e5       	ldi	r30, 0x56	; 86
 610:	ff e0       	ldi	r31, 0x0F	; 15
 612:	02 c0       	rjmp	.+4      	; 0x618 <.do_copy_data_start>

00000614 <.do_copy_data_loop>:
 614:	05 90       	lpm	r0, Z+
 616:	0d 92       	st	X+, r0

00000618 <.do_copy_data_start>:
 618:	a6 37       	cpi	r26, 0x76	; 118
 61a:	b1 07       	cpc	r27, r17
 61c:	d9 f7       	brne	.-10     	; 0x614 <.do_copy_data_loop>

0000061e <__do_clear_bss>:
 61e:	13 e0       	ldi	r17, 0x03	; 3
 620:	a6 e7       	ldi	r26, 0x76	; 118
 622:	b0 e0       	ldi	r27, 0x00	; 0
 624:	01 c0       	rjmp	.+2      	; 0x628 <.do_clear_bss_start>

00000626 <.do_clear_bss_loop>:
 626:	1d 92       	st	X+, r1

00000628 <.do_clear_bss_start>:
 628:	ab 38       	cpi	r26, 0x8B	; 139
 62a:	b1 07       	cpc	r27, r17
 62c:	e1 f7       	brne	.-8      	; 0x626 <.do_clear_bss_loop>
 62e:	5a d2       	rcall	.+1204   	; 0xae4 <main>
 630:	90 c4       	rjmp	.+2336   	; 0xf52 <_exit>

00000632 <__bad_interrupt>:
 632:	e6 cc       	rjmp	.-1588   	; 0x0 <__vectors>

00000634 <checkInputs>:
{

	unsigned char dataUsed = 0, dataPins;
	unsigned int counter2;

	dataPins = PIND; //Read the pins status on Port D (this is the initial PORT D status).
 634:	40 b3       	in	r20, 0x10	; 16
	while (dataPins == PIND); //Stay here until at least one pin on PORT D changes its Logic status.
 636:	80 b3       	in	r24, 0x10	; 16
 638:	48 17       	cp	r20, r24
 63a:	e9 f3       	breq	.-6      	; 0x636 <checkInputs+0x2>
	counter2 = 0;

	PORTB |= (1<<LED1); //Turn-ON the LED. Start recording sample lengths to the AVR's dataBuffer.
 63c:	c5 9a       	sbi	0x18, 5	; 24
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	20 e0       	ldi	r18, 0x00	; 0
 642:	30 e0       	ldi	r19, 0x00	; 0
	while(dataUsed < (BUFFER_SIZE)) //While the used buffer is not full, repeat this loop.
	{
		if((dataPins == PIND)&&(counter2 < MAX_SAMPLE_TIME))// If the PORT D has the same status as before, just...
 644:	80 b3       	in	r24, 0x10	; 16
 646:	48 17       	cp	r20, r24
 648:	39 f4       	brne	.+14     	; 0x658 <checkInputs+0x24>
 64a:	8f ef       	ldi	r24, 0xFF	; 255
 64c:	2e 3f       	cpi	r18, 0xFE	; 254
 64e:	38 07       	cpc	r19, r24
 650:	18 f4       	brcc	.+6      	; 0x658 <checkInputs+0x24>
			counter2++;
 652:	2f 5f       	subi	r18, 0xFF	; 255
 654:	3f 4f       	sbci	r19, 0xFF	; 255
 656:	10 c0       	rjmp	.+32     	; 0x678 <checkInputs+0x44>
		else  // or else,
		{
			dataPins = PIND;      //Read the pins status on Port D.
 658:	40 b3       	in	r20, 0x10	; 16
			lengthBuffer[dataUsed] = counter2; // HIGH byte of counter
 65a:	a9 2f       	mov	r26, r25
 65c:	b0 e0       	ldi	r27, 0x00	; 0
 65e:	fd 01       	movw	r30, r26
 660:	ee 0f       	add	r30, r30
 662:	ff 1f       	adc	r31, r31
 664:	ed 57       	subi	r30, 0x7D	; 125
 666:	fe 4f       	sbci	r31, 0xFE	; 254
 668:	31 83       	std	Z+1, r19	; 0x01
 66a:	20 83       	st	Z, r18
			dataBuffer[dataUsed] = dataPins;  // Read the pins status on Port D and save it to the RAM buffer.
 66c:	a0 58       	subi	r26, 0x80	; 128
 66e:	bf 4f       	sbci	r27, 0xFF	; 255
 670:	4c 93       	st	X, r20
			counter2 = 0;
			dataUsed++;
 672:	9f 5f       	subi	r25, 0xFF	; 255
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	30 e0       	ldi	r19, 0x00	; 0
	dataPins = PIND; //Read the pins status on Port D (this is the initial PORT D status).
	while (dataPins == PIND); //Stay here until at least one pin on PORT D changes its Logic status.
	counter2 = 0;

	PORTB |= (1<<LED1); //Turn-ON the LED. Start recording sample lengths to the AVR's dataBuffer.
	while(dataUsed < (BUFFER_SIZE)) //While the used buffer is not full, repeat this loop.
 678:	9f 3f       	cpi	r25, 0xFF	; 255
 67a:	21 f7       	brne	.-56     	; 0x644 <checkInputs+0x10>
			counter2 = 0;
			dataUsed++;
		}
	}

	PORTB &= ~(1<<LED1); //Turn-OFF the LED. That means that AVR has filled its dataBuffer.
 67c:	c5 98       	cbi	0x18, 5	; 24
}
 67e:	08 95       	ret

00000680 <printRuler>:

//========================================================================
//
//========================================================================
void printRuler (void)
{
 680:	1f 93       	push	r17
	unsigned char k;

	lcd_goto_xy(1,2); //Go to LCD line 2.
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	62 e0       	ldi	r22, 0x02	; 2
 686:	89 d2       	rcall	.+1298   	; 0xb9a <lcd_goto_xy>
 688:	10 e0       	ldi	r17, 0x00	; 0

	for(k=0;k<8;k++)
	{
		lcd_col(TRANSITION);
 68a:	8c e3       	ldi	r24, 0x3C	; 60
 68c:	88 d3       	rcall	.+1808   	; 0xd9e <lcd_col>
		lcd_col(0b00000000);
 68e:	80 e0       	ldi	r24, 0x00	; 0
 690:	86 d3       	rcall	.+1804   	; 0xd9e <lcd_col>
		lcd_col(0b00011000);
 692:	88 e1       	ldi	r24, 0x18	; 24
 694:	84 d3       	rcall	.+1800   	; 0xd9e <lcd_col>
		lcd_col(0b00000000);
 696:	80 e0       	ldi	r24, 0x00	; 0
 698:	82 d3       	rcall	.+1796   	; 0xd9e <lcd_col>
		lcd_col(0b00011000);
 69a:	88 e1       	ldi	r24, 0x18	; 24
 69c:	80 d3       	rcall	.+1792   	; 0xd9e <lcd_col>
		lcd_col(0b00000000);
 69e:	80 e0       	ldi	r24, 0x00	; 0
 6a0:	7e d3       	rcall	.+1788   	; 0xd9e <lcd_col>
		lcd_col(0b00011000); 
 6a2:	88 e1       	ldi	r24, 0x18	; 24
 6a4:	7c d3       	rcall	.+1784   	; 0xd9e <lcd_col>
		lcd_col(0b00000000);
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	7a d3       	rcall	.+1780   	; 0xd9e <lcd_col>
		lcd_col(0b00011000);
 6aa:	88 e1       	ldi	r24, 0x18	; 24
 6ac:	78 d3       	rcall	.+1776   	; 0xd9e <lcd_col>
		lcd_col(0b00000000);
 6ae:	80 e0       	ldi	r24, 0x00	; 0
 6b0:	76 d3       	rcall	.+1772   	; 0xd9e <lcd_col>
{
	unsigned char k;

	lcd_goto_xy(1,2); //Go to LCD line 2.

	for(k=0;k<8;k++)
 6b2:	1f 5f       	subi	r17, 0xFF	; 255
 6b4:	18 30       	cpi	r17, 0x08	; 8
 6b6:	49 f7       	brne	.-46     	; 0x68a <printRuler+0xa>
		lcd_col(0b00011000); 
		lcd_col(0b00000000);
		lcd_col(0b00011000);
		lcd_col(0b00000000);
	}
	lcd_col(TRANSITION);
 6b8:	8c e3       	ldi	r24, 0x3C	; 60
 6ba:	71 d3       	rcall	.+1762   	; 0xd9e <lcd_col>
	lcd_col(0b00000000);
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	6f d3       	rcall	.+1758   	; 0xd9e <lcd_col>
	lcd_col(0b00011000);
 6c0:	88 e1       	ldi	r24, 0x18	; 24
 6c2:	6d d3       	rcall	.+1754   	; 0xd9e <lcd_col>
	lcd_col(0b00000000);
 6c4:	80 e0       	ldi	r24, 0x00	; 0
 6c6:	6b d3       	rcall	.+1750   	; 0xd9e <lcd_col>
}
 6c8:	1f 91       	pop	r17
 6ca:	08 95       	ret

000006cc <printCapturedData>:

//========================================================================
//
//========================================================================
void printCapturedData (unsigned long position, unsigned char inputChannel)
{
 6cc:	2f 92       	push	r2
 6ce:	3f 92       	push	r3
 6d0:	4f 92       	push	r4
 6d2:	5f 92       	push	r5
 6d4:	6f 92       	push	r6
 6d6:	7f 92       	push	r7
 6d8:	8f 92       	push	r8
 6da:	9f 92       	push	r9
 6dc:	af 92       	push	r10
 6de:	bf 92       	push	r11
 6e0:	cf 92       	push	r12
 6e2:	df 92       	push	r13
 6e4:	ef 92       	push	r14
 6e6:	ff 92       	push	r15
 6e8:	0f 93       	push	r16
 6ea:	1f 93       	push	r17
 6ec:	df 93       	push	r29
 6ee:	cf 93       	push	r28
 6f0:	00 d0       	rcall	.+0      	; 0x6f2 <printCapturedData+0x26>
 6f2:	00 d0       	rcall	.+0      	; 0x6f4 <printCapturedData+0x28>
 6f4:	cd b7       	in	r28, 0x3d	; 61
 6f6:	de b7       	in	r29, 0x3e	; 62
 6f8:	6b 01       	movw	r12, r22
 6fa:	7c 01       	movw	r14, r24
 6fc:	94 2e       	mov	r9, r20
	unsigned int m,j, b,sampleLength,n,samplLength;
	unsigned char w, sample, nextSample = 0;
	unsigned long lengthSum,oldLength;

	lcd_clear_area(1,1,42);
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	61 e0       	ldi	r22, 0x01	; 1
 702:	4a e2       	ldi	r20, 0x2A	; 42
 704:	e2 d2       	rcall	.+1476   	; 0xcca <lcd_clear_area>

	ltoa(position,int2str,10);
 706:	01 e8       	ldi	r16, 0x81	; 129
 708:	13 e0       	ldi	r17, 0x03	; 3
 70a:	c7 01       	movw	r24, r14
 70c:	b6 01       	movw	r22, r12
 70e:	a8 01       	movw	r20, r16
 710:	2a e0       	ldi	r18, 0x0A	; 10
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	ba d3       	rcall	.+1908   	; 0xe8a <ltoa>
	w = strlen(int2str);
 716:	f8 01       	movw	r30, r16
 718:	01 90       	ld	r0, Z+
 71a:	00 20       	and	r0, r0
 71c:	e9 f7       	brne	.-6      	; 0x718 <printCapturedData+0x4c>
 71e:	31 97       	sbiw	r30, 0x01	; 1
 720:	e0 1b       	sub	r30, r16
 722:	f1 0b       	sbc	r31, r17
	lcd_goto_xy(9-w,1);
 724:	89 e0       	ldi	r24, 0x09	; 9
 726:	8e 1b       	sub	r24, r30
 728:	61 e0       	ldi	r22, 0x01	; 1
 72a:	37 d2       	rcall	.+1134   	; 0xb9a <lcd_goto_xy>
	lcd_str(int2str);
 72c:	c8 01       	movw	r24, r16
 72e:	c1 d2       	rcall	.+1410   	; 0xcb2 <lcd_str>
	lcd_goto_xy(1,inputChannel + 3); //Go to LCD line 3, 4, 5 or 6.
 730:	69 2d       	mov	r22, r9
 732:	6d 5f       	subi	r22, 0xFD	; 253
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	31 d2       	rcall	.+1122   	; 0xb9a <lcd_goto_xy>
	b = 0;
	lengthSum = 0;
	oldLength = 0;
	samplLength = 0;

	sampleLength = lengthBuffer[b];
 738:	e0 91 83 01 	lds	r30, 0x0183
 73c:	f0 91 84 01 	lds	r31, 0x0184
 740:	20 e0       	ldi	r18, 0x00	; 0
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	40 e0       	ldi	r20, 0x00	; 0
 746:	50 e0       	ldi	r21, 0x00	; 0
 748:	aa 24       	eor	r10, r10
 74a:	bb 24       	eor	r11, r11
 74c:	65 01       	movw	r12, r10
 74e:	60 e0       	ldi	r22, 0x00	; 0
 750:	70 e0       	ldi	r23, 0x00	; 0
	do
	{
		lengthSum += sampleLength;
 752:	7f 01       	movw	r14, r30
 754:	00 e0       	ldi	r16, 0x00	; 0
 756:	10 e0       	ldi	r17, 0x00	; 0
 758:	2e 0d       	add	r18, r14
 75a:	3f 1d       	adc	r19, r15
 75c:	40 1f       	adc	r20, r16
 75e:	51 1f       	adc	r21, r17
		if(samplesPos > lengthSum)
 760:	80 91 76 00 	lds	r24, 0x0076
 764:	90 91 77 00 	lds	r25, 0x0077
 768:	a0 91 78 00 	lds	r26, 0x0078
 76c:	b0 91 79 00 	lds	r27, 0x0079
 770:	28 17       	cp	r18, r24
 772:	39 07       	cpc	r19, r25
 774:	4a 07       	cpc	r20, r26
 776:	5b 07       	cpc	r21, r27
 778:	70 f4       	brcc	.+28     	; 0x796 <printCapturedData+0xca>
		{
			oldLength += sampleLength;
 77a:	ae 0c       	add	r10, r14
 77c:	bf 1c       	adc	r11, r15
 77e:	c0 1e       	adc	r12, r16
 780:	d1 1e       	adc	r13, r17
			b++;
 782:	6f 5f       	subi	r22, 0xFF	; 255
 784:	7f 4f       	sbci	r23, 0xFF	; 255
			sampleLength = lengthBuffer[b];
 786:	fb 01       	movw	r30, r22
 788:	ee 0f       	add	r30, r30
 78a:	ff 1f       	adc	r31, r31
 78c:	ed 57       	subi	r30, 0x7D	; 125
 78e:	fe 4f       	sbci	r31, 0xFE	; 254
 790:	01 90       	ld	r0, Z+
 792:	f0 81       	ld	r31, Z
 794:	e0 2d       	mov	r30, r0
		}
	}while(samplesPos > lengthSum);
 796:	80 91 76 00 	lds	r24, 0x0076
 79a:	90 91 77 00 	lds	r25, 0x0077
 79e:	a0 91 78 00 	lds	r26, 0x0078
 7a2:	b0 91 79 00 	lds	r27, 0x0079
 7a6:	28 17       	cp	r18, r24
 7a8:	39 07       	cpc	r19, r25
 7aa:	4a 07       	cpc	r20, r26
 7ac:	5b 07       	cpc	r21, r27
 7ae:	88 f2       	brcs	.-94     	; 0x752 <printCapturedData+0x86>
//
//========================================================================
void printCapturedData (unsigned long position, unsigned char inputChannel)
{
	unsigned int m,j, b,sampleLength,n,samplLength;
	unsigned char w, sample, nextSample = 0;
 7b0:	1a 82       	std	Y+2, r1	; 0x02
 7b2:	21 e0       	ldi	r18, 0x01	; 1
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	02 c0       	rjmp	.+4      	; 0x7bc <printCapturedData+0xf0>
 7b8:	22 0f       	add	r18, r18
 7ba:	33 1f       	adc	r19, r19
 7bc:	9a 94       	dec	r9
 7be:	e2 f7       	brpl	.-8      	; 0x7b8 <printCapturedData+0xec>
 7c0:	3c 83       	std	Y+4, r19	; 0x04
 7c2:	2b 83       	std	Y+3, r18	; 0x03
 7c4:	20 e8       	ldi	r18, 0x80	; 128
 7c6:	22 2e       	mov	r2, r18
 7c8:	20 e0       	ldi	r18, 0x00	; 0
 7ca:	32 2e       	mov	r3, r18
 7cc:	26 0e       	add	r2, r22
 7ce:	37 1e       	adc	r3, r23
 7d0:	7b 01       	movw	r14, r22
 7d2:	ee 0c       	add	r14, r14
 7d4:	ff 1c       	adc	r15, r15
 7d6:	83 e8       	ldi	r24, 0x83	; 131
 7d8:	91 e0       	ldi	r25, 0x01	; 1
 7da:	e8 0e       	add	r14, r24
 7dc:	f9 1e       	adc	r15, r25
 7de:	2b 01       	movw	r4, r22
 7e0:	66 24       	eor	r6, r6
 7e2:	77 24       	eor	r7, r7
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	61 c0       	rjmp	.+194    	; 0x8aa <printCapturedData+0x1de>
		}
	}while(samplesPos > lengthSum);

	for(m=b;m<BUFFER_SIZE;m++)
	{
		sampleLength = lengthBuffer[m];
 7e8:	f7 01       	movw	r30, r14
 7ea:	20 81       	ld	r18, Z
 7ec:	31 81       	ldd	r19, Z+1	; 0x01
		if(w > 0)
 7ee:	88 23       	and	r24, r24
 7f0:	61 f0       	breq	.+24     	; 0x80a <printCapturedData+0x13e>
		{
			sampleLength -= (samplesPos - oldLength);
 7f2:	80 91 76 00 	lds	r24, 0x0076
 7f6:	90 91 77 00 	lds	r25, 0x0077
 7fa:	a0 91 78 00 	lds	r26, 0x0078
 7fe:	b0 91 79 00 	lds	r27, 0x0079
 802:	28 1b       	sub	r18, r24
 804:	39 0b       	sbc	r19, r25
 806:	2a 0d       	add	r18, r10
 808:	3b 1d       	adc	r19, r11
			w=0;			
		}
		
		sample = dataBuffer[m];
 80a:	f1 01       	movw	r30, r2
 80c:	90 81       	ld	r25, Z
 80e:	99 83       	std	Y+1, r25	; 0x01
		if((m+1) < (BUFFER_SIZE))
 810:	08 94       	sec
 812:	41 1c       	adc	r4, r1
 814:	51 1c       	adc	r5, r1
 816:	ff ef       	ldi	r31, 0xFF	; 255
 818:	4f 16       	cp	r4, r31
 81a:	51 04       	cpc	r5, r1
 81c:	21 f0       	breq	.+8      	; 0x826 <printCapturedData+0x15a>
		{
			nextSample = dataBuffer[m+1]; 
 81e:	f1 01       	movw	r30, r2
 820:	81 81       	ldd	r24, Z+1	; 0x01
			nextSample ^= sample;
 822:	89 27       	eor	r24, r25
 824:	8a 83       	std	Y+2, r24	; 0x02
		}
		samplLength = sampleLength;
		if(zoom > 0)
 826:	80 91 7c 00 	lds	r24, 0x007C
 82a:	90 91 7d 00 	lds	r25, 0x007D
 82e:	89 2b       	or	r24, r25
 830:	11 f4       	brne	.+4      	; 0x836 <printCapturedData+0x16a>
 832:	49 01       	movw	r8, r18
 834:	07 c0       	rjmp	.+14     	; 0x844 <printCapturedData+0x178>
			samplLength /= zoom; 
 836:	60 91 7c 00 	lds	r22, 0x007C
 83a:	70 91 7d 00 	lds	r23, 0x007D
 83e:	c9 01       	movw	r24, r18
 840:	f1 d2       	rcall	.+1506   	; 0xe24 <__udivmodhi4>
 842:	4b 01       	movw	r8, r22
 844:	00 e0       	ldi	r16, 0x00	; 0
 846:	10 e0       	ldi	r17, 0x00	; 0
 848:	15 c0       	rjmp	.+42     	; 0x874 <printCapturedData+0x1a8>

		for(j=0;j<samplLength;j++)
		{
			if(bit_is_set(sample,inputChannel))
 84a:	89 81       	ldd	r24, Y+1	; 0x01
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	2b 81       	ldd	r18, Y+3	; 0x03
 850:	3c 81       	ldd	r19, Y+4	; 0x04
 852:	82 23       	and	r24, r18
 854:	93 23       	and	r25, r19
 856:	89 2b       	or	r24, r25
 858:	11 f0       	breq	.+4      	; 0x85e <printCapturedData+0x192>
				lcd_col(ONE); //1
 85a:	80 e2       	ldi	r24, 0x20	; 32
 85c:	01 c0       	rjmp	.+2      	; 0x860 <printCapturedData+0x194>
			else
				lcd_col(ZERO);//0
 85e:	84 e0       	ldi	r24, 0x04	; 4
 860:	9e d2       	rcall	.+1340   	; 0xd9e <lcd_col>
			n++;
 862:	08 94       	sec
 864:	61 1c       	adc	r6, r1
 866:	71 1c       	adc	r7, r1

			if(n >= ONE_LINE_LENGTH)
 868:	34 e5       	ldi	r19, 0x54	; 84
 86a:	63 16       	cp	r6, r19
 86c:	71 04       	cpc	r7, r1
 86e:	28 f4       	brcc	.+10     	; 0x87a <printCapturedData+0x1ae>
		}
		samplLength = sampleLength;
		if(zoom > 0)
			samplLength /= zoom; 

		for(j=0;j<samplLength;j++)
 870:	0f 5f       	subi	r16, 0xFF	; 255
 872:	1f 4f       	sbci	r17, 0xFF	; 255
 874:	08 15       	cp	r16, r8
 876:	19 05       	cpc	r17, r9
 878:	40 f3       	brcs	.-48     	; 0x84a <printCapturedData+0x17e>
			n++;

			if(n >= ONE_LINE_LENGTH)
				break;
		}
		if(bit_is_set(nextSample,inputChannel))
 87a:	8a 81       	ldd	r24, Y+2	; 0x02
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	eb 81       	ldd	r30, Y+3	; 0x03
 880:	fc 81       	ldd	r31, Y+4	; 0x04
 882:	8e 23       	and	r24, r30
 884:	9f 23       	and	r25, r31
 886:	89 2b       	or	r24, r25
 888:	21 f0       	breq	.+8      	; 0x892 <printCapturedData+0x1c6>
		{
				lcd_pixelBack();
 88a:	9e d2       	rcall	.+1340   	; 0xdc8 <lcd_pixelBack>
				lcd_col(TRANSITION);
 88c:	8c e3       	ldi	r24, 0x3C	; 60
 88e:	87 d2       	rcall	.+1294   	; 0xd9e <lcd_col>
				nextSample = 0; //Set nextSample to <No Sample> status.
 890:	1a 82       	std	Y+2, r1	; 0x02
 892:	08 94       	sec
 894:	21 1c       	adc	r2, r1
 896:	31 1c       	adc	r3, r1
 898:	22 e0       	ldi	r18, 0x02	; 2
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	e2 0e       	add	r14, r18
 89e:	f3 1e       	adc	r15, r19
 8a0:	80 e0       	ldi	r24, 0x00	; 0
		}

		if(n >= ONE_LINE_LENGTH)
 8a2:	34 e5       	ldi	r19, 0x54	; 84
 8a4:	63 16       	cp	r6, r19
 8a6:	71 04       	cpc	r7, r1
 8a8:	28 f4       	brcc	.+10     	; 0x8b4 <printCapturedData+0x1e8>
			b++;
			sampleLength = lengthBuffer[b];
		}
	}while(samplesPos > lengthSum);

	for(m=b;m<BUFFER_SIZE;m++)
 8aa:	9f ef       	ldi	r25, 0xFF	; 255
 8ac:	49 16       	cp	r4, r25
 8ae:	51 04       	cpc	r5, r1
 8b0:	08 f4       	brcc	.+2      	; 0x8b4 <printCapturedData+0x1e8>
 8b2:	9a cf       	rjmp	.-204    	; 0x7e8 <printCapturedData+0x11c>
		}

		if(n >= ONE_LINE_LENGTH)
			break;
	}
}
 8b4:	0f 90       	pop	r0
 8b6:	0f 90       	pop	r0
 8b8:	0f 90       	pop	r0
 8ba:	0f 90       	pop	r0
 8bc:	cf 91       	pop	r28
 8be:	df 91       	pop	r29
 8c0:	1f 91       	pop	r17
 8c2:	0f 91       	pop	r16
 8c4:	ff 90       	pop	r15
 8c6:	ef 90       	pop	r14
 8c8:	df 90       	pop	r13
 8ca:	cf 90       	pop	r12
 8cc:	bf 90       	pop	r11
 8ce:	af 90       	pop	r10
 8d0:	9f 90       	pop	r9
 8d2:	8f 90       	pop	r8
 8d4:	7f 90       	pop	r7
 8d6:	6f 90       	pop	r6
 8d8:	5f 90       	pop	r5
 8da:	4f 90       	pop	r4
 8dc:	3f 90       	pop	r3
 8de:	2f 90       	pop	r2
 8e0:	08 95       	ret

000008e2 <sendChannelsDataOnLCD>:
//========================================================================
//
//========================================================================
void sendChannelsDataOnLCD (void)
{
	printCapturedData(samplesPos, IN1);
 8e2:	60 91 76 00 	lds	r22, 0x0076
 8e6:	70 91 77 00 	lds	r23, 0x0077
 8ea:	80 91 78 00 	lds	r24, 0x0078
 8ee:	90 91 79 00 	lds	r25, 0x0079
 8f2:	40 e0       	ldi	r20, 0x00	; 0
 8f4:	eb de       	rcall	.-554    	; 0x6cc <printCapturedData>
	printCapturedData(samplesPos, IN2);
 8f6:	60 91 76 00 	lds	r22, 0x0076
 8fa:	70 91 77 00 	lds	r23, 0x0077
 8fe:	80 91 78 00 	lds	r24, 0x0078
 902:	90 91 79 00 	lds	r25, 0x0079
 906:	41 e0       	ldi	r20, 0x01	; 1
 908:	e1 de       	rcall	.-574    	; 0x6cc <printCapturedData>
	printCapturedData(samplesPos, IN3);
 90a:	60 91 76 00 	lds	r22, 0x0076
 90e:	70 91 77 00 	lds	r23, 0x0077
 912:	80 91 78 00 	lds	r24, 0x0078
 916:	90 91 79 00 	lds	r25, 0x0079
 91a:	42 e0       	ldi	r20, 0x02	; 2
 91c:	d7 de       	rcall	.-594    	; 0x6cc <printCapturedData>
	printCapturedData(samplesPos, IN4);
 91e:	60 91 76 00 	lds	r22, 0x0076
 922:	70 91 77 00 	lds	r23, 0x0077
 926:	80 91 78 00 	lds	r24, 0x0078
 92a:	90 91 79 00 	lds	r25, 0x0079
 92e:	43 e0       	ldi	r20, 0x03	; 3
 930:	cd de       	rcall	.-614    	; 0x6cc <printCapturedData>
}
 932:	08 95       	ret

00000934 <checkDecreaseButton>:
//========================================================================
//
//========================================================================
void checkDecreaseButton (void)
{
	if(bit_is_clear(PINC,BTN_DECREASE)&&(samplesPos > 0)) //Scroll to the right the waveform content.
 934:	9d 99       	sbic	0x13, 5	; 19
 936:	41 c0       	rjmp	.+130    	; 0x9ba <checkDecreaseButton+0x86>
 938:	80 91 76 00 	lds	r24, 0x0076
 93c:	90 91 77 00 	lds	r25, 0x0077
 940:	a0 91 78 00 	lds	r26, 0x0078
 944:	b0 91 79 00 	lds	r27, 0x0079
 948:	00 97       	sbiw	r24, 0x00	; 0
 94a:	a1 05       	cpc	r26, r1
 94c:	b1 05       	cpc	r27, r1
 94e:	a9 f1       	breq	.+106    	; 0x9ba <checkDecreaseButton+0x86>
	{
		if(counter < MAX_SAMPLE_TIME)
 950:	80 91 7f 01 	lds	r24, 0x017F
 954:	90 91 80 01 	lds	r25, 0x0180
 958:	8e 5f       	subi	r24, 0xFE	; 254
 95a:	9f 4f       	sbci	r25, 0xFF	; 255
 95c:	70 f5       	brcc	.+92     	; 0x9ba <checkDecreaseButton+0x86>
		{
			if(samplesPos >= zoom)
 95e:	20 91 76 00 	lds	r18, 0x0076
 962:	30 91 77 00 	lds	r19, 0x0077
 966:	40 91 78 00 	lds	r20, 0x0078
 96a:	50 91 79 00 	lds	r21, 0x0079
 96e:	80 91 7c 00 	lds	r24, 0x007C
 972:	90 91 7d 00 	lds	r25, 0x007D
 976:	a0 e0       	ldi	r26, 0x00	; 0
 978:	b0 e0       	ldi	r27, 0x00	; 0
 97a:	28 17       	cp	r18, r24
 97c:	39 07       	cpc	r19, r25
 97e:	4a 07       	cpc	r20, r26
 980:	5b 07       	cpc	r21, r27
 982:	d0 f0       	brcs	.+52     	; 0x9b8 <checkDecreaseButton+0x84>
				samplesPos -= zoom;
 984:	20 91 76 00 	lds	r18, 0x0076
 988:	30 91 77 00 	lds	r19, 0x0077
 98c:	40 91 78 00 	lds	r20, 0x0078
 990:	50 91 79 00 	lds	r21, 0x0079
 994:	80 91 7c 00 	lds	r24, 0x007C
 998:	90 91 7d 00 	lds	r25, 0x007D
 99c:	a0 e0       	ldi	r26, 0x00	; 0
 99e:	b0 e0       	ldi	r27, 0x00	; 0
 9a0:	28 1b       	sub	r18, r24
 9a2:	39 0b       	sbc	r19, r25
 9a4:	4a 0b       	sbc	r20, r26
 9a6:	5b 0b       	sbc	r21, r27
 9a8:	20 93 76 00 	sts	0x0076, r18
 9ac:	30 93 77 00 	sts	0x0077, r19
 9b0:	40 93 78 00 	sts	0x0078, r20
 9b4:	50 93 79 00 	sts	0x0079, r21
			sendChannelsDataOnLCD();
 9b8:	94 df       	rcall	.-216    	; 0x8e2 <sendChannelsDataOnLCD>
 9ba:	08 95       	ret

000009bc <checkIncreaseButton>:

//========================================================================
//
//========================================================================
void checkIncreaseButton (void)
{
 9bc:	ef 92       	push	r14
 9be:	ff 92       	push	r15
 9c0:	0f 93       	push	r16
 9c2:	1f 93       	push	r17
	if(bit_is_clear(PIND,BTN_INCREASE)&&(samplesPos < POSITIONS_LENGTH)) //Scroll to the left the waveform content.
 9c4:	84 99       	sbic	0x10, 4	; 16
 9c6:	4a c0       	rjmp	.+148    	; 0xa5c <checkIncreaseButton+0xa0>
 9c8:	80 91 76 00 	lds	r24, 0x0076
 9cc:	90 91 77 00 	lds	r25, 0x0077
 9d0:	a0 91 78 00 	lds	r26, 0x0078
 9d4:	b0 91 79 00 	lds	r27, 0x0079
 9d8:	8c 5b       	subi	r24, 0xBC	; 188
 9da:	9d 4f       	sbci	r25, 0xFD	; 253
 9dc:	a1 42       	sbci	r26, 0x21	; 33
 9de:	b1 40       	sbci	r27, 0x01	; 1
 9e0:	e8 f5       	brcc	.+122    	; 0xa5c <checkIncreaseButton+0xa0>
	{

		if(counter < MAX_SAMPLE_TIME)
 9e2:	80 91 7f 01 	lds	r24, 0x017F
 9e6:	90 91 80 01 	lds	r25, 0x0180
 9ea:	8e 5f       	subi	r24, 0xFE	; 254
 9ec:	9f 4f       	sbci	r25, 0xFF	; 255
 9ee:	b0 f5       	brcc	.+108    	; 0xa5c <checkIncreaseButton+0xa0>
		{
			if(samplesPos < (POSITIONS_LENGTH - zoom))
 9f0:	e0 90 76 00 	lds	r14, 0x0076
 9f4:	f0 90 77 00 	lds	r15, 0x0077
 9f8:	00 91 78 00 	lds	r16, 0x0078
 9fc:	10 91 79 00 	lds	r17, 0x0079
 a00:	20 91 7c 00 	lds	r18, 0x007C
 a04:	30 91 7d 00 	lds	r19, 0x007D
 a08:	40 e0       	ldi	r20, 0x00	; 0
 a0a:	50 e0       	ldi	r21, 0x00	; 0
 a0c:	8c eb       	ldi	r24, 0xBC	; 188
 a0e:	9d ef       	ldi	r25, 0xFD	; 253
 a10:	a1 e2       	ldi	r26, 0x21	; 33
 a12:	b1 e0       	ldi	r27, 0x01	; 1
 a14:	82 1b       	sub	r24, r18
 a16:	93 0b       	sbc	r25, r19
 a18:	a4 0b       	sbc	r26, r20
 a1a:	b5 0b       	sbc	r27, r21
 a1c:	e8 16       	cp	r14, r24
 a1e:	f9 06       	cpc	r15, r25
 a20:	0a 07       	cpc	r16, r26
 a22:	1b 07       	cpc	r17, r27
 a24:	d0 f4       	brcc	.+52     	; 0xa5a <checkIncreaseButton+0x9e>
				samplesPos += zoom;
 a26:	20 91 76 00 	lds	r18, 0x0076
 a2a:	30 91 77 00 	lds	r19, 0x0077
 a2e:	40 91 78 00 	lds	r20, 0x0078
 a32:	50 91 79 00 	lds	r21, 0x0079
 a36:	80 91 7c 00 	lds	r24, 0x007C
 a3a:	90 91 7d 00 	lds	r25, 0x007D
 a3e:	a0 e0       	ldi	r26, 0x00	; 0
 a40:	b0 e0       	ldi	r27, 0x00	; 0
 a42:	82 0f       	add	r24, r18
 a44:	93 1f       	adc	r25, r19
 a46:	a4 1f       	adc	r26, r20
 a48:	b5 1f       	adc	r27, r21
 a4a:	80 93 76 00 	sts	0x0076, r24
 a4e:	90 93 77 00 	sts	0x0077, r25
 a52:	a0 93 78 00 	sts	0x0078, r26
 a56:	b0 93 79 00 	sts	0x0079, r27
			sendChannelsDataOnLCD();
 a5a:	43 df       	rcall	.-378    	; 0x8e2 <sendChannelsDataOnLCD>
		}
	}
}		
 a5c:	1f 91       	pop	r17
 a5e:	0f 91       	pop	r16
 a60:	ff 90       	pop	r15
 a62:	ef 90       	pop	r14
 a64:	08 95       	ret

00000a66 <checkIfNoButtonIsPressed>:
}
//========================================================================
//
//========================================================================
void checkIfNoButtonIsPressed (void)
{
 a66:	0f 93       	push	r16
 a68:	1f 93       	push	r17
	unsigned int w;

	if(bit_is_clear(PIND,BTN_ZOOM_OUT))
 a6a:	85 99       	sbic	0x10, 5	; 16
 a6c:	38 c0       	rjmp	.+112    	; 0xade <checkIfNoButtonIsPressed+0x78>
	{
		while(bit_is_clear(PIND,BTN_ZOOM_OUT));
 a6e:	85 9b       	sbis	0x10, 5	; 16
 a70:	fe cf       	rjmp	.-4      	; 0xa6e <checkIfNoButtonIsPressed+0x8>
		//getNextSampleString();
		if((zoom > 0)&&(zoom < 8192))
 a72:	80 91 7c 00 	lds	r24, 0x007C
 a76:	90 91 7d 00 	lds	r25, 0x007D
 a7a:	89 2b       	or	r24, r25
 a7c:	71 f0       	breq	.+28     	; 0xa9a <checkIfNoButtonIsPressed+0x34>
 a7e:	80 91 7c 00 	lds	r24, 0x007C
 a82:	90 91 7d 00 	lds	r25, 0x007D
 a86:	80 50       	subi	r24, 0x00	; 0
 a88:	90 42       	sbci	r25, 0x20	; 32
 a8a:	38 f4       	brcc	.+14     	; 0xa9a <checkIfNoButtonIsPressed+0x34>
			zoom *= 2;
 a8c:	80 91 7c 00 	lds	r24, 0x007C
 a90:	90 91 7d 00 	lds	r25, 0x007D
 a94:	88 0f       	add	r24, r24
 a96:	99 1f       	adc	r25, r25
 a98:	02 c0       	rjmp	.+4      	; 0xa9e <checkIfNoButtonIsPressed+0x38>
		else
			zoom = 1;
 a9a:	81 e0       	ldi	r24, 0x01	; 1
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	90 93 7d 00 	sts	0x007D, r25
 aa2:	80 93 7c 00 	sts	0x007C, r24
		
		lcd_clear_area(1,61,83);
 aa6:	81 e0       	ldi	r24, 0x01	; 1
 aa8:	6d e3       	ldi	r22, 0x3D	; 61
 aaa:	43 e5       	ldi	r20, 0x53	; 83
 aac:	0e d1       	rcall	.+540    	; 0xcca <lcd_clear_area>
		itoa(zoom,int2str,10);
 aae:	80 91 7c 00 	lds	r24, 0x007C
 ab2:	90 91 7d 00 	lds	r25, 0x007D
 ab6:	01 e8       	ldi	r16, 0x81	; 129
 ab8:	13 e0       	ldi	r17, 0x03	; 3
 aba:	b8 01       	movw	r22, r16
 abc:	4a e0       	ldi	r20, 0x0A	; 10
 abe:	50 e0       	ldi	r21, 0x00	; 0
 ac0:	c5 d1       	rcall	.+906    	; 0xe4c <itoa>
		w = strlen(int2str);
 ac2:	f8 01       	movw	r30, r16
 ac4:	01 90       	ld	r0, Z+
 ac6:	00 20       	and	r0, r0
 ac8:	e9 f7       	brne	.-6      	; 0xac4 <checkIfNoButtonIsPressed+0x5e>
 aca:	31 97       	sbiw	r30, 0x01	; 1
 acc:	e0 1b       	sub	r30, r16
 ace:	f1 0b       	sbc	r31, r17
		lcd_goto_xy(15 - w,1);
 ad0:	8f e0       	ldi	r24, 0x0F	; 15
 ad2:	8e 1b       	sub	r24, r30
 ad4:	61 e0       	ldi	r22, 0x01	; 1
 ad6:	61 d0       	rcall	.+194    	; 0xb9a <lcd_goto_xy>
		lcd_str(int2str);
 ad8:	c8 01       	movw	r24, r16
 ada:	eb d0       	rcall	.+470    	; 0xcb2 <lcd_str>

		sendChannelsDataOnLCD();
 adc:	02 df       	rcall	.-508    	; 0x8e2 <sendChannelsDataOnLCD>
	}
}
 ade:	1f 91       	pop	r17
 ae0:	0f 91       	pop	r16
 ae2:	08 95       	ret

00000ae4 <main>:
//  Main program 
//========================================================================
int main(void)
{	
	
	DDRD = 0x00;
 ae4:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
 ae6:	12 ba       	out	0x12, r1	; 18

	DDRC = 0x00;
 ae8:	14 ba       	out	0x14, r1	; 20
	PORTC = 0xff;
 aea:	8f ef       	ldi	r24, 0xFF	; 255
 aec:	85 bb       	out	0x15, r24	; 21

	DDRB |= (1<<LED1);
 aee:	bd 9a       	sbi	0x17, 5	; 23

	PORTB &= ~(1<<LED1);
 af0:	c5 98       	cbi	0x18, 5	; 24
	PORTD |= (1<<BTN_INCREASE);    //Enable pull-up resistor on BTN_DECREASE pin.
 af2:	94 9a       	sbi	0x12, 4	; 18
	PORTC |= (1<<BTN_DECREASE);    //Enable pull-up resistor on BTN_INCREASE pin.
 af4:	ad 9a       	sbi	0x15, 5	; 21
	PORTD |= (1<<BTN_ZOOM_OUT);    //Enable pull-up resistor on BTN_ZOOM_OUT pin.
 af6:	95 9a       	sbi	0x12, 5	; 18
 af8:	88 ee       	ldi	r24, 0xE8	; 232
 afa:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 afc:	20 e9       	ldi	r18, 0x90	; 144
 afe:	31 e0       	ldi	r19, 0x01	; 1
 b00:	f9 01       	movw	r30, r18
 b02:	31 97       	sbiw	r30, 0x01	; 1
 b04:	f1 f7       	brne	.-4      	; 0xb02 <main+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 b06:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 b08:	d9 f7       	brne	.-10     	; 0xb00 <main+0x1c>

///*

	_delay_ms(100);

	lcd_init();
 b0a:	2a d1       	rcall	.+596    	; 0xd60 <lcd_init>
 b0c:	88 ee       	ldi	r24, 0xE8	; 232
 b0e:	93 e0       	ldi	r25, 0x03	; 3
 b10:	20 e9       	ldi	r18, 0x90	; 144
 b12:	31 e0       	ldi	r19, 0x01	; 1
 b14:	f9 01       	movw	r30, r18
 b16:	31 97       	sbiw	r30, 0x01	; 1
 b18:	f1 f7       	brne	.-4      	; 0xb16 <main+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 b1a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 b1c:	d9 f7       	brne	.-10     	; 0xb14 <main+0x30>

	_delay_ms(100);

	lcd_contrast(0x40);
 b1e:	80 e4       	ldi	r24, 0x40	; 64
 b20:	11 d1       	rcall	.+546    	; 0xd44 <lcd_contrast>

	printPictureOnLCD(introScreen);
 b22:	86 e2       	ldi	r24, 0x26	; 38
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	5a d1       	rcall	.+692    	; 0xddc <printPictureOnLCD>
	//_delay_ms(2000);
	printPictureOnLCD(createdBy);
 b28:	8e e1       	ldi	r24, 0x1E	; 30
 b2a:	92 e0       	ldi	r25, 0x02	; 2
 b2c:	57 d1       	rcall	.+686    	; 0xddc <printPictureOnLCD>
	
	samplesPos = 0;
 b2e:	10 92 76 00 	sts	0x0076, r1
 b32:	10 92 77 00 	sts	0x0077, r1
 b36:	10 92 78 00 	sts	0x0078, r1
 b3a:	10 92 79 00 	sts	0x0079, r1
	bufferUsedSpace = 0;
 b3e:	10 92 7b 00 	sts	0x007B, r1
 b42:	10 92 7a 00 	sts	0x007A, r1
	zoom = 1;
 b46:	81 e0       	ldi	r24, 0x01	; 1
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	90 93 7d 00 	sts	0x007D, r25
 b4e:	80 93 7c 00 	sts	0x007C, r24
	minSampleTime = MAX_SAMPLE_TIME;
 b52:	8e ef       	ldi	r24, 0xFE	; 254
 b54:	9f ef       	ldi	r25, 0xFF	; 255
 b56:	90 93 82 01 	sts	0x0182, r25
 b5a:	80 93 81 01 	sts	0x0181, r24
	counter = 0;
 b5e:	10 92 80 01 	sts	0x0180, r1
 b62:	10 92 7f 01 	sts	0x017F, r1

	lcd_clear();
 b66:	d8 d0       	rcall	.+432    	; 0xd18 <lcd_clear>
	lcd_goto_xy(3,3);
 b68:	83 e0       	ldi	r24, 0x03	; 3
 b6a:	63 e0       	ldi	r22, 0x03	; 3
 b6c:	16 d0       	rcall	.+44     	; 0xb9a <lcd_goto_xy>
	lcd_str("Waiting for");
 b6e:	80 e6       	ldi	r24, 0x60	; 96
 b70:	90 e0       	ldi	r25, 0x00	; 0
 b72:	9f d0       	rcall	.+318    	; 0xcb2 <lcd_str>
	lcd_goto_xy(4,4);
 b74:	84 e0       	ldi	r24, 0x04	; 4
 b76:	64 e0       	ldi	r22, 0x04	; 4
 b78:	10 d0       	rcall	.+32     	; 0xb9a <lcd_goto_xy>
	lcd_str("signal...");
 b7a:	8c e6       	ldi	r24, 0x6C	; 108
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	99 d0       	rcall	.+306    	; 0xcb2 <lcd_str>
//*/	
	checkInputs(); // Stay here until a logic level change will be made on PORT D.
 b80:	59 dd       	rcall	.-1358   	; 0x634 <checkInputs>
	               // Then, read all changes on PORT D until dataBuffer will be full.

	lcd_clear();
 b82:	ca d0       	rcall	.+404    	; 0xd18 <lcd_clear>
	lcd_goto_xy(14,1);
 b84:	8e e0       	ldi	r24, 0x0E	; 14
 b86:	61 e0       	ldi	r22, 0x01	; 1
 b88:	08 d0       	rcall	.+16     	; 0xb9a <lcd_goto_xy>
	lcd_chr('1');
 b8a:	81 e3       	ldi	r24, 0x31	; 49
 b8c:	63 d0       	rcall	.+198    	; 0xc54 <lcd_chr>
	printRuler();
 b8e:	78 dd       	rcall	.-1296   	; 0x680 <printRuler>
	sendChannelsDataOnLCD();
 b90:	a8 de       	rcall	.-688    	; 0x8e2 <sendChannelsDataOnLCD>
	
	for(;;)
	{
		checkDecreaseButton();
 b92:	d0 de       	rcall	.-608    	; 0x934 <checkDecreaseButton>
		checkIncreaseButton();
 b94:	13 df       	rcall	.-474    	; 0x9bc <checkIncreaseButton>
		checkIfNoButtonIsPressed();
 b96:	67 df       	rcall	.-306    	; 0xa66 <checkIfNoButtonIsPressed>
 b98:	fc cf       	rjmp	.-8      	; 0xb92 <main+0xae>

00000b9a <lcd_goto_xy>:
}

/* Sets cursor location to xy location corresponding to basic font size */
void lcd_goto_xy(unsigned char x, unsigned char y)
{
    lcdCacheIdx = (x-1)*6 + (y-1)*84;
 b9a:	96 e0       	ldi	r25, 0x06	; 6
 b9c:	89 9f       	mul	r24, r25
 b9e:	c0 01       	movw	r24, r0
 ba0:	11 24       	eor	r1, r1
 ba2:	8a 55       	subi	r24, 0x5A	; 90
 ba4:	90 40       	sbci	r25, 0x00	; 0
 ba6:	24 e5       	ldi	r18, 0x54	; 84
 ba8:	62 9f       	mul	r22, r18
 baa:	b0 01       	movw	r22, r0
 bac:	11 24       	eor	r1, r1
 bae:	86 0f       	add	r24, r22
 bb0:	97 1f       	adc	r25, r23
 bb2:	90 93 8a 03 	sts	0x038A, r25
 bb6:	80 93 89 03 	sts	0x0389, r24
}
 bba:	08 95       	ret

00000bbc <lcd_goto_xy_exact>:

/* Sets cursor location to exact xy pixel location on the lcd */
void lcd_goto_xy_exact(unsigned char x, unsigned char y)
{
    lcdCacheIdx = (x-1) + (y-1)*84;
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	85 55       	subi	r24, 0x55	; 85
 bc0:	90 40       	sbci	r25, 0x00	; 0
 bc2:	24 e5       	ldi	r18, 0x54	; 84
 bc4:	62 9f       	mul	r22, r18
 bc6:	b0 01       	movw	r22, r0
 bc8:	11 24       	eor	r1, r1
 bca:	86 0f       	add	r24, r22
 bcc:	97 1f       	adc	r25, r23
 bce:	90 93 8a 03 	sts	0x038A, r25
 bd2:	80 93 89 03 	sts	0x0389, r24
}
 bd6:	08 95       	ret

00000bd8 <lcd_send>:
	lcd_send(0x40 |(addr / LCD_X_RES), LCD_CMD);
}

/* Sends data to display controller */
void lcd_send(unsigned char data, LcdCmdData cd)
{
 bd8:	98 2f       	mov	r25, r24
	// Data/DC are outputs for the lcd (all low)
	LCD_DDR |= LCD_DATA_PIN | LCD_DC_PIN;
 bda:	87 b3       	in	r24, 0x17	; 23
 bdc:	8c 60       	ori	r24, 0x0C	; 12
 bde:	87 bb       	out	0x17, r24	; 23
	
    // Enable display controller (active low)
    LCD_PORT &= ~LCD_SCE_PIN;
 be0:	c0 98       	cbi	0x18, 0	; 24

    // Either command or data
    if(cd == LCD_DATA) {
 be2:	61 30       	cpi	r22, 0x01	; 1
 be4:	11 f4       	brne	.+4      	; 0xbea <lcd_send+0x12>
        LCD_PORT |= LCD_DC_PIN;
 be6:	c2 9a       	sbi	0x18, 2	; 24
 be8:	01 c0       	rjmp	.+2      	; 0xbec <lcd_send+0x14>
    } else {
        LCD_PORT &= ~LCD_DC_PIN;
 bea:	c2 98       	cbi	0x18, 2	; 24
 bec:	27 e0       	ldi	r18, 0x07	; 7
 bee:	30 e0       	ldi	r19, 0x00	; 0
    }
	
	for(unsigned char i=0;i<8;i++) {
	
		// Set the DATA pin value
		if((data>>(7-i)) & 0x01) {
 bf0:	49 2f       	mov	r20, r25
 bf2:	50 e0       	ldi	r21, 0x00	; 0
 bf4:	ca 01       	movw	r24, r20
 bf6:	02 2e       	mov	r0, r18
 bf8:	02 c0       	rjmp	.+4      	; 0xbfe <lcd_send+0x26>
 bfa:	95 95       	asr	r25
 bfc:	87 95       	ror	r24
 bfe:	0a 94       	dec	r0
 c00:	e2 f7       	brpl	.-8      	; 0xbfa <lcd_send+0x22>
 c02:	80 ff       	sbrs	r24, 0
 c04:	02 c0       	rjmp	.+4      	; 0xc0a <lcd_send+0x32>
			LCD_PORT |= LCD_DATA_PIN;
 c06:	c3 9a       	sbi	0x18, 3	; 24
 c08:	01 c0       	rjmp	.+2      	; 0xc0c <lcd_send+0x34>
		} else {
			LCD_PORT &= ~LCD_DATA_PIN;
 c0a:	c3 98       	cbi	0x18, 3	; 24
		}
		
		// Toggle the clock
		LCD_PORT |= LCD_CLK_PIN;
 c0c:	c4 9a       	sbi	0x18, 4	; 24
		LCD_PORT &= ~LCD_CLK_PIN;
 c0e:	c4 98       	cbi	0x18, 4	; 24
 c10:	21 50       	subi	r18, 0x01	; 1
 c12:	30 40       	sbci	r19, 0x00	; 0
        LCD_PORT |= LCD_DC_PIN;
    } else {
        LCD_PORT &= ~LCD_DC_PIN;
    }
	
	for(unsigned char i=0;i<8;i++) {
 c14:	8f ef       	ldi	r24, 0xFF	; 255
 c16:	2f 3f       	cpi	r18, 0xFF	; 255
 c18:	38 07       	cpc	r19, r24
 c1a:	61 f7       	brne	.-40     	; 0xbf4 <lcd_send+0x1c>
		LCD_PORT |= LCD_CLK_PIN;
		LCD_PORT &= ~LCD_CLK_PIN;
	}

	// Disable display controller
    LCD_PORT |= LCD_SCE_PIN;
 c1c:	c0 9a       	sbi	0x18, 0	; 24
	
	// Data/DC can be used as button inputs when not sending to LCD (/w pullups)
	LCD_DDR &= ~(LCD_DATA_PIN | LCD_DC_PIN);
 c1e:	87 b3       	in	r24, 0x17	; 23
 c20:	83 7f       	andi	r24, 0xF3	; 243
 c22:	87 bb       	out	0x17, r24	; 23
	LCD_PORT |= LCD_DATA_PIN | LCD_DC_PIN;
 c24:	88 b3       	in	r24, 0x18	; 24
 c26:	8c 60       	ori	r24, 0x0C	; 12
 c28:	88 bb       	out	0x18, r24	; 24
}
 c2a:	08 95       	ret

00000c2c <lcd_base_addr>:
        lcd_chr(*str++);
    }
}

// Set the base address of the lcd
void lcd_base_addr(unsigned int addr) {
 c2c:	0f 93       	push	r16
 c2e:	1f 93       	push	r17
 c30:	8c 01       	movw	r16, r24
	lcd_send(0x80 |(addr % LCD_X_RES), LCD_CMD);
 c32:	64 e5       	ldi	r22, 0x54	; 84
 c34:	70 e0       	ldi	r23, 0x00	; 0
 c36:	f6 d0       	rcall	.+492    	; 0xe24 <__udivmodhi4>
 c38:	80 68       	ori	r24, 0x80	; 128
 c3a:	60 e0       	ldi	r22, 0x00	; 0
 c3c:	cd df       	rcall	.-102    	; 0xbd8 <lcd_send>
	lcd_send(0x40 |(addr / LCD_X_RES), LCD_CMD);
 c3e:	c8 01       	movw	r24, r16
 c40:	64 e5       	ldi	r22, 0x54	; 84
 c42:	70 e0       	ldi	r23, 0x00	; 0
 c44:	ef d0       	rcall	.+478    	; 0xe24 <__udivmodhi4>
 c46:	86 2f       	mov	r24, r22
 c48:	80 64       	ori	r24, 0x40	; 64
 c4a:	60 e0       	ldi	r22, 0x00	; 0
 c4c:	c5 df       	rcall	.-118    	; 0xbd8 <lcd_send>
}
 c4e:	1f 91       	pop	r17
 c50:	0f 91       	pop	r16
 c52:	08 95       	ret

00000c54 <lcd_chr>:
    lcdCacheIdx = (x-1) + (y-1)*84;
}

/* Displays a character at current cursor location */
void lcd_chr(char chr)
{
 c54:	0f 93       	push	r16
 c56:	1f 93       	push	r17
 c58:	cf 93       	push	r28
 c5a:	df 93       	push	r29
 c5c:	08 2f       	mov	r16, r24
	lcd_base_addr(lcdCacheIdx);
 c5e:	80 91 89 03 	lds	r24, 0x0389
 c62:	90 91 8a 03 	lds	r25, 0x038A
 c66:	e2 df       	rcall	.-60     	; 0xc2c <lcd_base_addr>

    // 5 pixel wide characters and add space
    for(unsigned char i=0;i<5;i++) {
		lcd_send(pgm_read_byte(&font5x7[chr-32][i]) << 1, LCD_DATA);
 c68:	85 e0       	ldi	r24, 0x05	; 5
 c6a:	08 9f       	mul	r16, r24
 c6c:	80 01       	movw	r16, r0
 c6e:	11 24       	eor	r1, r1
 c70:	e8 01       	movw	r28, r16
 c72:	ca 58       	subi	r28, 0x8A	; 138
 c74:	dc 4f       	sbci	r29, 0xFC	; 252
void lcd_chr(char chr)
{
	lcd_base_addr(lcdCacheIdx);

    // 5 pixel wide characters and add space
    for(unsigned char i=0;i<5;i++) {
 c76:	0b 59       	subi	r16, 0x9B	; 155
 c78:	10 40       	sbci	r17, 0x00	; 0
 c7a:	0a 5e       	subi	r16, 0xEA	; 234
 c7c:	1b 4f       	sbci	r17, 0xFB	; 251
		lcd_send(pgm_read_byte(&font5x7[chr-32][i]) << 1, LCD_DATA);
 c7e:	fe 01       	movw	r30, r28
 c80:	84 91       	lpm	r24, Z+
 c82:	88 0f       	add	r24, r24
 c84:	61 e0       	ldi	r22, 0x01	; 1
 c86:	a8 df       	rcall	.-176    	; 0xbd8 <lcd_send>
 c88:	21 96       	adiw	r28, 0x01	; 1
void lcd_chr(char chr)
{
	lcd_base_addr(lcdCacheIdx);

    // 5 pixel wide characters and add space
    for(unsigned char i=0;i<5;i++) {
 c8a:	c0 17       	cp	r28, r16
 c8c:	d1 07       	cpc	r29, r17
 c8e:	b9 f7       	brne	.-18     	; 0xc7e <lcd_chr+0x2a>
		lcd_send(pgm_read_byte(&font5x7[chr-32][i]) << 1, LCD_DATA);
    }
	lcd_send(0, LCD_DATA);
 c90:	80 e0       	ldi	r24, 0x00	; 0
 c92:	61 e0       	ldi	r22, 0x01	; 1
 c94:	a1 df       	rcall	.-190    	; 0xbd8 <lcd_send>
	
	lcdCacheIdx += 6;
 c96:	80 91 89 03 	lds	r24, 0x0389
 c9a:	90 91 8a 03 	lds	r25, 0x038A
 c9e:	06 96       	adiw	r24, 0x06	; 6
 ca0:	90 93 8a 03 	sts	0x038A, r25
 ca4:	80 93 89 03 	sts	0x0389, r24
}
 ca8:	df 91       	pop	r29
 caa:	cf 91       	pop	r28
 cac:	1f 91       	pop	r17
 cae:	0f 91       	pop	r16
 cb0:	08 95       	ret

00000cb2 <lcd_str>:

/* Displays string at current cursor location and increment cursor location */
void lcd_str(char *str)
{
 cb2:	cf 93       	push	r28
 cb4:	df 93       	push	r29
 cb6:	ec 01       	movw	r28, r24
 cb8:	02 c0       	rjmp	.+4      	; 0xcbe <lcd_str+0xc>
    while(*str) {
        lcd_chr(*str++);
 cba:	21 96       	adiw	r28, 0x01	; 1
 cbc:	cb df       	rcall	.-106    	; 0xc54 <lcd_chr>
}

/* Displays string at current cursor location and increment cursor location */
void lcd_str(char *str)
{
    while(*str) {
 cbe:	88 81       	ld	r24, Y
 cc0:	88 23       	and	r24, r24
 cc2:	d9 f7       	brne	.-10     	; 0xcba <lcd_str+0x8>
        lcd_chr(*str++);
    }
}
 cc4:	df 91       	pop	r29
 cc6:	cf 91       	pop	r28
 cc8:	08 95       	ret

00000cca <lcd_clear_area>:
    }
}

/* Clears an area on a line */
void lcd_clear_area(unsigned char line, unsigned char startX, unsigned char endX)
{  
 cca:	0f 93       	push	r16
 ccc:	1f 93       	push	r17
 cce:	cf 93       	push	r28
 cd0:	df 93       	push	r29
    // Start and end positions of line
    int start = (line-1)*84+(startX-1);
 cd2:	94 e5       	ldi	r25, 0x54	; 84
 cd4:	89 9f       	mul	r24, r25
 cd6:	c0 01       	movw	r24, r0
 cd8:	11 24       	eor	r1, r1
 cda:	84 55       	subi	r24, 0x54	; 84
 cdc:	90 40       	sbci	r25, 0x00	; 0
    int end = (line-1)*84+(endX-1);
 cde:	8c 01       	movw	r16, r24
 ce0:	04 0f       	add	r16, r20
 ce2:	11 1d       	adc	r17, r1
 ce4:	01 50       	subi	r16, 0x01	; 1
 ce6:	10 40       	sbci	r17, 0x00	; 0
	
	lcd_base_addr(start);
 ce8:	c6 2f       	mov	r28, r22
 cea:	d0 e0       	ldi	r29, 0x00	; 0
 cec:	21 97       	sbiw	r28, 0x01	; 1
 cee:	c8 0f       	add	r28, r24
 cf0:	d9 1f       	adc	r29, r25
 cf2:	ce 01       	movw	r24, r28
 cf4:	9b df       	rcall	.-202    	; 0xc2c <lcd_base_addr>
 cf6:	04 c0       	rjmp	.+8      	; 0xd00 <lcd_clear_area+0x36>
    
    // Clear all data in range from cache
    for(unsigned int i=start;i<end;i++) {
        lcd_send(0, LCD_DATA);
 cf8:	80 e0       	ldi	r24, 0x00	; 0
 cfa:	61 e0       	ldi	r22, 0x01	; 1
 cfc:	6d df       	rcall	.-294    	; 0xbd8 <lcd_send>
    int end = (line-1)*84+(endX-1);
	
	lcd_base_addr(start);
    
    // Clear all data in range from cache
    for(unsigned int i=start;i<end;i++) {
 cfe:	21 96       	adiw	r28, 0x01	; 1
 d00:	c0 17       	cp	r28, r16
 d02:	d1 07       	cpc	r29, r17
 d04:	c8 f3       	brcs	.-14     	; 0xcf8 <lcd_clear_area+0x2e>
        lcd_send(0, LCD_DATA);
    }
}
 d06:	df 91       	pop	r29
 d08:	cf 91       	pop	r28
 d0a:	1f 91       	pop	r17
 d0c:	0f 91       	pop	r16
 d0e:	08 95       	ret

00000d10 <lcd_clear_line>:

/* Clears an entire text block. (rows of 8 pixels on the lcd) */
void lcd_clear_line(unsigned char line)
{
    lcd_clear_area(line, 1, LCD_X_RES);
 d10:	61 e0       	ldi	r22, 0x01	; 1
 d12:	44 e5       	ldi	r20, 0x54	; 84
 d14:	da df       	rcall	.-76     	; 0xcca <lcd_clear_area>
}
 d16:	08 95       	ret

00000d18 <lcd_clear>:
    lcd_send(0x20, LCD_CMD);				// LCD std cmds, hori addr mode
}

/* Clears the display */
void lcd_clear(void)
{
 d18:	cf 93       	push	r28
 d1a:	df 93       	push	r29
	lcdCacheIdx = 0;
 d1c:	10 92 8a 03 	sts	0x038A, r1
 d20:	10 92 89 03 	sts	0x0389, r1
	
	lcd_base_addr(lcdCacheIdx);
 d24:	80 e0       	ldi	r24, 0x00	; 0
 d26:	90 e0       	ldi	r25, 0x00	; 0
 d28:	81 df       	rcall	.-254    	; 0xc2c <lcd_base_addr>
 d2a:	c0 e0       	ldi	r28, 0x00	; 0
 d2c:	d0 e0       	ldi	r29, 0x00	; 0
	
    // Set the entire cache to zero and write 0s to lcd
    for(int i=0;i<LCD_CACHE_SIZE;i++) {
		lcd_send(0, LCD_DATA);
 d2e:	80 e0       	ldi	r24, 0x00	; 0
 d30:	61 e0       	ldi	r22, 0x01	; 1
 d32:	52 df       	rcall	.-348    	; 0xbd8 <lcd_send>
	lcdCacheIdx = 0;
	
	lcd_base_addr(lcdCacheIdx);
	
    // Set the entire cache to zero and write 0s to lcd
    for(int i=0;i<LCD_CACHE_SIZE;i++) {
 d34:	21 96       	adiw	r28, 0x01	; 1
 d36:	81 e0       	ldi	r24, 0x01	; 1
 d38:	c8 3f       	cpi	r28, 0xF8	; 248
 d3a:	d8 07       	cpc	r29, r24
 d3c:	c1 f7       	brne	.-16     	; 0xd2e <lcd_clear+0x16>
		lcd_send(0, LCD_DATA);
    }
}
 d3e:	df 91       	pop	r29
 d40:	cf 91       	pop	r28
 d42:	08 95       	ret

00000d44 <lcd_contrast>:
	//fdevopen(lcd_chr, 0);
}

/* Set display contrast. Note: No change is visible at ambient temperature */
void lcd_contrast(unsigned char contrast)
{
 d44:	1f 93       	push	r17
 d46:	18 2f       	mov	r17, r24
	lcd_send(0x21, LCD_CMD);				// LCD Extended Commands
 d48:	81 e2       	ldi	r24, 0x21	; 33
 d4a:	60 e0       	ldi	r22, 0x00	; 0
 d4c:	45 df       	rcall	.-374    	; 0xbd8 <lcd_send>
    lcd_send(0x80 | contrast, LCD_CMD);		// Set LCD Vop(Contrast)
 d4e:	81 2f       	mov	r24, r17
 d50:	80 68       	ori	r24, 0x80	; 128
 d52:	60 e0       	ldi	r22, 0x00	; 0
 d54:	41 df       	rcall	.-382    	; 0xbd8 <lcd_send>
    lcd_send(0x20, LCD_CMD);				// LCD std cmds, hori addr mode
 d56:	80 e2       	ldi	r24, 0x20	; 32
 d58:	60 e0       	ldi	r22, 0x00	; 0
 d5a:	3e df       	rcall	.-388    	; 0xbd8 <lcd_send>
}
 d5c:	1f 91       	pop	r17
 d5e:	08 95       	ret

00000d60 <lcd_init>:

/* Performs IO & LCD controller initialization */
void lcd_init(void)
{
    // Pull-up on reset pin
    LCD_PORT |= LCD_RST_PIN;
 d60:	c1 9a       	sbi	0x18, 1	; 24
	
	// Set output bits on lcd port
	LCD_DDR |= LCD_RST_PIN | LCD_SCE_PIN | LCD_DC_PIN | LCD_DATA_PIN | LCD_CLK_PIN;
 d62:	87 b3       	in	r24, 0x17	; 23
 d64:	8f 61       	ori	r24, 0x1F	; 31
 d66:	87 bb       	out	0x17, r24	; 23
 d68:	80 e6       	ldi	r24, 0x60	; 96
 d6a:	9a ee       	ldi	r25, 0xEA	; 234
 d6c:	01 97       	sbiw	r24, 0x01	; 1
 d6e:	f1 f7       	brne	.-4      	; 0xd6c <lcd_init+0xc>
    
	// Wait after VCC high for reset (max 30ms)
    _delay_ms(15);
    
    // Toggle display reset pin
    LCD_PORT &= ~LCD_RST_PIN;
 d70:	c1 98       	cbi	0x18, 1	; 24
    lcd_delay();
    LCD_PORT |= LCD_RST_PIN;
 d72:	c1 9a       	sbi	0x18, 1	; 24

    // Disable LCD controller
    LCD_PORT |= LCD_SCE_PIN;
 d74:	c0 9a       	sbi	0x18, 0	; 24

    lcd_send(0x21, LCD_CMD);  // LCD Extended Commands
 d76:	81 e2       	ldi	r24, 0x21	; 33
 d78:	60 e0       	ldi	r22, 0x00	; 0
 d7a:	2e df       	rcall	.-420    	; 0xbd8 <lcd_send>
    lcd_send(0xC8, LCD_CMD);  // Set LCD Vop(Contrast)
 d7c:	88 ec       	ldi	r24, 0xC8	; 200
 d7e:	60 e0       	ldi	r22, 0x00	; 0
 d80:	2b df       	rcall	.-426    	; 0xbd8 <lcd_send>
    lcd_send(0x06, LCD_CMD);  // Set Temp coefficent
 d82:	86 e0       	ldi	r24, 0x06	; 6
 d84:	60 e0       	ldi	r22, 0x00	; 0
 d86:	28 df       	rcall	.-432    	; 0xbd8 <lcd_send>
    lcd_send(0x13, LCD_CMD);  // LCD bias mode 1:48
 d88:	83 e1       	ldi	r24, 0x13	; 19
 d8a:	60 e0       	ldi	r22, 0x00	; 0
 d8c:	25 df       	rcall	.-438    	; 0xbd8 <lcd_send>
    lcd_send(0x20, LCD_CMD);  // Standard Commands, Horizontal addressing
 d8e:	80 e2       	ldi	r24, 0x20	; 32
 d90:	60 e0       	ldi	r22, 0x00	; 0
 d92:	22 df       	rcall	.-444    	; 0xbd8 <lcd_send>
    lcd_send(0x0C, LCD_CMD);  // LCD in normal mode
 d94:	8c e0       	ldi	r24, 0x0C	; 12
 d96:	60 e0       	ldi	r22, 0x00	; 0
 d98:	1f df       	rcall	.-450    	; 0xbd8 <lcd_send>
    
    // Clear lcd
    lcd_clear();
 d9a:	be df       	rcall	.-132    	; 0xd18 <lcd_clear>
	
	// For using printf
	//fdevopen(lcd_chr, 0);
}
 d9c:	08 95       	ret

00000d9e <lcd_col>:
	LCD_DDR &= ~(LCD_DATA_PIN | LCD_DC_PIN);
	LCD_PORT |= LCD_DATA_PIN | LCD_DC_PIN;
}

void lcd_col(char chr)
{
 d9e:	1f 93       	push	r17
 da0:	18 2f       	mov	r17, r24
	lcd_base_addr(lcdCacheIdx);
 da2:	80 91 89 03 	lds	r24, 0x0389
 da6:	90 91 8a 03 	lds	r25, 0x038A
 daa:	40 df       	rcall	.-384    	; 0xc2c <lcd_base_addr>
    
	lcd_send(chr, LCD_DATA);
 dac:	81 2f       	mov	r24, r17
 dae:	61 e0       	ldi	r22, 0x01	; 1
 db0:	13 df       	rcall	.-474    	; 0xbd8 <lcd_send>
	
	lcdCacheIdx++;
 db2:	80 91 89 03 	lds	r24, 0x0389
 db6:	90 91 8a 03 	lds	r25, 0x038A
 dba:	01 96       	adiw	r24, 0x01	; 1
 dbc:	90 93 8a 03 	sts	0x038A, r25
 dc0:	80 93 89 03 	sts	0x0389, r24
}
 dc4:	1f 91       	pop	r17
 dc6:	08 95       	ret

00000dc8 <lcd_pixelBack>:

/* It goes back the cursor on LCD for a single step 
   This function added by Vassilis on 01 Jan 2012 */
void lcd_pixelBack(void) 
{
	lcdCacheIdx--;
 dc8:	80 91 89 03 	lds	r24, 0x0389
 dcc:	90 91 8a 03 	lds	r25, 0x038A
 dd0:	01 97       	sbiw	r24, 0x01	; 1
 dd2:	90 93 8a 03 	sts	0x038A, r25
 dd6:	80 93 89 03 	sts	0x0389, r24
}
 dda:	08 95       	ret

00000ddc <printPictureOnLCD>:

/* Prints on LCD a hex based picture.
   A hex picture can be produced from the "LCDAssistant.exe" windows based software. 
   This function added by Vassilis on 01 Jan 2012 */
void printPictureOnLCD ( const unsigned char *data)
{
 ddc:	0f 93       	push	r16
 dde:	1f 93       	push	r17
 de0:	cf 93       	push	r28
 de2:	df 93       	push	r29
 de4:	8c 01       	movw	r16, r24
}

/* Sets cursor location to xy location corresponding to basic font size */
void lcd_goto_xy(unsigned char x, unsigned char y)
{
    lcdCacheIdx = (x-1)*6 + (y-1)*84;
 de6:	10 92 8a 03 	sts	0x038A, r1
 dea:	10 92 89 03 	sts	0x0389, r1
 dee:	c0 e0       	ldi	r28, 0x00	; 0
 df0:	d0 e0       	ldi	r29, 0x00	; 0
{
	unsigned int i;

 	lcd_goto_xy(1,1);
	for(i=0;i<LCD_TOTAL_PIXEL_COLUMNS;i++)
		lcd_col(pgm_read_byte(data++));
 df2:	f8 01       	movw	r30, r16
 df4:	ec 0f       	add	r30, r28
 df6:	fd 1f       	adc	r31, r29
 df8:	e4 91       	lpm	r30, Z+
 dfa:	8e 2f       	mov	r24, r30
 dfc:	d0 df       	rcall	.-96     	; 0xd9e <lcd_col>
void printPictureOnLCD ( const unsigned char *data)
{
	unsigned int i;

 	lcd_goto_xy(1,1);
	for(i=0;i<LCD_TOTAL_PIXEL_COLUMNS;i++)
 dfe:	21 96       	adiw	r28, 0x01	; 1
 e00:	81 e0       	ldi	r24, 0x01	; 1
 e02:	c8 3f       	cpi	r28, 0xF8	; 248
 e04:	d8 07       	cpc	r29, r24
 e06:	a9 f7       	brne	.-22     	; 0xdf2 <printPictureOnLCD+0x16>
 e08:	80 e1       	ldi	r24, 0x10	; 16
 e0a:	97 e2       	ldi	r25, 0x27	; 39
 e0c:	20 e9       	ldi	r18, 0x90	; 144
 e0e:	31 e0       	ldi	r19, 0x01	; 1
 e10:	f9 01       	movw	r30, r18
 e12:	31 97       	sbiw	r30, 0x01	; 1
 e14:	f1 f7       	brne	.-4      	; 0xe12 <printPictureOnLCD+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 e16:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 e18:	d9 f7       	brne	.-10     	; 0xe10 <printPictureOnLCD+0x34>
		lcd_col(pgm_read_byte(data++));
	_delay_ms(1000);
}
 e1a:	df 91       	pop	r29
 e1c:	cf 91       	pop	r28
 e1e:	1f 91       	pop	r17
 e20:	0f 91       	pop	r16
 e22:	08 95       	ret

00000e24 <__udivmodhi4>:
 e24:	aa 1b       	sub	r26, r26
 e26:	bb 1b       	sub	r27, r27
 e28:	51 e1       	ldi	r21, 0x11	; 17
 e2a:	07 c0       	rjmp	.+14     	; 0xe3a <__udivmodhi4_ep>

00000e2c <__udivmodhi4_loop>:
 e2c:	aa 1f       	adc	r26, r26
 e2e:	bb 1f       	adc	r27, r27
 e30:	a6 17       	cp	r26, r22
 e32:	b7 07       	cpc	r27, r23
 e34:	10 f0       	brcs	.+4      	; 0xe3a <__udivmodhi4_ep>
 e36:	a6 1b       	sub	r26, r22
 e38:	b7 0b       	sbc	r27, r23

00000e3a <__udivmodhi4_ep>:
 e3a:	88 1f       	adc	r24, r24
 e3c:	99 1f       	adc	r25, r25
 e3e:	5a 95       	dec	r21
 e40:	a9 f7       	brne	.-22     	; 0xe2c <__udivmodhi4_loop>
 e42:	80 95       	com	r24
 e44:	90 95       	com	r25
 e46:	bc 01       	movw	r22, r24
 e48:	cd 01       	movw	r24, r26
 e4a:	08 95       	ret

00000e4c <itoa>:
 e4c:	fb 01       	movw	r30, r22
 e4e:	9f 01       	movw	r18, r30
 e50:	e8 94       	clt
 e52:	42 30       	cpi	r20, 0x02	; 2
 e54:	bc f0       	brlt	.+46     	; 0xe84 <itoa+0x38>
 e56:	45 32       	cpi	r20, 0x25	; 37
 e58:	ac f4       	brge	.+42     	; 0xe84 <itoa+0x38>
 e5a:	4a 30       	cpi	r20, 0x0A	; 10
 e5c:	29 f4       	brne	.+10     	; 0xe68 <itoa+0x1c>
 e5e:	97 fb       	bst	r25, 7
 e60:	1e f4       	brtc	.+6      	; 0xe68 <itoa+0x1c>
 e62:	90 95       	com	r25
 e64:	81 95       	neg	r24
 e66:	9f 4f       	sbci	r25, 0xFF	; 255
 e68:	64 2f       	mov	r22, r20
 e6a:	77 27       	eor	r23, r23
 e6c:	db df       	rcall	.-74     	; 0xe24 <__udivmodhi4>
 e6e:	80 5d       	subi	r24, 0xD0	; 208
 e70:	8a 33       	cpi	r24, 0x3A	; 58
 e72:	0c f0       	brlt	.+2      	; 0xe76 <itoa+0x2a>
 e74:	89 5d       	subi	r24, 0xD9	; 217
 e76:	81 93       	st	Z+, r24
 e78:	cb 01       	movw	r24, r22
 e7a:	00 97       	sbiw	r24, 0x00	; 0
 e7c:	a9 f7       	brne	.-22     	; 0xe68 <itoa+0x1c>
 e7e:	16 f4       	brtc	.+4      	; 0xe84 <itoa+0x38>
 e80:	5d e2       	ldi	r21, 0x2D	; 45
 e82:	51 93       	st	Z+, r21
 e84:	10 82       	st	Z, r1
 e86:	c9 01       	movw	r24, r18
 e88:	32 c0       	rjmp	.+100    	; 0xeee <strrev>

00000e8a <ltoa>:
 e8a:	fa 01       	movw	r30, r20
 e8c:	cf 93       	push	r28
 e8e:	ff 93       	push	r31
 e90:	ef 93       	push	r30
 e92:	22 30       	cpi	r18, 0x02	; 2
 e94:	3c f1       	brlt	.+78     	; 0xee4 <ltoa+0x5a>
 e96:	25 32       	cpi	r18, 0x25	; 37
 e98:	2c f5       	brge	.+74     	; 0xee4 <ltoa+0x5a>
 e9a:	c2 2f       	mov	r28, r18
 e9c:	e8 94       	clt
 e9e:	ca 30       	cpi	r28, 0x0A	; 10
 ea0:	49 f4       	brne	.+18     	; 0xeb4 <ltoa+0x2a>
 ea2:	97 fb       	bst	r25, 7
 ea4:	3e f4       	brtc	.+14     	; 0xeb4 <ltoa+0x2a>
 ea6:	90 95       	com	r25
 ea8:	80 95       	com	r24
 eaa:	70 95       	com	r23
 eac:	61 95       	neg	r22
 eae:	7f 4f       	sbci	r23, 0xFF	; 255
 eb0:	8f 4f       	sbci	r24, 0xFF	; 255
 eb2:	9f 4f       	sbci	r25, 0xFF	; 255
 eb4:	2c 2f       	mov	r18, r28
 eb6:	33 27       	eor	r19, r19
 eb8:	44 27       	eor	r20, r20
 eba:	55 27       	eor	r21, r21
 ebc:	ff 93       	push	r31
 ebe:	ef 93       	push	r30
 ec0:	26 d0       	rcall	.+76     	; 0xf0e <__udivmodsi4>
 ec2:	ef 91       	pop	r30
 ec4:	ff 91       	pop	r31
 ec6:	60 5d       	subi	r22, 0xD0	; 208
 ec8:	6a 33       	cpi	r22, 0x3A	; 58
 eca:	0c f0       	brlt	.+2      	; 0xece <ltoa+0x44>
 ecc:	69 5d       	subi	r22, 0xD9	; 217
 ece:	61 93       	st	Z+, r22
 ed0:	b9 01       	movw	r22, r18
 ed2:	ca 01       	movw	r24, r20
 ed4:	60 50       	subi	r22, 0x00	; 0
 ed6:	70 40       	sbci	r23, 0x00	; 0
 ed8:	80 40       	sbci	r24, 0x00	; 0
 eda:	90 40       	sbci	r25, 0x00	; 0
 edc:	59 f7       	brne	.-42     	; 0xeb4 <ltoa+0x2a>
 ede:	16 f4       	brtc	.+4      	; 0xee4 <ltoa+0x5a>
 ee0:	cd e2       	ldi	r28, 0x2D	; 45
 ee2:	c1 93       	st	Z+, r28
 ee4:	10 82       	st	Z, r1
 ee6:	8f 91       	pop	r24
 ee8:	9f 91       	pop	r25
 eea:	cf 91       	pop	r28
 eec:	00 c0       	rjmp	.+0      	; 0xeee <strrev>

00000eee <strrev>:
 eee:	dc 01       	movw	r26, r24
 ef0:	fc 01       	movw	r30, r24
 ef2:	67 2f       	mov	r22, r23
 ef4:	71 91       	ld	r23, Z+
 ef6:	77 23       	and	r23, r23
 ef8:	e1 f7       	brne	.-8      	; 0xef2 <strrev+0x4>
 efa:	32 97       	sbiw	r30, 0x02	; 2
 efc:	04 c0       	rjmp	.+8      	; 0xf06 <strrev+0x18>
 efe:	7c 91       	ld	r23, X
 f00:	6d 93       	st	X+, r22
 f02:	70 83       	st	Z, r23
 f04:	62 91       	ld	r22, -Z
 f06:	ae 17       	cp	r26, r30
 f08:	bf 07       	cpc	r27, r31
 f0a:	c8 f3       	brcs	.-14     	; 0xefe <strrev+0x10>
 f0c:	08 95       	ret

00000f0e <__udivmodsi4>:
 f0e:	a1 e2       	ldi	r26, 0x21	; 33
 f10:	1a 2e       	mov	r1, r26
 f12:	aa 1b       	sub	r26, r26
 f14:	bb 1b       	sub	r27, r27
 f16:	fd 01       	movw	r30, r26
 f18:	0d c0       	rjmp	.+26     	; 0xf34 <__udivmodsi4_ep>

00000f1a <__udivmodsi4_loop>:
 f1a:	aa 1f       	adc	r26, r26
 f1c:	bb 1f       	adc	r27, r27
 f1e:	ee 1f       	adc	r30, r30
 f20:	ff 1f       	adc	r31, r31
 f22:	a2 17       	cp	r26, r18
 f24:	b3 07       	cpc	r27, r19
 f26:	e4 07       	cpc	r30, r20
 f28:	f5 07       	cpc	r31, r21
 f2a:	20 f0       	brcs	.+8      	; 0xf34 <__udivmodsi4_ep>
 f2c:	a2 1b       	sub	r26, r18
 f2e:	b3 0b       	sbc	r27, r19
 f30:	e4 0b       	sbc	r30, r20
 f32:	f5 0b       	sbc	r31, r21

00000f34 <__udivmodsi4_ep>:
 f34:	66 1f       	adc	r22, r22
 f36:	77 1f       	adc	r23, r23
 f38:	88 1f       	adc	r24, r24
 f3a:	99 1f       	adc	r25, r25
 f3c:	1a 94       	dec	r1
 f3e:	69 f7       	brne	.-38     	; 0xf1a <__udivmodsi4_loop>
 f40:	60 95       	com	r22
 f42:	70 95       	com	r23
 f44:	80 95       	com	r24
 f46:	90 95       	com	r25
 f48:	9b 01       	movw	r18, r22
 f4a:	ac 01       	movw	r20, r24
 f4c:	bd 01       	movw	r22, r26
 f4e:	cf 01       	movw	r24, r30
 f50:	08 95       	ret

00000f52 <_exit>:
 f52:	f8 94       	cli

00000f54 <__stop_program>:
 f54:	ff cf       	rjmp	.-2      	; 0xf54 <__stop_program>
