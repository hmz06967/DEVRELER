
miniLogicAnalyzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000f8e  00001022  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000315  00800076  00800076  00001038  2**0
                  ALLOC
  3 .stab         00000be8  00000000  00000000  00001038  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b3  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00001dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000262  00000000  00000000  00001e13  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000a5c  00000000  00000000  00002075  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000432  00000000  00000000  00002ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ab9  00000000  00000000  00002f03  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000039bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000038f  00000000  00000000  00003b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000630  00000000  00000000  00003ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000007f  00000000  00000000  000044fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c2       	rjmp	.+1530   	; 0x5fc <__ctors_end>
   2:	17 c3       	rjmp	.+1582   	; 0x632 <__bad_interrupt>
   4:	16 c3       	rjmp	.+1580   	; 0x632 <__bad_interrupt>
   6:	15 c3       	rjmp	.+1578   	; 0x632 <__bad_interrupt>
   8:	14 c3       	rjmp	.+1576   	; 0x632 <__bad_interrupt>
   a:	13 c3       	rjmp	.+1574   	; 0x632 <__bad_interrupt>
   c:	12 c3       	rjmp	.+1572   	; 0x632 <__bad_interrupt>
   e:	11 c3       	rjmp	.+1570   	; 0x632 <__bad_interrupt>
  10:	10 c3       	rjmp	.+1568   	; 0x632 <__bad_interrupt>
  12:	0f c3       	rjmp	.+1566   	; 0x632 <__bad_interrupt>
  14:	0e c3       	rjmp	.+1564   	; 0x632 <__bad_interrupt>
  16:	0d c3       	rjmp	.+1562   	; 0x632 <__bad_interrupt>
  18:	0c c3       	rjmp	.+1560   	; 0x632 <__bad_interrupt>
  1a:	0b c3       	rjmp	.+1558   	; 0x632 <__bad_interrupt>
  1c:	0a c3       	rjmp	.+1556   	; 0x632 <__bad_interrupt>
  1e:	09 c3       	rjmp	.+1554   	; 0x632 <__bad_interrupt>
  20:	08 c3       	rjmp	.+1552   	; 0x632 <__bad_interrupt>
  22:	07 c3       	rjmp	.+1550   	; 0x632 <__bad_interrupt>
  24:	06 c3       	rjmp	.+1548   	; 0x632 <__bad_interrupt>

00000026 <font5x7>:
  26:	00 00 00 00 00 00 00 2f 00 00 00 07 00 07 00 14     ......./........
  36:	7f 14 7f 14 24 2a 7f 2a 12 32 34 08 16 26 36 49     ....$*.*.24..&6I
  46:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
  56:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
  66:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
  76:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
  86:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
  96:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
  a6:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
  b6:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
  c6:	32 49 59 51 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IYQ>~...~.III6>
  d6:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
  e6:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
  f6:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
 106:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
 116:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
 126:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
 136:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
 146:	08 07 61 51 49 45 43 00 7f 41 41 00 55 2a 55 2a     ..aQIEC..AA.U*U*
 156:	55 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40     U.AA.......@@@@@
 166:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
 176:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
 186:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
 196:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
 1a6:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
 1b6:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
 1c6:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
 1d6:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
 1e6:	50 3c 44 64 54 4c 44 00 7f 3e 1c 08 08 1c 3e 7f     P<DdTLD..>....>.
 1f6:	00 08 7c 7e 7c 08 10 3e 7e 3e 10 3e 3e 3e 3e 3e     ..|~|..>~>.>>>>>
 206:	00 7f 3e 1c 08                                      ..>..

0000020b <introScreen>:
 20b:	82 fe 8e 3e f8 e0 30 8e fe fe 82 88 fa fa 80 88     ...>..0.........
 21b:	f8 f8 08 f8 f0 80 88 fa fa 80 00 00 00 00 00 00     ................
 22b:	00 00 00 00 fe 12 12 12 02 00 78 c0 60 c0 78 00     ..........x.`.x.
 23b:	00 00 00 00 00 00 38 40 80 40 38 00 00 84 fe 80     ......8@.@8.....
 24b:	00 00 00 c0 c0 00 00 00 7c a2 92 8a 7c 00 00 84     ........|...|...
 25b:	fe 80 00 00 10 f0 f0 10 00 00 00 00 80 c0 40 40     ..............@@
 26b:	c0 80 00 80 c0 40 e0 a0 00 40 d0 d0 00 80 c0 40     .....@...@.....@
 27b:	c0 00 00 00 00 00 00 00 e0 10 70 e0 80 00 40 c0     ..........p...@.
 28b:	c0 40 c0 80 00 00 40 40 40 c0 80 00 10 f0 f0 00     .@....@@@.......
 29b:	40 c0 c0 00 c0 00 40 40 c0 c0 40 00 80 c0 40 c0     @.....@@..@...@.
 2ab:	80 00 40 c0 c0 40 c0 00 04 07 07 04 04 04 06 00     ..@..@..........
 2bb:	03 07 04 04 07 03 00 0e 15 15 15 0c 00 04 07 07     ................
 2cb:	04 03 07 04 04 00 00 00 00 00 04 07 05 01 05 07     ................
 2db:	07 04 04 07 07 00 07 07 04 02 07 05 05 07 07 04     ................
 2eb:	04 07 07 04 18 19 1b 06 01 00 04 06 07 04 04 00     ................
 2fb:	03 07 05 05 05 00 04 07 07 04 00 00 7e 02 7e 40     ............~.~@
 30b:	7e 02 7e 40 7e 02 7e 40 7e 02 7e 40 7e 02 7e 40     ~.~@~.~@~.~@~.~@
 31b:	7e 02 7e 40 7e 02 7e 40 7e 02 7e 40 7e 02 7e 40     ~.~@~.~@~.~@~.~@
 32b:	7e 02 7e 40 7e 02 7e 40 7e 02 7e 40 7e 02 7e 40     ~.~@~.~@~.~@~.~@
 33b:	7e 02 7e 40 7e 02 7e 40 7e 02 7e 40 7e 02 7e 40     ~.~@~.~@~.~@~.~@
 34b:	7e 02 7e 40 7e 02 7e 40 7e 02 7e 40 7e 02 7e 40     ~.~@~.~@~.~@~.~@
 35b:	7c 04 04 04 04 04 04 04 7c 40 40 40 40 40 40 40     |.......|@@@@@@@
 36b:	7c 04 04 04 04 04 04 04 7c 40 40 40 40 40 40 40     |.......|@@@@@@@
 37b:	40 40 40 40 40 40 7c 04 04 04 04 04 04 04 7c 40     @@@@@@|.......|@
 38b:	40 40 40 40 40 40 7c 04 04 04 04 04 04 04 04 04     @@@@@@|.........
 39b:	04 04 04 04 04 04 7c 40 40 40 40 40 40 40 7c 04     ......|@@@@@@@|.
 3ab:	04 04 04 04 3e 02 02 3e 20 20 20 20 20 20 20 3e     ....>..>       >
 3bb:	02 02 02 02 3e 20 20 20 20 20 20 20 20 20 20 20     ....>           
 3cb:	20 20 3e 02 02 02 02 02 02 02 3e 20 20 20 20 20       >.......>     
 3db:	20 20 3e 02 02 02 02 02 02 02 02 02 02 02 02 02       >.............
 3eb:	02 02 02 02 02 02 3e 20 20 20 20 20 20 20 3e 02     ......>       >.
 3fb:	02 02 02 02 02 02 3e 20                             ......> 

00000403 <createdBy>:
	...
 417:	00 00 00 3e c0 00 fe 00 80 50 50 e0 00 20 50 90     ...>.....PP.. P.
 427:	20 00 20 50 90 20 00 00 00 f4 00 00 00 02 fe 00      . P. ..........
 437:	00 00 00 f4 00 00 20 50 90 20 00 00 00 00 00 00     ...... P. ......
	...
 46b:	00 c0 20 20 c0 03 00 00 01 02 02 03 00 01 02 02     ..  ............
 47b:	01 00 01 02 02 01 00 00 02 03 02 00 40 02 03 02     ............@...
 48b:	00 00 e2 03 02 00 41 02 02 01 00 00 00 00 00 00     ......A.........
	...
 4bf:	00 19 22 22 1c 00 1e 29 29 2e 00 01 3e 01 03 00     ..""...))...>...
 4cf:	18 25 25 3e 00 12 25 29 12 00 00 20 3f 20 00 1e     .%%>..%)... ? ..
 4df:	21 21 3f 00 00 20 3f 20 00 12 25 29 12 00 00 00     !!?.. ? ..%)....
	...
 507:	00 fc 02 00 00 e0 10 10 10 00 00 02 fc 00 00 fc     ................
 517:	02 02 fe 00 08 04 fe 00 00 00 00 00 00 00 80 02     ................
 527:	fe 02 00 80 50 50 e0 00 f0 20 10 e0 00 00 00 00     ....PP... ......
 537:	00 00 8c 42 22 1c 00 fc 02 02 fe 00 08 04 fe 00     ...B"...........
 547:	00 8c 42 22 1c 00 00 00 00 00 00 00 00 00 00 00     ..B"............
 557:	00 00 00 00 00 01 02 00 00 01 02 02 02 00 00 02     ................
 567:	01 00 00 03 02 02 01 00 02 02 03 02 00 00 00 00     ................
 577:	00 00 01 02 01 00 00 01 02 02 03 00 03 00 40 03     ..............@.
 587:	00 00 00 00 e0 00 03 02 42 02 00 03 02 02 01 00     ........B.......
 597:	02 02 03 02 00 03 02 02 02 00 00 00 00 00 00 00     ................
 5a7:	00 00 00 3f 10 10 3f 00 3f 10 10 3f 00 3f 10 10     ...?..?.?..?.?..
 5b7:	3f 00 00 30 30 00 00 12 25 29 12 00 1e 29 29 2e     ?..00...%)...)).
 5c7:	00 01 3e 01 03 00 18 25 25 3e 00 12 25 29 12 00     ..>....%%>..%)..
 5d7:	00 20 3f 20 00 1e 21 21 3f 00 00 20 3f 20 00 12     . ? ..!!?.. ? ..
 5e7:	25 29 12 00 00 30 30 00 00 1e a1 a1 7f 00 01 3e     %)...00........>
 5f7:	01 03 00 00 00                                      .....

000005fc <__ctors_end>:
 5fc:	11 24       	eor	r1, r1
 5fe:	1f be       	out	0x3f, r1	; 63
 600:	cf e5       	ldi	r28, 0x5F	; 95
 602:	d4 e0       	ldi	r29, 0x04	; 4
 604:	de bf       	out	0x3e, r29	; 62
 606:	cd bf       	out	0x3d, r28	; 61

00000608 <__do_copy_data>:
 608:	10 e0       	ldi	r17, 0x00	; 0
 60a:	a0 e6       	ldi	r26, 0x60	; 96
 60c:	b0 e0       	ldi	r27, 0x00	; 0
 60e:	ee e8       	ldi	r30, 0x8E	; 142
 610:	ff e0       	ldi	r31, 0x0F	; 15
 612:	02 c0       	rjmp	.+4      	; 0x618 <__do_copy_data+0x10>
 614:	05 90       	lpm	r0, Z+
 616:	0d 92       	st	X+, r0
 618:	a6 37       	cpi	r26, 0x76	; 118
 61a:	b1 07       	cpc	r27, r17
 61c:	d9 f7       	brne	.-10     	; 0x614 <__do_copy_data+0xc>

0000061e <__do_clear_bss>:
 61e:	13 e0       	ldi	r17, 0x03	; 3
 620:	a6 e7       	ldi	r26, 0x76	; 118
 622:	b0 e0       	ldi	r27, 0x00	; 0
 624:	01 c0       	rjmp	.+2      	; 0x628 <.do_clear_bss_start>

00000626 <.do_clear_bss_loop>:
 626:	1d 92       	st	X+, r1

00000628 <.do_clear_bss_start>:
 628:	ab 38       	cpi	r26, 0x8B	; 139
 62a:	b1 07       	cpc	r27, r17
 62c:	e1 f7       	brne	.-8      	; 0x626 <.do_clear_bss_loop>
 62e:	bb d3       	rcall	.+1910   	; 0xda6 <main>
 630:	ac c4       	rjmp	.+2392   	; 0xf8a <_exit>

00000632 <__bad_interrupt>:
 632:	e6 cc       	rjmp	.-1588   	; 0x0 <__vectors>

00000634 <lcd_goto_xy>:
}

/* Sets cursor location to xy location corresponding to basic font size */
void lcd_goto_xy(unsigned char x, unsigned char y)
{
    lcdCacheIdx = (x-1)*6 + (y-1)*84;
 634:	70 e0       	ldi	r23, 0x00	; 0
 636:	61 50       	subi	r22, 0x01	; 1
 638:	70 40       	sbci	r23, 0x00	; 0
 63a:	44 e5       	ldi	r20, 0x54	; 84
 63c:	50 e0       	ldi	r21, 0x00	; 0
 63e:	64 9f       	mul	r22, r20
 640:	90 01       	movw	r18, r0
 642:	65 9f       	mul	r22, r21
 644:	30 0d       	add	r19, r0
 646:	74 9f       	mul	r23, r20
 648:	30 0d       	add	r19, r0
 64a:	11 24       	eor	r1, r1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	01 97       	sbiw	r24, 0x01	; 1
 650:	ac 01       	movw	r20, r24
 652:	44 0f       	add	r20, r20
 654:	55 1f       	adc	r21, r21
 656:	48 0f       	add	r20, r24
 658:	59 1f       	adc	r21, r25
 65a:	44 0f       	add	r20, r20
 65c:	55 1f       	adc	r21, r21
 65e:	24 0f       	add	r18, r20
 660:	35 1f       	adc	r19, r21
 662:	30 93 77 00 	sts	0x0077, r19
 666:	20 93 76 00 	sts	0x0076, r18
}
 66a:	08 95       	ret

0000066c <lcd_goto_xy_exact>:

/* Sets cursor location to exact xy pixel location on the lcd */
void lcd_goto_xy_exact(unsigned char x, unsigned char y)
{
    lcdCacheIdx = (x-1) + (y-1)*84;
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	01 97       	sbiw	r24, 0x01	; 1
 670:	70 e0       	ldi	r23, 0x00	; 0
 672:	61 50       	subi	r22, 0x01	; 1
 674:	70 40       	sbci	r23, 0x00	; 0
 676:	44 e5       	ldi	r20, 0x54	; 84
 678:	50 e0       	ldi	r21, 0x00	; 0
 67a:	64 9f       	mul	r22, r20
 67c:	90 01       	movw	r18, r0
 67e:	65 9f       	mul	r22, r21
 680:	30 0d       	add	r19, r0
 682:	74 9f       	mul	r23, r20
 684:	30 0d       	add	r19, r0
 686:	11 24       	eor	r1, r1
 688:	82 0f       	add	r24, r18
 68a:	93 1f       	adc	r25, r19
 68c:	90 93 77 00 	sts	0x0077, r25
 690:	80 93 76 00 	sts	0x0076, r24
}
 694:	08 95       	ret

00000696 <lcd_send>:

/* Sends data to display controller */
void lcd_send(unsigned char data, LcdCmdData cd)
{
	// Data/DC are outputs for the lcd (all low)
	LCD_DDR |= LCD_DATA_PIN | LCD_DC_PIN;
 696:	97 b3       	in	r25, 0x17	; 23
 698:	9c 60       	ori	r25, 0x0C	; 12
 69a:	97 bb       	out	0x17, r25	; 23
	
    // Enable display controller (active low)
    LCD_PORT &= ~LCD_SCE_PIN;
 69c:	c0 98       	cbi	0x18, 0	; 24

    // Either command or data
    if(cd == LCD_DATA) {
 69e:	61 30       	cpi	r22, 0x01	; 1
 6a0:	11 f4       	brne	.+4      	; 0x6a6 <lcd_send+0x10>
        LCD_PORT |= LCD_DC_PIN;
 6a2:	c2 9a       	sbi	0x18, 2	; 24
 6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <lcd_send+0x12>
    } else {
        LCD_PORT &= ~LCD_DC_PIN;
 6a6:	c2 98       	cbi	0x18, 2	; 24
	lcd_send(0x40 |(addr / LCD_X_RES), LCD_CMD);
}

/* Sends data to display controller */
void lcd_send(unsigned char data, LcdCmdData cd)
{
 6a8:	27 e0       	ldi	r18, 0x07	; 7
 6aa:	30 e0       	ldi	r19, 0x00	; 0
    }
	
	for(unsigned char i=0;i<8;i++) {
	
		// Set the DATA pin value
		if((data>>(7-i)) & 0x01) {
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	ac 01       	movw	r20, r24
 6b0:	02 2e       	mov	r0, r18
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <lcd_send+0x22>
 6b4:	55 95       	asr	r21
 6b6:	47 95       	ror	r20
 6b8:	0a 94       	dec	r0
 6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <lcd_send+0x1e>
 6bc:	40 ff       	sbrs	r20, 0
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <lcd_send+0x2e>
			LCD_PORT |= LCD_DATA_PIN;
 6c0:	c3 9a       	sbi	0x18, 3	; 24
 6c2:	01 c0       	rjmp	.+2      	; 0x6c6 <lcd_send+0x30>
		} else {
			LCD_PORT &= ~LCD_DATA_PIN;
 6c4:	c3 98       	cbi	0x18, 3	; 24
		}
		
		// Toggle the clock
		LCD_PORT |= LCD_CLK_PIN;
 6c6:	c4 9a       	sbi	0x18, 4	; 24
		LCD_PORT &= ~LCD_CLK_PIN;
 6c8:	c4 98       	cbi	0x18, 4	; 24
 6ca:	21 50       	subi	r18, 0x01	; 1
 6cc:	30 40       	sbci	r19, 0x00	; 0
        LCD_PORT |= LCD_DC_PIN;
    } else {
        LCD_PORT &= ~LCD_DC_PIN;
    }
	
	for(unsigned char i=0;i<8;i++) {
 6ce:	4f ef       	ldi	r20, 0xFF	; 255
 6d0:	2f 3f       	cpi	r18, 0xFF	; 255
 6d2:	34 07       	cpc	r19, r20
 6d4:	61 f7       	brne	.-40     	; 0x6ae <lcd_send+0x18>
		LCD_PORT |= LCD_CLK_PIN;
		LCD_PORT &= ~LCD_CLK_PIN;
	}

	// Disable display controller
    LCD_PORT |= LCD_SCE_PIN;
 6d6:	c0 9a       	sbi	0x18, 0	; 24
	
	// Data/DC can be used as button inputs when not sending to LCD (/w pullups)
	LCD_DDR &= ~(LCD_DATA_PIN | LCD_DC_PIN);
 6d8:	87 b3       	in	r24, 0x17	; 23
 6da:	83 7f       	andi	r24, 0xF3	; 243
 6dc:	87 bb       	out	0x17, r24	; 23
	LCD_PORT |= LCD_DATA_PIN | LCD_DC_PIN;
 6de:	88 b3       	in	r24, 0x18	; 24
 6e0:	8c 60       	ori	r24, 0x0C	; 12
 6e2:	88 bb       	out	0x18, r24	; 24
}
 6e4:	08 95       	ret

000006e6 <lcd_base_addr>:
        lcd_chr(*str++);
    }
}

// Set the base address of the lcd
void lcd_base_addr(unsigned int addr) {
 6e6:	1f 93       	push	r17
	lcd_send(0x80 |(addr % LCD_X_RES), LCD_CMD);
 6e8:	64 e5       	ldi	r22, 0x54	; 84
 6ea:	70 e0       	ldi	r23, 0x00	; 0
 6ec:	b7 d3       	rcall	.+1902   	; 0xe5c <__udivmodhi4>
 6ee:	16 2f       	mov	r17, r22
 6f0:	80 68       	ori	r24, 0x80	; 128
 6f2:	60 e0       	ldi	r22, 0x00	; 0
 6f4:	d0 df       	rcall	.-96     	; 0x696 <lcd_send>
	lcd_send(0x40 |(addr / LCD_X_RES), LCD_CMD);
 6f6:	81 2f       	mov	r24, r17
 6f8:	80 64       	ori	r24, 0x40	; 64
 6fa:	60 e0       	ldi	r22, 0x00	; 0
 6fc:	cc df       	rcall	.-104    	; 0x696 <lcd_send>
}
 6fe:	1f 91       	pop	r17
 700:	08 95       	ret

00000702 <lcd_chr>:
    lcdCacheIdx = (x-1) + (y-1)*84;
}

/* Displays a character at current cursor location */
void lcd_chr(char chr)
{
 702:	0f 93       	push	r16
 704:	1f 93       	push	r17
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	08 2f       	mov	r16, r24
	lcd_base_addr(lcdCacheIdx);
 70c:	80 91 76 00 	lds	r24, 0x0076
 710:	90 91 77 00 	lds	r25, 0x0077
 714:	e8 df       	rcall	.-48     	; 0x6e6 <lcd_base_addr>

    // 5 pixel wide characters and add space
    for(unsigned char i=0;i<5;i++) {
		lcd_send(pgm_read_byte(&font5x7[chr-32][i]) << 1, LCD_DATA);
 716:	85 e0       	ldi	r24, 0x05	; 5
 718:	08 9f       	mul	r16, r24
 71a:	80 01       	movw	r16, r0
 71c:	11 24       	eor	r1, r1
{
    lcdCacheIdx = (x-1) + (y-1)*84;
}

/* Displays a character at current cursor location */
void lcd_chr(char chr)
 71e:	e8 01       	movw	r28, r16
 720:	ca 57       	subi	r28, 0x7A	; 122
 722:	d0 40       	sbci	r29, 0x00	; 0
 724:	05 57       	subi	r16, 0x75	; 117
 726:	10 40       	sbci	r17, 0x00	; 0
{
	lcd_base_addr(lcdCacheIdx);

    // 5 pixel wide characters and add space
    for(unsigned char i=0;i<5;i++) {
		lcd_send(pgm_read_byte(&font5x7[chr-32][i]) << 1, LCD_DATA);
 728:	fe 01       	movw	r30, r28
 72a:	84 91       	lpm	r24, Z+
 72c:	88 0f       	add	r24, r24
 72e:	61 e0       	ldi	r22, 0x01	; 1
 730:	b2 df       	rcall	.-156    	; 0x696 <lcd_send>
 732:	21 96       	adiw	r28, 0x01	; 1
void lcd_chr(char chr)
{
	lcd_base_addr(lcdCacheIdx);

    // 5 pixel wide characters and add space
    for(unsigned char i=0;i<5;i++) {
 734:	c0 17       	cp	r28, r16
 736:	d1 07       	cpc	r29, r17
 738:	b9 f7       	brne	.-18     	; 0x728 <lcd_chr+0x26>
		lcd_send(pgm_read_byte(&font5x7[chr-32][i]) << 1, LCD_DATA);
    }
	lcd_send(0, LCD_DATA);
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	61 e0       	ldi	r22, 0x01	; 1
 73e:	ab df       	rcall	.-170    	; 0x696 <lcd_send>
	
	lcdCacheIdx += 6;
 740:	80 91 76 00 	lds	r24, 0x0076
 744:	90 91 77 00 	lds	r25, 0x0077
 748:	06 96       	adiw	r24, 0x06	; 6
 74a:	90 93 77 00 	sts	0x0077, r25
 74e:	80 93 76 00 	sts	0x0076, r24
}
 752:	df 91       	pop	r29
 754:	cf 91       	pop	r28
 756:	1f 91       	pop	r17
 758:	0f 91       	pop	r16
 75a:	08 95       	ret

0000075c <lcd_str>:

/* Displays string at current cursor location and increment cursor location */
void lcd_str(char *str)
{
 75c:	ef 92       	push	r14
 75e:	ff 92       	push	r15
 760:	cf 93       	push	r28
 762:	df 93       	push	r29
 764:	e8 2e       	mov	r14, r24
 766:	e7 01       	movw	r28, r14
 768:	7e 01       	movw	r14, r28
 76a:	f9 2e       	mov	r15, r25
 76c:	e7 01       	movw	r28, r14
    while(*str) {
 76e:	01 c0       	rjmp	.+2      	; 0x772 <lcd_str+0x16>
        lcd_chr(*str++);
 770:	c8 df       	rcall	.-112    	; 0x702 <lcd_chr>
}

/* Displays string at current cursor location and increment cursor location */
void lcd_str(char *str)
{
    while(*str) {
 772:	89 91       	ld	r24, Y+
 774:	88 23       	and	r24, r24
 776:	e1 f7       	brne	.-8      	; 0x770 <lcd_str+0x14>
        lcd_chr(*str++);
    }
}
 778:	df 91       	pop	r29
 77a:	cf 91       	pop	r28
 77c:	ff 90       	pop	r15
 77e:	ef 90       	pop	r14
 780:	08 95       	ret

00000782 <lcd_clear_area>:
    }
}

/* Clears an area on a line */
void lcd_clear_area(unsigned char line, unsigned char startX, unsigned char endX)
{  
 782:	0f 93       	push	r16
 784:	1f 93       	push	r17
 786:	cf 93       	push	r28
 788:	df 93       	push	r29
    // Start and end positions of line
    int start = (line-1)*84+(startX-1);
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	01 97       	sbiw	r24, 0x01	; 1
 78e:	e4 e5       	ldi	r30, 0x54	; 84
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	8e 9f       	mul	r24, r30
 794:	90 01       	movw	r18, r0
 796:	8f 9f       	mul	r24, r31
 798:	30 0d       	add	r19, r0
 79a:	9e 9f       	mul	r25, r30
 79c:	30 0d       	add	r19, r0
 79e:	11 24       	eor	r1, r1
    int end = (line-1)*84+(endX-1);
 7a0:	89 01       	movw	r16, r18
 7a2:	04 0f       	add	r16, r20
 7a4:	11 1d       	adc	r17, r1
 7a6:	01 50       	subi	r16, 0x01	; 1
 7a8:	10 40       	sbci	r17, 0x00	; 0

/* Clears an area on a line */
void lcd_clear_area(unsigned char line, unsigned char startX, unsigned char endX)
{  
    // Start and end positions of line
    int start = (line-1)*84+(startX-1);
 7aa:	c6 2f       	mov	r28, r22
 7ac:	d0 e0       	ldi	r29, 0x00	; 0
 7ae:	21 97       	sbiw	r28, 0x01	; 1
 7b0:	c2 0f       	add	r28, r18
 7b2:	d3 1f       	adc	r29, r19
    int end = (line-1)*84+(endX-1);
	
	lcd_base_addr(start);
 7b4:	ce 01       	movw	r24, r28
 7b6:	97 df       	rcall	.-210    	; 0x6e6 <lcd_base_addr>
    
    // Clear all data in range from cache
    for(unsigned int i=start;i<end;i++) {
 7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <lcd_clear_area+0x40>
        lcd_send(0, LCD_DATA);
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	61 e0       	ldi	r22, 0x01	; 1
 7be:	6b df       	rcall	.-298    	; 0x696 <lcd_send>
    int end = (line-1)*84+(endX-1);
	
	lcd_base_addr(start);
    
    // Clear all data in range from cache
    for(unsigned int i=start;i<end;i++) {
 7c0:	21 96       	adiw	r28, 0x01	; 1
 7c2:	c0 17       	cp	r28, r16
 7c4:	d1 07       	cpc	r29, r17
 7c6:	c8 f3       	brcs	.-14     	; 0x7ba <lcd_clear_area+0x38>
        lcd_send(0, LCD_DATA);
    }
}
 7c8:	df 91       	pop	r29
 7ca:	cf 91       	pop	r28
 7cc:	1f 91       	pop	r17
 7ce:	0f 91       	pop	r16
 7d0:	08 95       	ret

000007d2 <lcd_clear_line>:

/* Clears an entire text block. (rows of 8 pixels on the lcd) */
void lcd_clear_line(unsigned char line)
{
    lcd_clear_area(line, 1, LCD_X_RES);
 7d2:	61 e0       	ldi	r22, 0x01	; 1
 7d4:	44 e5       	ldi	r20, 0x54	; 84
 7d6:	d5 df       	rcall	.-86     	; 0x782 <lcd_clear_area>
}
 7d8:	08 95       	ret

000007da <lcd_clear>:
    lcd_send(0x20, LCD_CMD);				// LCD std cmds, hori addr mode
}

/* Clears the display */
void lcd_clear(void)
{
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
	lcdCacheIdx = 0;
 7de:	10 92 77 00 	sts	0x0077, r1
 7e2:	10 92 76 00 	sts	0x0076, r1
	
	lcd_base_addr(lcdCacheIdx);
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	7d df       	rcall	.-262    	; 0x6e6 <lcd_base_addr>
 7ec:	c8 ef       	ldi	r28, 0xF8	; 248
 7ee:	d1 e0       	ldi	r29, 0x01	; 1
	
    // Set the entire cache to zero and write 0s to lcd
    for(int i=0;i<LCD_CACHE_SIZE;i++) {
		lcd_send(0, LCD_DATA);
 7f0:	80 e0       	ldi	r24, 0x00	; 0
 7f2:	61 e0       	ldi	r22, 0x01	; 1
 7f4:	50 df       	rcall	.-352    	; 0x696 <lcd_send>
 7f6:	21 97       	sbiw	r28, 0x01	; 1
	lcdCacheIdx = 0;
	
	lcd_base_addr(lcdCacheIdx);
	
    // Set the entire cache to zero and write 0s to lcd
    for(int i=0;i<LCD_CACHE_SIZE;i++) {
 7f8:	d9 f7       	brne	.-10     	; 0x7f0 <lcd_clear+0x16>
		lcd_send(0, LCD_DATA);
    }
}
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	08 95       	ret

00000800 <lcd_contrast>:
	//fdevopen(lcd_chr, 0);
}

/* Set display contrast. Note: No change is visible at ambient temperature */
void lcd_contrast(unsigned char contrast)
{
 800:	1f 93       	push	r17
 802:	18 2f       	mov	r17, r24
	lcd_send(0x21, LCD_CMD);				// LCD Extended Commands
 804:	81 e2       	ldi	r24, 0x21	; 33
 806:	60 e0       	ldi	r22, 0x00	; 0
 808:	46 df       	rcall	.-372    	; 0x696 <lcd_send>
    lcd_send(0x80 | contrast, LCD_CMD);		// Set LCD Vop(Contrast)
 80a:	81 2f       	mov	r24, r17
 80c:	80 68       	ori	r24, 0x80	; 128
 80e:	60 e0       	ldi	r22, 0x00	; 0
 810:	42 df       	rcall	.-380    	; 0x696 <lcd_send>
    lcd_send(0x20, LCD_CMD);				// LCD std cmds, hori addr mode
 812:	80 e2       	ldi	r24, 0x20	; 32
 814:	60 e0       	ldi	r22, 0x00	; 0
 816:	3f df       	rcall	.-386    	; 0x696 <lcd_send>
}
 818:	1f 91       	pop	r17
 81a:	08 95       	ret

0000081c <lcd_init>:

/* Performs IO & LCD controller initialization */
void lcd_init(void)
{
    // Pull-up on reset pin
    LCD_PORT |= LCD_RST_PIN;
 81c:	c1 9a       	sbi	0x18, 1	; 24
	
	// Set output bits on lcd port
	LCD_DDR |= LCD_RST_PIN | LCD_SCE_PIN | LCD_DC_PIN | LCD_DATA_PIN | LCD_CLK_PIN;
 81e:	87 b3       	in	r24, 0x17	; 23
 820:	8f 61       	ori	r24, 0x1F	; 31
 822:	87 bb       	out	0x17, r24	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 824:	8f e5       	ldi	r24, 0x5F	; 95
 826:	9a ee       	ldi	r25, 0xEA	; 234
 828:	01 97       	sbiw	r24, 0x01	; 1
 82a:	f1 f7       	brne	.-4      	; 0x828 <lcd_init+0xc>
 82c:	00 c0       	rjmp	.+0      	; 0x82e <lcd_init+0x12>
 82e:	00 00       	nop
    
	// Wait after VCC high for reset (max 30ms)
    _delay_ms(15);
    
    // Toggle display reset pin
    LCD_PORT &= ~LCD_RST_PIN;
 830:	c1 98       	cbi	0x18, 1	; 24
    lcd_delay();
    LCD_PORT |= LCD_RST_PIN;
 832:	c1 9a       	sbi	0x18, 1	; 24

    // Disable LCD controller
    LCD_PORT |= LCD_SCE_PIN;
 834:	c0 9a       	sbi	0x18, 0	; 24

    lcd_send(0x21, LCD_CMD);  // LCD Extended Commands
 836:	81 e2       	ldi	r24, 0x21	; 33
 838:	60 e0       	ldi	r22, 0x00	; 0
 83a:	2d df       	rcall	.-422    	; 0x696 <lcd_send>
    lcd_send(0xC8, LCD_CMD);  // Set LCD Vop(Contrast)
 83c:	88 ec       	ldi	r24, 0xC8	; 200
 83e:	60 e0       	ldi	r22, 0x00	; 0
 840:	2a df       	rcall	.-428    	; 0x696 <lcd_send>
    lcd_send(0x06, LCD_CMD);  // Set Temp coefficent
 842:	86 e0       	ldi	r24, 0x06	; 6
 844:	60 e0       	ldi	r22, 0x00	; 0
 846:	27 df       	rcall	.-434    	; 0x696 <lcd_send>
    lcd_send(0x13, LCD_CMD);  // LCD bias mode 1:48
 848:	83 e1       	ldi	r24, 0x13	; 19
 84a:	60 e0       	ldi	r22, 0x00	; 0
 84c:	24 df       	rcall	.-440    	; 0x696 <lcd_send>
    lcd_send(0x20, LCD_CMD);  // Standard Commands, Horizontal addressing
 84e:	80 e2       	ldi	r24, 0x20	; 32
 850:	60 e0       	ldi	r22, 0x00	; 0
 852:	21 df       	rcall	.-446    	; 0x696 <lcd_send>
    lcd_send(0x0C, LCD_CMD);  // LCD in normal mode
 854:	8c e0       	ldi	r24, 0x0C	; 12
 856:	60 e0       	ldi	r22, 0x00	; 0
 858:	1e df       	rcall	.-452    	; 0x696 <lcd_send>
    
    // Clear lcd
    lcd_clear();
 85a:	bf df       	rcall	.-130    	; 0x7da <lcd_clear>
	
	// For using printf
	//fdevopen(lcd_chr, 0);
}
 85c:	08 95       	ret

0000085e <lcd_col>:
	LCD_DDR &= ~(LCD_DATA_PIN | LCD_DC_PIN);
	LCD_PORT |= LCD_DATA_PIN | LCD_DC_PIN;
}

void lcd_col(char chr)
{
 85e:	1f 93       	push	r17
 860:	18 2f       	mov	r17, r24
	lcd_base_addr(lcdCacheIdx);
 862:	80 91 76 00 	lds	r24, 0x0076
 866:	90 91 77 00 	lds	r25, 0x0077
 86a:	3d df       	rcall	.-390    	; 0x6e6 <lcd_base_addr>
    
	lcd_send(chr, LCD_DATA);
 86c:	81 2f       	mov	r24, r17
 86e:	61 e0       	ldi	r22, 0x01	; 1
 870:	12 df       	rcall	.-476    	; 0x696 <lcd_send>
	
	lcdCacheIdx++;
 872:	80 91 76 00 	lds	r24, 0x0076
 876:	90 91 77 00 	lds	r25, 0x0077
 87a:	01 96       	adiw	r24, 0x01	; 1
 87c:	90 93 77 00 	sts	0x0077, r25
 880:	80 93 76 00 	sts	0x0076, r24
}
 884:	1f 91       	pop	r17
 886:	08 95       	ret

00000888 <lcd_pixelBack>:

/* It goes back the cursor on LCD for a single step 
   This function added by Vassilis on 01 Jan 2012 */
void lcd_pixelBack(void) 
{
	lcdCacheIdx--;
 888:	80 91 76 00 	lds	r24, 0x0076
 88c:	90 91 77 00 	lds	r25, 0x0077
 890:	01 97       	sbiw	r24, 0x01	; 1
 892:	90 93 77 00 	sts	0x0077, r25
 896:	80 93 76 00 	sts	0x0076, r24
}
 89a:	08 95       	ret

0000089c <printPictureOnLCD>:

/* Prints on LCD a hex based picture.
   A hex picture can be produced from the "LCDAssistant.exe" windows based software. 
   This function added by Vassilis on 01 Jan 2012 */
void printPictureOnLCD ( const unsigned char *data)
{
 89c:	0f 93       	push	r16
 89e:	1f 93       	push	r17
 8a0:	cf 93       	push	r28
 8a2:	df 93       	push	r29
 8a4:	ec 01       	movw	r28, r24
	unsigned int i;

 	lcd_goto_xy(1,1);
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	61 e0       	ldi	r22, 0x01	; 1
 8aa:	c4 de       	rcall	.-632    	; 0x634 <lcd_goto_xy>
	for(i=0;i<LCD_TOTAL_PIXEL_COLUMNS;i++)
 8ac:	00 e0       	ldi	r16, 0x00	; 0
 8ae:	10 e0       	ldi	r17, 0x00	; 0
		lcd_col(pgm_read_byte(data++));
 8b0:	fe 01       	movw	r30, r28
 8b2:	e0 0f       	add	r30, r16
 8b4:	f1 1f       	adc	r31, r17
 8b6:	84 91       	lpm	r24, Z+
 8b8:	d2 df       	rcall	.-92     	; 0x85e <lcd_col>
void printPictureOnLCD ( const unsigned char *data)
{
	unsigned int i;

 	lcd_goto_xy(1,1);
	for(i=0;i<LCD_TOTAL_PIXEL_COLUMNS;i++)
 8ba:	0f 5f       	subi	r16, 0xFF	; 255
 8bc:	1f 4f       	sbci	r17, 0xFF	; 255
 8be:	81 e0       	ldi	r24, 0x01	; 1
 8c0:	08 3f       	cpi	r16, 0xF8	; 248
 8c2:	18 07       	cpc	r17, r24
 8c4:	a9 f7       	brne	.-22     	; 0x8b0 <printPictureOnLCD+0x14>
 8c6:	8f ef       	ldi	r24, 0xFF	; 255
 8c8:	93 ed       	ldi	r25, 0xD3	; 211
 8ca:	a0 e3       	ldi	r26, 0x30	; 48
 8cc:	81 50       	subi	r24, 0x01	; 1
 8ce:	90 40       	sbci	r25, 0x00	; 0
 8d0:	a0 40       	sbci	r26, 0x00	; 0
 8d2:	e1 f7       	brne	.-8      	; 0x8cc <printPictureOnLCD+0x30>
 8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <printPictureOnLCD+0x3a>
 8d6:	00 00       	nop
		lcd_col(pgm_read_byte(data++));
	_delay_ms(1000);
}
 8d8:	df 91       	pop	r29
 8da:	cf 91       	pop	r28
 8dc:	1f 91       	pop	r17
 8de:	0f 91       	pop	r16
 8e0:	08 95       	ret

000008e2 <checkInputs>:
{

	unsigned char dataUsed = 0, dataPins;
	unsigned int counter2;

	dataPins = PIND; //Read the pins status on Port D (this is the initial PORT D status).
 8e2:	50 b3       	in	r21, 0x10	; 16
	while (dataPins == PIND); //Stay here until at least one pin on PORT D changes its Logic status.
 8e4:	80 b3       	in	r24, 0x10	; 16
 8e6:	58 17       	cp	r21, r24
 8e8:	e9 f3       	breq	.-6      	; 0x8e4 <checkInputs+0x2>
	counter2 = 0;

	PORTB |= (1<<LED1); //Turn-ON the LED. Start recording sample lengths to the AVR's dataBuffer.
 8ea:	c5 9a       	sbi	0x18, 5	; 24
	unsigned char dataUsed = 0, dataPins;
	unsigned int counter2;

	dataPins = PIND; //Read the pins status on Port D (this is the initial PORT D status).
	while (dataPins == PIND); //Stay here until at least one pin on PORT D changes its Logic status.
	counter2 = 0;
 8ec:	80 e0       	ldi	r24, 0x00	; 0
 8ee:	90 e0       	ldi	r25, 0x00	; 0
//
//========================================================================
void checkInputs (void)
{

	unsigned char dataUsed = 0, dataPins;
 8f0:	40 e0       	ldi	r20, 0x00	; 0
	counter2 = 0;

	PORTB |= (1<<LED1); //Turn-ON the LED. Start recording sample lengths to the AVR's dataBuffer.
	while(dataUsed < (BUFFER_SIZE)) //While the used buffer is not full, repeat this loop.
	{
		if((dataPins == PIND)&&(counter2 < MAX_SAMPLE_TIME))// If the PORT D has the same status as before, just...
 8f2:	20 b3       	in	r18, 0x10	; 16
 8f4:	52 17       	cp	r21, r18
 8f6:	31 f4       	brne	.+12     	; 0x904 <checkInputs+0x22>
 8f8:	2f ef       	ldi	r18, 0xFF	; 255
 8fa:	8e 3f       	cpi	r24, 0xFE	; 254
 8fc:	92 07       	cpc	r25, r18
 8fe:	10 f4       	brcc	.+4      	; 0x904 <checkInputs+0x22>
			counter2++;
 900:	01 96       	adiw	r24, 0x01	; 1
 902:	11 c0       	rjmp	.+34     	; 0x926 <checkInputs+0x44>
		else  // or else,
		{
			dataPins = PIND;      //Read the pins status on Port D.
 904:	50 b3       	in	r21, 0x10	; 16
			lengthBuffer[dataUsed] = counter2; // HIGH byte of counter
 906:	24 2f       	mov	r18, r20
 908:	30 e0       	ldi	r19, 0x00	; 0
 90a:	f9 01       	movw	r30, r18
 90c:	ee 0f       	add	r30, r30
 90e:	ff 1f       	adc	r31, r31
 910:	eb 57       	subi	r30, 0x7B	; 123
 912:	fe 4f       	sbci	r31, 0xFE	; 254
 914:	91 83       	std	Z+1, r25	; 0x01
 916:	80 83       	st	Z, r24
			dataBuffer[dataUsed] = dataPins;  // Read the pins status on Port D and save it to the RAM buffer.
 918:	2e 57       	subi	r18, 0x7E	; 126
 91a:	3f 4f       	sbci	r19, 0xFF	; 255
 91c:	f9 01       	movw	r30, r18
 91e:	50 83       	st	Z, r21
			counter2 = 0;
			dataUsed++;
 920:	4f 5f       	subi	r20, 0xFF	; 255
		else  // or else,
		{
			dataPins = PIND;      //Read the pins status on Port D.
			lengthBuffer[dataUsed] = counter2; // HIGH byte of counter
			dataBuffer[dataUsed] = dataPins;  // Read the pins status on Port D and save it to the RAM buffer.
			counter2 = 0;
 922:	80 e0       	ldi	r24, 0x00	; 0
 924:	90 e0       	ldi	r25, 0x00	; 0
	dataPins = PIND; //Read the pins status on Port D (this is the initial PORT D status).
	while (dataPins == PIND); //Stay here until at least one pin on PORT D changes its Logic status.
	counter2 = 0;

	PORTB |= (1<<LED1); //Turn-ON the LED. Start recording sample lengths to the AVR's dataBuffer.
	while(dataUsed < (BUFFER_SIZE)) //While the used buffer is not full, repeat this loop.
 926:	4f 3f       	cpi	r20, 0xFF	; 255
 928:	21 f7       	brne	.-56     	; 0x8f2 <checkInputs+0x10>
			counter2 = 0;
			dataUsed++;
		}
	}

	PORTB &= ~(1<<LED1); //Turn-OFF the LED. That means that AVR has filled its dataBuffer.
 92a:	c5 98       	cbi	0x18, 5	; 24
}
 92c:	08 95       	ret

0000092e <printCapturedData>:

//========================================================================
//
//========================================================================
void printCapturedData (unsigned long position, unsigned char inputChannel)
{
 92e:	2f 92       	push	r2
 930:	3f 92       	push	r3
 932:	4f 92       	push	r4
 934:	5f 92       	push	r5
 936:	6f 92       	push	r6
 938:	7f 92       	push	r7
 93a:	8f 92       	push	r8
 93c:	9f 92       	push	r9
 93e:	af 92       	push	r10
 940:	bf 92       	push	r11
 942:	cf 92       	push	r12
 944:	df 92       	push	r13
 946:	ef 92       	push	r14
 948:	ff 92       	push	r15
 94a:	0f 93       	push	r16
 94c:	1f 93       	push	r17
 94e:	df 93       	push	r29
 950:	cf 93       	push	r28
 952:	00 d0       	rcall	.+0      	; 0x954 <printCapturedData+0x26>
 954:	00 d0       	rcall	.+0      	; 0x956 <printCapturedData+0x28>
 956:	00 d0       	rcall	.+0      	; 0x958 <printCapturedData+0x2a>
 958:	cd b7       	in	r28, 0x3d	; 61
 95a:	de b7       	in	r29, 0x3e	; 62
 95c:	6b 01       	movw	r12, r22
 95e:	7c 01       	movw	r14, r24
 960:	84 2e       	mov	r8, r20
	unsigned int m,j, b,sampleLength,n,samplLength;
	unsigned char w, sample, nextSample = 0;
 962:	1a 82       	std	Y+2, r1	; 0x02
	unsigned long lengthSum,oldLength;

	lcd_clear_area(1,1,42);
 964:	81 e0       	ldi	r24, 0x01	; 1
 966:	61 e0       	ldi	r22, 0x01	; 1
 968:	4a e2       	ldi	r20, 0x2A	; 42
 96a:	0b df       	rcall	.-490    	; 0x782 <lcd_clear_area>

	ltoa(position,int2str,10);
 96c:	03 e8       	ldi	r16, 0x83	; 131
 96e:	13 e0       	ldi	r17, 0x03	; 3
 970:	c7 01       	movw	r24, r14
 972:	b6 01       	movw	r22, r12
 974:	a8 01       	movw	r20, r16
 976:	2a e0       	ldi	r18, 0x0A	; 10
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	a3 d2       	rcall	.+1350   	; 0xec2 <ltoa>
	w = strlen(int2str);
 97c:	f8 01       	movw	r30, r16
 97e:	01 90       	ld	r0, Z+
 980:	00 20       	and	r0, r0
 982:	e9 f7       	brne	.-6      	; 0x97e <printCapturedData+0x50>
 984:	31 97       	sbiw	r30, 0x01	; 1
 986:	e0 1b       	sub	r30, r16
 988:	f1 0b       	sbc	r31, r17
	lcd_goto_xy(9-w,1);
 98a:	89 e0       	ldi	r24, 0x09	; 9
 98c:	8e 1b       	sub	r24, r30
 98e:	61 e0       	ldi	r22, 0x01	; 1
 990:	51 de       	rcall	.-862    	; 0x634 <lcd_goto_xy>
	lcd_str(int2str);
 992:	c8 01       	movw	r24, r16
 994:	e3 de       	rcall	.-570    	; 0x75c <lcd_str>
	lcd_goto_xy(1,inputChannel + 3); //Go to LCD line 3, 4, 5 or 6.
 996:	68 2d       	mov	r22, r8
 998:	6d 5f       	subi	r22, 0xFD	; 253
 99a:	81 e0       	ldi	r24, 0x01	; 1
 99c:	4b de       	rcall	.-874    	; 0x634 <lcd_goto_xy>
	b = 0;
	lengthSum = 0;
	oldLength = 0;
	samplLength = 0;

	sampleLength = lengthBuffer[b];
 99e:	e0 91 85 01 	lds	r30, 0x0185
 9a2:	f0 91 86 01 	lds	r31, 0x0186

	n = 0;
	w = 1;
	b = 0;
	lengthSum = 0;
	oldLength = 0;
 9a6:	1b 82       	std	Y+3, r1	; 0x03
 9a8:	1c 82       	std	Y+4, r1	; 0x04
 9aa:	1d 82       	std	Y+5, r1	; 0x05
 9ac:	1e 82       	std	Y+6, r1	; 0x06
	lcd_goto_xy(1,inputChannel + 3); //Go to LCD line 3, 4, 5 or 6.

	n = 0;
	w = 1;
	b = 0;
	lengthSum = 0;
 9ae:	80 e0       	ldi	r24, 0x00	; 0
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	dc 01       	movw	r26, r24
	lcd_str(int2str);
	lcd_goto_xy(1,inputChannel + 3); //Go to LCD line 3, 4, 5 or 6.

	n = 0;
	w = 1;
	b = 0;
 9b4:	60 e0       	ldi	r22, 0x00	; 0
 9b6:	70 e0       	ldi	r23, 0x00	; 0
	samplLength = 0;

	sampleLength = lengthBuffer[b];
	do
	{
		lengthSum += sampleLength;
 9b8:	9f 01       	movw	r18, r30
 9ba:	40 e0       	ldi	r20, 0x00	; 0
 9bc:	50 e0       	ldi	r21, 0x00	; 0
 9be:	82 0f       	add	r24, r18
 9c0:	93 1f       	adc	r25, r19
 9c2:	a4 1f       	adc	r26, r20
 9c4:	b5 1f       	adc	r27, r21
		if(samplesPos > lengthSum)
 9c6:	e0 90 78 00 	lds	r14, 0x0078
 9ca:	f0 90 79 00 	lds	r15, 0x0079
 9ce:	00 91 7a 00 	lds	r16, 0x007A
 9d2:	10 91 7b 00 	lds	r17, 0x007B
 9d6:	8e 15       	cp	r24, r14
 9d8:	9f 05       	cpc	r25, r15
 9da:	a0 07       	cpc	r26, r16
 9dc:	b1 07       	cpc	r27, r17
 9de:	b0 f4       	brcc	.+44     	; 0xa0c <printCapturedData+0xde>
		{
			oldLength += sampleLength;
 9e0:	eb 80       	ldd	r14, Y+3	; 0x03
 9e2:	fc 80       	ldd	r15, Y+4	; 0x04
 9e4:	0d 81       	ldd	r16, Y+5	; 0x05
 9e6:	1e 81       	ldd	r17, Y+6	; 0x06
 9e8:	e2 0e       	add	r14, r18
 9ea:	f3 1e       	adc	r15, r19
 9ec:	04 1f       	adc	r16, r20
 9ee:	15 1f       	adc	r17, r21
 9f0:	eb 82       	std	Y+3, r14	; 0x03
 9f2:	fc 82       	std	Y+4, r15	; 0x04
 9f4:	0d 83       	std	Y+5, r16	; 0x05
 9f6:	1e 83       	std	Y+6, r17	; 0x06
			b++;
 9f8:	6f 5f       	subi	r22, 0xFF	; 255
 9fa:	7f 4f       	sbci	r23, 0xFF	; 255
			sampleLength = lengthBuffer[b];
 9fc:	fb 01       	movw	r30, r22
 9fe:	ee 0f       	add	r30, r30
 a00:	ff 1f       	adc	r31, r31
 a02:	eb 57       	subi	r30, 0x7B	; 123
 a04:	fe 4f       	sbci	r31, 0xFE	; 254
 a06:	01 90       	ld	r0, Z+
 a08:	f0 81       	ld	r31, Z
 a0a:	e0 2d       	mov	r30, r0
		}
	}while(samplesPos > lengthSum);
 a0c:	20 91 78 00 	lds	r18, 0x0078
 a10:	30 91 79 00 	lds	r19, 0x0079
 a14:	40 91 7a 00 	lds	r20, 0x007A
 a18:	50 91 7b 00 	lds	r21, 0x007B
 a1c:	82 17       	cp	r24, r18
 a1e:	93 07       	cpc	r25, r19
 a20:	a4 07       	cpc	r26, r20
 a22:	b5 07       	cpc	r27, r21
 a24:	48 f2       	brcs	.-110    	; 0x9b8 <printCapturedData+0x8a>
 a26:	a1 e0       	ldi	r26, 0x01	; 1
 a28:	aa 2e       	mov	r10, r26
 a2a:	b1 2c       	mov	r11, r1
 a2c:	02 c0       	rjmp	.+4      	; 0xa32 <printCapturedData+0x104>
 a2e:	aa 0c       	add	r10, r10
 a30:	bb 1c       	adc	r11, r11
 a32:	8a 94       	dec	r8
 a34:	e2 f7       	brpl	.-8      	; 0xa2e <printCapturedData+0x100>
}

//========================================================================
//
//========================================================================
void printCapturedData (unsigned long position, unsigned char inputChannel)
 a36:	f2 e8       	ldi	r31, 0x82	; 130
 a38:	4f 2e       	mov	r4, r31
 a3a:	f0 e0       	ldi	r31, 0x00	; 0
 a3c:	5f 2e       	mov	r5, r31
 a3e:	46 0e       	add	r4, r22
 a40:	57 1e       	adc	r5, r23
 a42:	3b 01       	movw	r6, r22
 a44:	66 0c       	add	r6, r6
 a46:	77 1c       	adc	r7, r7
 a48:	05 e8       	ldi	r16, 0x85	; 133
 a4a:	11 e0       	ldi	r17, 0x01	; 1
 a4c:	60 0e       	add	r6, r16
 a4e:	71 1e       	adc	r7, r17
 a50:	8b 01       	movw	r16, r22
 a52:	21 e0       	ldi	r18, 0x01	; 1
 a54:	ee 24       	eor	r14, r14
 a56:	ff 24       	eor	r15, r15
		if(zoom > 0)
			samplLength /= zoom; 

		for(j=0;j<samplLength;j++)
		{
			if(bit_is_set(sample,inputChannel))
 a58:	1e 01       	movw	r2, r28
 a5a:	08 94       	sec
 a5c:	21 1c       	adc	r2, r1
 a5e:	31 1c       	adc	r3, r1
 a60:	59 c0       	rjmp	.+178    	; 0xb14 <printCapturedData+0x1e6>
		}
	}while(samplesPos > lengthSum);

	for(m=b;m<BUFFER_SIZE;m++)
	{
		sampleLength = lengthBuffer[m];
 a62:	f3 01       	movw	r30, r6
 a64:	81 91       	ld	r24, Z+
 a66:	91 91       	ld	r25, Z+
 a68:	3f 01       	movw	r6, r30
		if(w > 0)
 a6a:	22 23       	and	r18, r18
 a6c:	71 f0       	breq	.+28     	; 0xa8a <printCapturedData+0x15c>
		{
			sampleLength -= (samplesPos - oldLength);
 a6e:	20 91 78 00 	lds	r18, 0x0078
 a72:	30 91 79 00 	lds	r19, 0x0079
 a76:	40 91 7a 00 	lds	r20, 0x007A
 a7a:	50 91 7b 00 	lds	r21, 0x007B
 a7e:	82 1b       	sub	r24, r18
 a80:	93 0b       	sbc	r25, r19
 a82:	2b 81       	ldd	r18, Y+3	; 0x03
 a84:	3c 81       	ldd	r19, Y+4	; 0x04
 a86:	82 0f       	add	r24, r18
 a88:	93 1f       	adc	r25, r19
			w=0;			
		}
		
		sample = dataBuffer[m];
 a8a:	f2 01       	movw	r30, r4
 a8c:	31 91       	ld	r19, Z+
 a8e:	2f 01       	movw	r4, r30
 a90:	39 83       	std	Y+1, r19	; 0x01
		if((m+1) < (BUFFER_SIZE))
 a92:	0f 5f       	subi	r16, 0xFF	; 255
 a94:	1f 4f       	sbci	r17, 0xFF	; 255
 a96:	0f 3f       	cpi	r16, 0xFF	; 255
 a98:	11 05       	cpc	r17, r1
 a9a:	19 f0       	breq	.+6      	; 0xaa2 <printCapturedData+0x174>
		{
			nextSample = dataBuffer[m+1]; 
			nextSample ^= sample;
 a9c:	20 81       	ld	r18, Z
 a9e:	23 27       	eor	r18, r19
 aa0:	2a 83       	std	Y+2, r18	; 0x02
		}
		samplLength = sampleLength;
		if(zoom > 0)
 aa2:	20 91 7e 00 	lds	r18, 0x007E
 aa6:	30 91 7f 00 	lds	r19, 0x007F
 aaa:	21 15       	cp	r18, r1
 aac:	31 05       	cpc	r19, r1
 aae:	39 f0       	breq	.+14     	; 0xabe <printCapturedData+0x190>
			samplLength /= zoom; 
 ab0:	60 91 7e 00 	lds	r22, 0x007E
 ab4:	70 91 7f 00 	lds	r23, 0x007F
 ab8:	d1 d1       	rcall	.+930    	; 0xe5c <__udivmodhi4>
 aba:	4b 01       	movw	r8, r22
 abc:	01 c0       	rjmp	.+2      	; 0xac0 <printCapturedData+0x192>
		if((m+1) < (BUFFER_SIZE))
		{
			nextSample = dataBuffer[m+1]; 
			nextSample ^= sample;
		}
		samplLength = sampleLength;
 abe:	4c 01       	movw	r8, r24
		if(zoom > 0)
			samplLength /= zoom; 

		for(j=0;j<samplLength;j++)
 ac0:	cc 24       	eor	r12, r12
 ac2:	dd 24       	eor	r13, r13
 ac4:	15 c0       	rjmp	.+42     	; 0xaf0 <printCapturedData+0x1c2>
		{
			if(bit_is_set(sample,inputChannel))
 ac6:	f1 01       	movw	r30, r2
 ac8:	80 81       	ld	r24, Z
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	8a 21       	and	r24, r10
 ace:	9b 21       	and	r25, r11
 ad0:	00 97       	sbiw	r24, 0x00	; 0
 ad2:	11 f0       	breq	.+4      	; 0xad8 <printCapturedData+0x1aa>
				lcd_col(ONE); //1
 ad4:	80 e2       	ldi	r24, 0x20	; 32
 ad6:	01 c0       	rjmp	.+2      	; 0xada <printCapturedData+0x1ac>
			else
				lcd_col(ZERO);//0
 ad8:	84 e0       	ldi	r24, 0x04	; 4
 ada:	c1 de       	rcall	.-638    	; 0x85e <lcd_col>
			n++;
 adc:	08 94       	sec
 ade:	e1 1c       	adc	r14, r1
 ae0:	f1 1c       	adc	r15, r1

			if(n >= ONE_LINE_LENGTH)
 ae2:	f4 e5       	ldi	r31, 0x54	; 84
 ae4:	ef 16       	cp	r14, r31
 ae6:	f1 04       	cpc	r15, r1
 ae8:	30 f4       	brcc	.+12     	; 0xaf6 <printCapturedData+0x1c8>
		}
		samplLength = sampleLength;
		if(zoom > 0)
			samplLength /= zoom; 

		for(j=0;j<samplLength;j++)
 aea:	08 94       	sec
 aec:	c1 1c       	adc	r12, r1
 aee:	d1 1c       	adc	r13, r1
 af0:	c8 14       	cp	r12, r8
 af2:	d9 04       	cpc	r13, r9
 af4:	40 f3       	brcs	.-48     	; 0xac6 <printCapturedData+0x198>
			n++;

			if(n >= ONE_LINE_LENGTH)
				break;
		}
		if(bit_is_set(nextSample,inputChannel))
 af6:	8a 81       	ldd	r24, Y+2	; 0x02
 af8:	90 e0       	ldi	r25, 0x00	; 0
 afa:	8a 21       	and	r24, r10
 afc:	9b 21       	and	r25, r11
 afe:	00 97       	sbiw	r24, 0x00	; 0
 b00:	21 f0       	breq	.+8      	; 0xb0a <printCapturedData+0x1dc>
		{
				lcd_pixelBack();
 b02:	c2 de       	rcall	.-636    	; 0x888 <lcd_pixelBack>
				lcd_col(TRANSITION);
 b04:	8c e3       	ldi	r24, 0x3C	; 60
 b06:	ab de       	rcall	.-682    	; 0x85e <lcd_col>
				nextSample = 0; //Set nextSample to <No Sample> status.
 b08:	1a 82       	std	Y+2, r1	; 0x02
		}

		if(n >= ONE_LINE_LENGTH)
 b0a:	24 e5       	ldi	r18, 0x54	; 84
 b0c:	e2 16       	cp	r14, r18
 b0e:	f1 04       	cpc	r15, r1
 b10:	28 f4       	brcc	.+10     	; 0xb1c <printCapturedData+0x1ee>
 b12:	20 e0       	ldi	r18, 0x00	; 0
			b++;
			sampleLength = lengthBuffer[b];
		}
	}while(samplesPos > lengthSum);

	for(m=b;m<BUFFER_SIZE;m++)
 b14:	0f 3f       	cpi	r16, 0xFF	; 255
 b16:	11 05       	cpc	r17, r1
 b18:	08 f4       	brcc	.+2      	; 0xb1c <printCapturedData+0x1ee>
 b1a:	a3 cf       	rjmp	.-186    	; 0xa62 <printCapturedData+0x134>
		}

		if(n >= ONE_LINE_LENGTH)
			break;
	}
}
 b1c:	26 96       	adiw	r28, 0x06	; 6
 b1e:	0f b6       	in	r0, 0x3f	; 63
 b20:	f8 94       	cli
 b22:	de bf       	out	0x3e, r29	; 62
 b24:	0f be       	out	0x3f, r0	; 63
 b26:	cd bf       	out	0x3d, r28	; 61
 b28:	cf 91       	pop	r28
 b2a:	df 91       	pop	r29
 b2c:	1f 91       	pop	r17
 b2e:	0f 91       	pop	r16
 b30:	ff 90       	pop	r15
 b32:	ef 90       	pop	r14
 b34:	df 90       	pop	r13
 b36:	cf 90       	pop	r12
 b38:	bf 90       	pop	r11
 b3a:	af 90       	pop	r10
 b3c:	9f 90       	pop	r9
 b3e:	8f 90       	pop	r8
 b40:	7f 90       	pop	r7
 b42:	6f 90       	pop	r6
 b44:	5f 90       	pop	r5
 b46:	4f 90       	pop	r4
 b48:	3f 90       	pop	r3
 b4a:	2f 90       	pop	r2
 b4c:	08 95       	ret

00000b4e <printRuler>:

//========================================================================
//
//========================================================================
void printRuler (void)
{
 b4e:	1f 93       	push	r17
	unsigned char k;

	lcd_goto_xy(1,2); //Go to LCD line 2.
 b50:	81 e0       	ldi	r24, 0x01	; 1
 b52:	62 e0       	ldi	r22, 0x02	; 2
 b54:	6f dd       	rcall	.-1314   	; 0x634 <lcd_goto_xy>
 b56:	18 e0       	ldi	r17, 0x08	; 8

	for(k=0;k<8;k++)
	{
		lcd_col(TRANSITION);
 b58:	8c e3       	ldi	r24, 0x3C	; 60
 b5a:	81 de       	rcall	.-766    	; 0x85e <lcd_col>
		lcd_col(0b00000000);
 b5c:	80 e0       	ldi	r24, 0x00	; 0
 b5e:	7f de       	rcall	.-770    	; 0x85e <lcd_col>
		lcd_col(0b00011000);
 b60:	88 e1       	ldi	r24, 0x18	; 24
 b62:	7d de       	rcall	.-774    	; 0x85e <lcd_col>
		lcd_col(0b00000000);
 b64:	80 e0       	ldi	r24, 0x00	; 0
 b66:	7b de       	rcall	.-778    	; 0x85e <lcd_col>
		lcd_col(0b00011000);
 b68:	88 e1       	ldi	r24, 0x18	; 24
 b6a:	79 de       	rcall	.-782    	; 0x85e <lcd_col>
		lcd_col(0b00000000);
 b6c:	80 e0       	ldi	r24, 0x00	; 0
 b6e:	77 de       	rcall	.-786    	; 0x85e <lcd_col>
		lcd_col(0b00011000); 
 b70:	88 e1       	ldi	r24, 0x18	; 24
 b72:	75 de       	rcall	.-790    	; 0x85e <lcd_col>
		lcd_col(0b00000000);
 b74:	80 e0       	ldi	r24, 0x00	; 0
 b76:	73 de       	rcall	.-794    	; 0x85e <lcd_col>
		lcd_col(0b00011000);
 b78:	88 e1       	ldi	r24, 0x18	; 24
 b7a:	71 de       	rcall	.-798    	; 0x85e <lcd_col>
		lcd_col(0b00000000);
 b7c:	80 e0       	ldi	r24, 0x00	; 0
 b7e:	6f de       	rcall	.-802    	; 0x85e <lcd_col>
 b80:	11 50       	subi	r17, 0x01	; 1
{
	unsigned char k;

	lcd_goto_xy(1,2); //Go to LCD line 2.

	for(k=0;k<8;k++)
 b82:	51 f7       	brne	.-44     	; 0xb58 <printRuler+0xa>
		lcd_col(0b00011000); 
		lcd_col(0b00000000);
		lcd_col(0b00011000);
		lcd_col(0b00000000);
	}
	lcd_col(TRANSITION);
 b84:	8c e3       	ldi	r24, 0x3C	; 60
 b86:	6b de       	rcall	.-810    	; 0x85e <lcd_col>
	lcd_col(0b00000000);
 b88:	80 e0       	ldi	r24, 0x00	; 0
 b8a:	69 de       	rcall	.-814    	; 0x85e <lcd_col>
	lcd_col(0b00011000);
 b8c:	88 e1       	ldi	r24, 0x18	; 24
 b8e:	67 de       	rcall	.-818    	; 0x85e <lcd_col>
	lcd_col(0b00000000);
 b90:	80 e0       	ldi	r24, 0x00	; 0
 b92:	65 de       	rcall	.-822    	; 0x85e <lcd_col>
}
 b94:	1f 91       	pop	r17
 b96:	08 95       	ret

00000b98 <sendChannelsDataOnLCD>:
//========================================================================
//
//========================================================================
void sendChannelsDataOnLCD (void)
{
	printCapturedData(samplesPos, IN1);
 b98:	60 91 78 00 	lds	r22, 0x0078
 b9c:	70 91 79 00 	lds	r23, 0x0079
 ba0:	80 91 7a 00 	lds	r24, 0x007A
 ba4:	90 91 7b 00 	lds	r25, 0x007B
 ba8:	40 e0       	ldi	r20, 0x00	; 0
 baa:	c1 de       	rcall	.-638    	; 0x92e <printCapturedData>
	printCapturedData(samplesPos, IN2);
 bac:	60 91 78 00 	lds	r22, 0x0078
 bb0:	70 91 79 00 	lds	r23, 0x0079
 bb4:	80 91 7a 00 	lds	r24, 0x007A
 bb8:	90 91 7b 00 	lds	r25, 0x007B
 bbc:	41 e0       	ldi	r20, 0x01	; 1
 bbe:	b7 de       	rcall	.-658    	; 0x92e <printCapturedData>
	printCapturedData(samplesPos, IN3);
 bc0:	60 91 78 00 	lds	r22, 0x0078
 bc4:	70 91 79 00 	lds	r23, 0x0079
 bc8:	80 91 7a 00 	lds	r24, 0x007A
 bcc:	90 91 7b 00 	lds	r25, 0x007B
 bd0:	42 e0       	ldi	r20, 0x02	; 2
 bd2:	ad de       	rcall	.-678    	; 0x92e <printCapturedData>
	printCapturedData(samplesPos, IN4);
 bd4:	60 91 78 00 	lds	r22, 0x0078
 bd8:	70 91 79 00 	lds	r23, 0x0079
 bdc:	80 91 7a 00 	lds	r24, 0x007A
 be0:	90 91 7b 00 	lds	r25, 0x007B
 be4:	43 e0       	ldi	r20, 0x03	; 3
 be6:	a3 de       	rcall	.-698    	; 0x92e <printCapturedData>
}
 be8:	08 95       	ret

00000bea <checkDecreaseButton>:
//========================================================================
//
//========================================================================
void checkDecreaseButton (void)
{
	if(bit_is_clear(PINC,BTN_DECREASE)&&(samplesPos > 0)) //Scroll to the right the waveform content.
 bea:	9d 99       	sbic	0x13, 5	; 19
 bec:	42 c0       	rjmp	.+132    	; 0xc72 <checkDecreaseButton+0x88>
 bee:	80 91 78 00 	lds	r24, 0x0078
 bf2:	90 91 79 00 	lds	r25, 0x0079
 bf6:	a0 91 7a 00 	lds	r26, 0x007A
 bfa:	b0 91 7b 00 	lds	r27, 0x007B
 bfe:	00 97       	sbiw	r24, 0x00	; 0
 c00:	a1 05       	cpc	r26, r1
 c02:	b1 05       	cpc	r27, r1
 c04:	b1 f1       	breq	.+108    	; 0xc72 <checkDecreaseButton+0x88>
	{
		if(counter < MAX_SAMPLE_TIME)
 c06:	80 91 81 01 	lds	r24, 0x0181
 c0a:	90 91 82 01 	lds	r25, 0x0182
 c0e:	2f ef       	ldi	r18, 0xFF	; 255
 c10:	8e 3f       	cpi	r24, 0xFE	; 254
 c12:	92 07       	cpc	r25, r18
 c14:	70 f5       	brcc	.+92     	; 0xc72 <checkDecreaseButton+0x88>
		{
			if(samplesPos >= zoom)
 c16:	20 91 78 00 	lds	r18, 0x0078
 c1a:	30 91 79 00 	lds	r19, 0x0079
 c1e:	40 91 7a 00 	lds	r20, 0x007A
 c22:	50 91 7b 00 	lds	r21, 0x007B
 c26:	80 91 7e 00 	lds	r24, 0x007E
 c2a:	90 91 7f 00 	lds	r25, 0x007F
 c2e:	a0 e0       	ldi	r26, 0x00	; 0
 c30:	b0 e0       	ldi	r27, 0x00	; 0
 c32:	28 17       	cp	r18, r24
 c34:	39 07       	cpc	r19, r25
 c36:	4a 07       	cpc	r20, r26
 c38:	5b 07       	cpc	r21, r27
 c3a:	d0 f0       	brcs	.+52     	; 0xc70 <checkDecreaseButton+0x86>
				samplesPos -= zoom;
 c3c:	80 91 78 00 	lds	r24, 0x0078
 c40:	90 91 79 00 	lds	r25, 0x0079
 c44:	a0 91 7a 00 	lds	r26, 0x007A
 c48:	b0 91 7b 00 	lds	r27, 0x007B
 c4c:	20 91 7e 00 	lds	r18, 0x007E
 c50:	30 91 7f 00 	lds	r19, 0x007F
 c54:	40 e0       	ldi	r20, 0x00	; 0
 c56:	50 e0       	ldi	r21, 0x00	; 0
 c58:	82 1b       	sub	r24, r18
 c5a:	93 0b       	sbc	r25, r19
 c5c:	a4 0b       	sbc	r26, r20
 c5e:	b5 0b       	sbc	r27, r21
 c60:	80 93 78 00 	sts	0x0078, r24
 c64:	90 93 79 00 	sts	0x0079, r25
 c68:	a0 93 7a 00 	sts	0x007A, r26
 c6c:	b0 93 7b 00 	sts	0x007B, r27
			sendChannelsDataOnLCD();
 c70:	93 df       	rcall	.-218    	; 0xb98 <sendChannelsDataOnLCD>
 c72:	08 95       	ret

00000c74 <checkIncreaseButton>:

//========================================================================
//
//========================================================================
void checkIncreaseButton (void)
{
 c74:	ef 92       	push	r14
 c76:	ff 92       	push	r15
 c78:	0f 93       	push	r16
 c7a:	1f 93       	push	r17
	if(bit_is_clear(PIND,BTN_INCREASE)&&(samplesPos < POSITIONS_LENGTH)) //Scroll to the left the waveform content.
 c7c:	84 99       	sbic	0x10, 4	; 16
 c7e:	4e c0       	rjmp	.+156    	; 0xd1c <checkIncreaseButton+0xa8>
 c80:	80 91 78 00 	lds	r24, 0x0078
 c84:	90 91 79 00 	lds	r25, 0x0079
 c88:	a0 91 7a 00 	lds	r26, 0x007A
 c8c:	b0 91 7b 00 	lds	r27, 0x007B
 c90:	82 30       	cpi	r24, 0x02	; 2
 c92:	2e ef       	ldi	r18, 0xFE	; 254
 c94:	92 07       	cpc	r25, r18
 c96:	2e ef       	ldi	r18, 0xFE	; 254
 c98:	a2 07       	cpc	r26, r18
 c9a:	20 e0       	ldi	r18, 0x00	; 0
 c9c:	b2 07       	cpc	r27, r18
 c9e:	f0 f5       	brcc	.+124    	; 0xd1c <checkIncreaseButton+0xa8>
	{

		if(counter < MAX_SAMPLE_TIME)
 ca0:	80 91 81 01 	lds	r24, 0x0181
 ca4:	90 91 82 01 	lds	r25, 0x0182
 ca8:	2f ef       	ldi	r18, 0xFF	; 255
 caa:	8e 3f       	cpi	r24, 0xFE	; 254
 cac:	92 07       	cpc	r25, r18
 cae:	b0 f5       	brcc	.+108    	; 0xd1c <checkIncreaseButton+0xa8>
		{
			if(samplesPos < (POSITIONS_LENGTH - zoom))
 cb0:	20 91 78 00 	lds	r18, 0x0078
 cb4:	30 91 79 00 	lds	r19, 0x0079
 cb8:	40 91 7a 00 	lds	r20, 0x007A
 cbc:	50 91 7b 00 	lds	r21, 0x007B
 cc0:	e0 90 7e 00 	lds	r14, 0x007E
 cc4:	f0 90 7f 00 	lds	r15, 0x007F
 cc8:	00 e0       	ldi	r16, 0x00	; 0
 cca:	10 e0       	ldi	r17, 0x00	; 0
 ccc:	82 e0       	ldi	r24, 0x02	; 2
 cce:	9e ef       	ldi	r25, 0xFE	; 254
 cd0:	ae ef       	ldi	r26, 0xFE	; 254
 cd2:	b0 e0       	ldi	r27, 0x00	; 0
 cd4:	8e 19       	sub	r24, r14
 cd6:	9f 09       	sbc	r25, r15
 cd8:	a0 0b       	sbc	r26, r16
 cda:	b1 0b       	sbc	r27, r17
 cdc:	28 17       	cp	r18, r24
 cde:	39 07       	cpc	r19, r25
 ce0:	4a 07       	cpc	r20, r26
 ce2:	5b 07       	cpc	r21, r27
 ce4:	d0 f4       	brcc	.+52     	; 0xd1a <checkIncreaseButton+0xa6>
				samplesPos += zoom;
 ce6:	20 91 78 00 	lds	r18, 0x0078
 cea:	30 91 79 00 	lds	r19, 0x0079
 cee:	40 91 7a 00 	lds	r20, 0x007A
 cf2:	50 91 7b 00 	lds	r21, 0x007B
 cf6:	80 91 7e 00 	lds	r24, 0x007E
 cfa:	90 91 7f 00 	lds	r25, 0x007F
 cfe:	a0 e0       	ldi	r26, 0x00	; 0
 d00:	b0 e0       	ldi	r27, 0x00	; 0
 d02:	82 0f       	add	r24, r18
 d04:	93 1f       	adc	r25, r19
 d06:	a4 1f       	adc	r26, r20
 d08:	b5 1f       	adc	r27, r21
 d0a:	80 93 78 00 	sts	0x0078, r24
 d0e:	90 93 79 00 	sts	0x0079, r25
 d12:	a0 93 7a 00 	sts	0x007A, r26
 d16:	b0 93 7b 00 	sts	0x007B, r27
			sendChannelsDataOnLCD();
 d1a:	3e df       	rcall	.-388    	; 0xb98 <sendChannelsDataOnLCD>
		}
	}
}		
 d1c:	1f 91       	pop	r17
 d1e:	0f 91       	pop	r16
 d20:	ff 90       	pop	r15
 d22:	ef 90       	pop	r14
 d24:	08 95       	ret

00000d26 <checkIfNoButtonIsPressed>:
}
//========================================================================
//
//========================================================================
void checkIfNoButtonIsPressed (void)
{
 d26:	cf 93       	push	r28
 d28:	df 93       	push	r29
	unsigned int w;

	if(bit_is_clear(PIND,BTN_ZOOM_OUT))
 d2a:	85 99       	sbic	0x10, 5	; 16
 d2c:	39 c0       	rjmp	.+114    	; 0xda0 <checkIfNoButtonIsPressed+0x7a>
	{
		while(bit_is_clear(PIND,BTN_ZOOM_OUT));
 d2e:	85 9b       	sbis	0x10, 5	; 16
 d30:	fe cf       	rjmp	.-4      	; 0xd2e <checkIfNoButtonIsPressed+0x8>
		//getNextSampleString();
		if((zoom > 0)&&(zoom < 8192))
 d32:	80 91 7e 00 	lds	r24, 0x007E
 d36:	90 91 7f 00 	lds	r25, 0x007F
 d3a:	00 97       	sbiw	r24, 0x00	; 0
 d3c:	79 f0       	breq	.+30     	; 0xd5c <checkIfNoButtonIsPressed+0x36>
 d3e:	80 91 7e 00 	lds	r24, 0x007E
 d42:	90 91 7f 00 	lds	r25, 0x007F
 d46:	20 e2       	ldi	r18, 0x20	; 32
 d48:	80 30       	cpi	r24, 0x00	; 0
 d4a:	92 07       	cpc	r25, r18
 d4c:	38 f4       	brcc	.+14     	; 0xd5c <checkIfNoButtonIsPressed+0x36>
			zoom *= 2;
 d4e:	80 91 7e 00 	lds	r24, 0x007E
 d52:	90 91 7f 00 	lds	r25, 0x007F
 d56:	88 0f       	add	r24, r24
 d58:	99 1f       	adc	r25, r25
 d5a:	02 c0       	rjmp	.+4      	; 0xd60 <checkIfNoButtonIsPressed+0x3a>
		else
			zoom = 1;
 d5c:	81 e0       	ldi	r24, 0x01	; 1
 d5e:	90 e0       	ldi	r25, 0x00	; 0
 d60:	90 93 7f 00 	sts	0x007F, r25
 d64:	80 93 7e 00 	sts	0x007E, r24
		
		lcd_clear_area(1,61,83);
 d68:	81 e0       	ldi	r24, 0x01	; 1
 d6a:	6d e3       	ldi	r22, 0x3D	; 61
 d6c:	43 e5       	ldi	r20, 0x53	; 83
 d6e:	09 dd       	rcall	.-1518   	; 0x782 <lcd_clear_area>
		itoa(zoom,int2str,10);
 d70:	80 91 7e 00 	lds	r24, 0x007E
 d74:	90 91 7f 00 	lds	r25, 0x007F
 d78:	c3 e8       	ldi	r28, 0x83	; 131
 d7a:	d3 e0       	ldi	r29, 0x03	; 3
 d7c:	be 01       	movw	r22, r28
 d7e:	4a e0       	ldi	r20, 0x0A	; 10
 d80:	50 e0       	ldi	r21, 0x00	; 0
 d82:	80 d0       	rcall	.+256    	; 0xe84 <itoa>
		w = strlen(int2str);
 d84:	fe 01       	movw	r30, r28
 d86:	01 90       	ld	r0, Z+
 d88:	00 20       	and	r0, r0
 d8a:	e9 f7       	brne	.-6      	; 0xd86 <checkIfNoButtonIsPressed+0x60>
 d8c:	31 97       	sbiw	r30, 0x01	; 1
 d8e:	ec 1b       	sub	r30, r28
 d90:	fd 0b       	sbc	r31, r29
		lcd_goto_xy(15 - w,1);
 d92:	8f e0       	ldi	r24, 0x0F	; 15
 d94:	8e 1b       	sub	r24, r30
 d96:	61 e0       	ldi	r22, 0x01	; 1
 d98:	4d dc       	rcall	.-1894   	; 0x634 <lcd_goto_xy>
		lcd_str(int2str);
 d9a:	ce 01       	movw	r24, r28
 d9c:	df dc       	rcall	.-1602   	; 0x75c <lcd_str>

		sendChannelsDataOnLCD();
 d9e:	fc de       	rcall	.-520    	; 0xb98 <sendChannelsDataOnLCD>
	}
}
 da0:	df 91       	pop	r29
 da2:	cf 91       	pop	r28
 da4:	08 95       	ret

00000da6 <main>:
//  Main program 
//========================================================================
int main(void)
{	
	
	DDRD = 0x00;
 da6:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
 da8:	12 ba       	out	0x12, r1	; 18

	DDRC = 0x00;
 daa:	14 ba       	out	0x14, r1	; 20
	PORTC = 0xff;
 dac:	8f ef       	ldi	r24, 0xFF	; 255
 dae:	85 bb       	out	0x15, r24	; 21

	DDRB |= (1<<LED1);
 db0:	bd 9a       	sbi	0x17, 5	; 23

	PORTB &= ~(1<<LED1);
 db2:	c5 98       	cbi	0x18, 5	; 24
	PORTD |= (1<<BTN_INCREASE);    //Enable pull-up resistor on BTN_DECREASE pin.
 db4:	94 9a       	sbi	0x12, 4	; 18
	PORTC |= (1<<BTN_DECREASE);    //Enable pull-up resistor on BTN_INCREASE pin.
 db6:	ad 9a       	sbi	0x15, 5	; 21
	PORTD |= (1<<BTN_ZOOM_OUT);    //Enable pull-up resistor on BTN_ZOOM_OUT pin.
 db8:	95 9a       	sbi	0x12, 5	; 18
 dba:	8f ef       	ldi	r24, 0xFF	; 255
 dbc:	91 ee       	ldi	r25, 0xE1	; 225
 dbe:	a4 e0       	ldi	r26, 0x04	; 4
 dc0:	81 50       	subi	r24, 0x01	; 1
 dc2:	90 40       	sbci	r25, 0x00	; 0
 dc4:	a0 40       	sbci	r26, 0x00	; 0
 dc6:	e1 f7       	brne	.-8      	; 0xdc0 <main+0x1a>
 dc8:	00 c0       	rjmp	.+0      	; 0xdca <main+0x24>
 dca:	00 00       	nop

///*
	_delay_ms(100);

	lcd_init();
 dcc:	27 dd       	rcall	.-1458   	; 0x81c <lcd_init>
 dce:	8f ef       	ldi	r24, 0xFF	; 255
 dd0:	91 ee       	ldi	r25, 0xE1	; 225
 dd2:	a4 e0       	ldi	r26, 0x04	; 4
 dd4:	81 50       	subi	r24, 0x01	; 1
 dd6:	90 40       	sbci	r25, 0x00	; 0
 dd8:	a0 40       	sbci	r26, 0x00	; 0
 dda:	e1 f7       	brne	.-8      	; 0xdd4 <main+0x2e>
 ddc:	00 c0       	rjmp	.+0      	; 0xdde <main+0x38>
 dde:	00 00       	nop

	_delay_ms(100);

	lcd_contrast(0x40);
 de0:	80 e4       	ldi	r24, 0x40	; 64
 de2:	0e dd       	rcall	.-1508   	; 0x800 <lcd_contrast>

	printPictureOnLCD(introScreen);
 de4:	8b e0       	ldi	r24, 0x0B	; 11
 de6:	92 e0       	ldi	r25, 0x02	; 2
 de8:	59 dd       	rcall	.-1358   	; 0x89c <printPictureOnLCD>
	//_delay_ms(2000);
	printPictureOnLCD(createdBy);
 dea:	83 e0       	ldi	r24, 0x03	; 3
 dec:	94 e0       	ldi	r25, 0x04	; 4
 dee:	56 dd       	rcall	.-1364   	; 0x89c <printPictureOnLCD>
	
	samplesPos = 0;
 df0:	10 92 78 00 	sts	0x0078, r1
 df4:	10 92 79 00 	sts	0x0079, r1
 df8:	10 92 7a 00 	sts	0x007A, r1
 dfc:	10 92 7b 00 	sts	0x007B, r1
	bufferUsedSpace = 0;
 e00:	10 92 7d 00 	sts	0x007D, r1
 e04:	10 92 7c 00 	sts	0x007C, r1
	zoom = 1;
 e08:	81 e0       	ldi	r24, 0x01	; 1
 e0a:	90 e0       	ldi	r25, 0x00	; 0
 e0c:	90 93 7f 00 	sts	0x007F, r25
 e10:	80 93 7e 00 	sts	0x007E, r24
	minSampleTime = MAX_SAMPLE_TIME;
 e14:	8e ef       	ldi	r24, 0xFE	; 254
 e16:	9f ef       	ldi	r25, 0xFF	; 255
 e18:	90 93 84 01 	sts	0x0184, r25
 e1c:	80 93 83 01 	sts	0x0183, r24
	counter = 0;
 e20:	10 92 82 01 	sts	0x0182, r1
 e24:	10 92 81 01 	sts	0x0181, r1

	lcd_clear();
 e28:	d8 dc       	rcall	.-1616   	; 0x7da <lcd_clear>
	lcd_goto_xy(3,3);
 e2a:	83 e0       	ldi	r24, 0x03	; 3
 e2c:	63 e0       	ldi	r22, 0x03	; 3
 e2e:	02 dc       	rcall	.-2044   	; 0x634 <lcd_goto_xy>
	lcd_str("Waiting for");
 e30:	80 e6       	ldi	r24, 0x60	; 96
 e32:	90 e0       	ldi	r25, 0x00	; 0
 e34:	93 dc       	rcall	.-1754   	; 0x75c <lcd_str>
	lcd_goto_xy(4,4);
 e36:	84 e0       	ldi	r24, 0x04	; 4
 e38:	64 e0       	ldi	r22, 0x04	; 4
 e3a:	fc db       	rcall	.-2056   	; 0x634 <lcd_goto_xy>
	lcd_str("signal...");
 e3c:	8c e6       	ldi	r24, 0x6C	; 108
 e3e:	90 e0       	ldi	r25, 0x00	; 0
 e40:	8d dc       	rcall	.-1766   	; 0x75c <lcd_str>
//*/	
	checkInputs(); // Stay here until a logic level change will be made on PORT D.
 e42:	4f dd       	rcall	.-1378   	; 0x8e2 <checkInputs>
	               // Then, read all changes on PORT D until dataBuffer will be full.

	lcd_clear();
 e44:	ca dc       	rcall	.-1644   	; 0x7da <lcd_clear>
	lcd_goto_xy(14,1);
 e46:	8e e0       	ldi	r24, 0x0E	; 14
 e48:	61 e0       	ldi	r22, 0x01	; 1
 e4a:	f4 db       	rcall	.-2072   	; 0x634 <lcd_goto_xy>
	lcd_chr('1');
 e4c:	81 e3       	ldi	r24, 0x31	; 49
 e4e:	59 dc       	rcall	.-1870   	; 0x702 <lcd_chr>
	printRuler();
 e50:	7e de       	rcall	.-772    	; 0xb4e <printRuler>
	sendChannelsDataOnLCD();
 e52:	a2 de       	rcall	.-700    	; 0xb98 <sendChannelsDataOnLCD>
	
	for(;;)
	{
		checkDecreaseButton();
 e54:	ca de       	rcall	.-620    	; 0xbea <checkDecreaseButton>
		checkIncreaseButton();
 e56:	0e df       	rcall	.-484    	; 0xc74 <checkIncreaseButton>
		checkIfNoButtonIsPressed();
 e58:	66 df       	rcall	.-308    	; 0xd26 <checkIfNoButtonIsPressed>
 e5a:	fc cf       	rjmp	.-8      	; 0xe54 <main+0xae>

00000e5c <__udivmodhi4>:
 e5c:	aa 1b       	sub	r26, r26
 e5e:	bb 1b       	sub	r27, r27
 e60:	51 e1       	ldi	r21, 0x11	; 17
 e62:	07 c0       	rjmp	.+14     	; 0xe72 <__udivmodhi4_ep>

00000e64 <__udivmodhi4_loop>:
 e64:	aa 1f       	adc	r26, r26
 e66:	bb 1f       	adc	r27, r27
 e68:	a6 17       	cp	r26, r22
 e6a:	b7 07       	cpc	r27, r23
 e6c:	10 f0       	brcs	.+4      	; 0xe72 <__udivmodhi4_ep>
 e6e:	a6 1b       	sub	r26, r22
 e70:	b7 0b       	sbc	r27, r23

00000e72 <__udivmodhi4_ep>:
 e72:	88 1f       	adc	r24, r24
 e74:	99 1f       	adc	r25, r25
 e76:	5a 95       	dec	r21
 e78:	a9 f7       	brne	.-22     	; 0xe64 <__udivmodhi4_loop>
 e7a:	80 95       	com	r24
 e7c:	90 95       	com	r25
 e7e:	bc 01       	movw	r22, r24
 e80:	cd 01       	movw	r24, r26
 e82:	08 95       	ret

00000e84 <itoa>:
 e84:	fb 01       	movw	r30, r22
 e86:	9f 01       	movw	r18, r30
 e88:	e8 94       	clt
 e8a:	42 30       	cpi	r20, 0x02	; 2
 e8c:	bc f0       	brlt	.+46     	; 0xebc <itoa+0x38>
 e8e:	45 32       	cpi	r20, 0x25	; 37
 e90:	ac f4       	brge	.+42     	; 0xebc <itoa+0x38>
 e92:	4a 30       	cpi	r20, 0x0A	; 10
 e94:	29 f4       	brne	.+10     	; 0xea0 <itoa+0x1c>
 e96:	97 fb       	bst	r25, 7
 e98:	1e f4       	brtc	.+6      	; 0xea0 <itoa+0x1c>
 e9a:	90 95       	com	r25
 e9c:	81 95       	neg	r24
 e9e:	9f 4f       	sbci	r25, 0xFF	; 255
 ea0:	64 2f       	mov	r22, r20
 ea2:	77 27       	eor	r23, r23
 ea4:	db df       	rcall	.-74     	; 0xe5c <__udivmodhi4>
 ea6:	80 5d       	subi	r24, 0xD0	; 208
 ea8:	8a 33       	cpi	r24, 0x3A	; 58
 eaa:	0c f0       	brlt	.+2      	; 0xeae <itoa+0x2a>
 eac:	89 5d       	subi	r24, 0xD9	; 217
 eae:	81 93       	st	Z+, r24
 eb0:	cb 01       	movw	r24, r22
 eb2:	00 97       	sbiw	r24, 0x00	; 0
 eb4:	a9 f7       	brne	.-22     	; 0xea0 <itoa+0x1c>
 eb6:	16 f4       	brtc	.+4      	; 0xebc <itoa+0x38>
 eb8:	5d e2       	ldi	r21, 0x2D	; 45
 eba:	51 93       	st	Z+, r21
 ebc:	10 82       	st	Z, r1
 ebe:	c9 01       	movw	r24, r18
 ec0:	32 c0       	rjmp	.+100    	; 0xf26 <strrev>

00000ec2 <ltoa>:
 ec2:	fa 01       	movw	r30, r20
 ec4:	cf 93       	push	r28
 ec6:	ff 93       	push	r31
 ec8:	ef 93       	push	r30
 eca:	22 30       	cpi	r18, 0x02	; 2
 ecc:	3c f1       	brlt	.+78     	; 0xf1c <ltoa+0x5a>
 ece:	25 32       	cpi	r18, 0x25	; 37
 ed0:	2c f5       	brge	.+74     	; 0xf1c <ltoa+0x5a>
 ed2:	c2 2f       	mov	r28, r18
 ed4:	e8 94       	clt
 ed6:	ca 30       	cpi	r28, 0x0A	; 10
 ed8:	49 f4       	brne	.+18     	; 0xeec <ltoa+0x2a>
 eda:	97 fb       	bst	r25, 7
 edc:	3e f4       	brtc	.+14     	; 0xeec <ltoa+0x2a>
 ede:	90 95       	com	r25
 ee0:	80 95       	com	r24
 ee2:	70 95       	com	r23
 ee4:	61 95       	neg	r22
 ee6:	7f 4f       	sbci	r23, 0xFF	; 255
 ee8:	8f 4f       	sbci	r24, 0xFF	; 255
 eea:	9f 4f       	sbci	r25, 0xFF	; 255
 eec:	2c 2f       	mov	r18, r28
 eee:	33 27       	eor	r19, r19
 ef0:	44 27       	eor	r20, r20
 ef2:	55 27       	eor	r21, r21
 ef4:	ff 93       	push	r31
 ef6:	ef 93       	push	r30
 ef8:	26 d0       	rcall	.+76     	; 0xf46 <__udivmodsi4>
 efa:	ef 91       	pop	r30
 efc:	ff 91       	pop	r31
 efe:	60 5d       	subi	r22, 0xD0	; 208
 f00:	6a 33       	cpi	r22, 0x3A	; 58
 f02:	0c f0       	brlt	.+2      	; 0xf06 <ltoa+0x44>
 f04:	69 5d       	subi	r22, 0xD9	; 217
 f06:	61 93       	st	Z+, r22
 f08:	b9 01       	movw	r22, r18
 f0a:	ca 01       	movw	r24, r20
 f0c:	60 50       	subi	r22, 0x00	; 0
 f0e:	70 40       	sbci	r23, 0x00	; 0
 f10:	80 40       	sbci	r24, 0x00	; 0
 f12:	90 40       	sbci	r25, 0x00	; 0
 f14:	59 f7       	brne	.-42     	; 0xeec <ltoa+0x2a>
 f16:	16 f4       	brtc	.+4      	; 0xf1c <ltoa+0x5a>
 f18:	cd e2       	ldi	r28, 0x2D	; 45
 f1a:	c1 93       	st	Z+, r28
 f1c:	10 82       	st	Z, r1
 f1e:	8f 91       	pop	r24
 f20:	9f 91       	pop	r25
 f22:	cf 91       	pop	r28
 f24:	00 c0       	rjmp	.+0      	; 0xf26 <strrev>

00000f26 <strrev>:
 f26:	dc 01       	movw	r26, r24
 f28:	fc 01       	movw	r30, r24
 f2a:	67 2f       	mov	r22, r23
 f2c:	71 91       	ld	r23, Z+
 f2e:	77 23       	and	r23, r23
 f30:	e1 f7       	brne	.-8      	; 0xf2a <strrev+0x4>
 f32:	32 97       	sbiw	r30, 0x02	; 2
 f34:	04 c0       	rjmp	.+8      	; 0xf3e <strrev+0x18>
 f36:	7c 91       	ld	r23, X
 f38:	6d 93       	st	X+, r22
 f3a:	70 83       	st	Z, r23
 f3c:	62 91       	ld	r22, -Z
 f3e:	ae 17       	cp	r26, r30
 f40:	bf 07       	cpc	r27, r31
 f42:	c8 f3       	brcs	.-14     	; 0xf36 <strrev+0x10>
 f44:	08 95       	ret

00000f46 <__udivmodsi4>:
 f46:	a1 e2       	ldi	r26, 0x21	; 33
 f48:	1a 2e       	mov	r1, r26
 f4a:	aa 1b       	sub	r26, r26
 f4c:	bb 1b       	sub	r27, r27
 f4e:	fd 01       	movw	r30, r26
 f50:	0d c0       	rjmp	.+26     	; 0xf6c <__udivmodsi4_ep>

00000f52 <__udivmodsi4_loop>:
 f52:	aa 1f       	adc	r26, r26
 f54:	bb 1f       	adc	r27, r27
 f56:	ee 1f       	adc	r30, r30
 f58:	ff 1f       	adc	r31, r31
 f5a:	a2 17       	cp	r26, r18
 f5c:	b3 07       	cpc	r27, r19
 f5e:	e4 07       	cpc	r30, r20
 f60:	f5 07       	cpc	r31, r21
 f62:	20 f0       	brcs	.+8      	; 0xf6c <__udivmodsi4_ep>
 f64:	a2 1b       	sub	r26, r18
 f66:	b3 0b       	sbc	r27, r19
 f68:	e4 0b       	sbc	r30, r20
 f6a:	f5 0b       	sbc	r31, r21

00000f6c <__udivmodsi4_ep>:
 f6c:	66 1f       	adc	r22, r22
 f6e:	77 1f       	adc	r23, r23
 f70:	88 1f       	adc	r24, r24
 f72:	99 1f       	adc	r25, r25
 f74:	1a 94       	dec	r1
 f76:	69 f7       	brne	.-38     	; 0xf52 <__udivmodsi4_loop>
 f78:	60 95       	com	r22
 f7a:	70 95       	com	r23
 f7c:	80 95       	com	r24
 f7e:	90 95       	com	r25
 f80:	9b 01       	movw	r18, r22
 f82:	ac 01       	movw	r20, r24
 f84:	bd 01       	movw	r22, r26
 f86:	cf 01       	movw	r24, r30
 f88:	08 95       	ret

00000f8a <_exit>:
 f8a:	f8 94       	cli

00000f8c <__stop_program>:
 f8c:	ff cf       	rjmp	.-2      	; 0xf8c <__stop_program>
