
miniLogicAnalyzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001078  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00001078  0000110c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000037e  00800076  00800076  00001122  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00001122  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000280  00000000  00000000  00001162  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000923  00000000  00000000  000013e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000408  00000000  00000000  00001d05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a56  00000000  00000000  0000210d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00002b64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000341  00000000  00000000  00002d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000055a  00000000  00000000  00003045  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000359f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c2       	rjmp	.+1530   	; 0x5fc <__ctors_end>
       2:	17 c3       	rjmp	.+1582   	; 0x632 <__bad_interrupt>
       4:	16 c3       	rjmp	.+1580   	; 0x632 <__bad_interrupt>
       6:	15 c3       	rjmp	.+1578   	; 0x632 <__bad_interrupt>
       8:	14 c3       	rjmp	.+1576   	; 0x632 <__bad_interrupt>
       a:	13 c3       	rjmp	.+1574   	; 0x632 <__bad_interrupt>
       c:	12 c3       	rjmp	.+1572   	; 0x632 <__bad_interrupt>
       e:	11 c3       	rjmp	.+1570   	; 0x632 <__bad_interrupt>
      10:	10 c3       	rjmp	.+1568   	; 0x632 <__bad_interrupt>
      12:	0f c3       	rjmp	.+1566   	; 0x632 <__bad_interrupt>
      14:	0e c3       	rjmp	.+1564   	; 0x632 <__bad_interrupt>
      16:	0d c3       	rjmp	.+1562   	; 0x632 <__bad_interrupt>
      18:	0c c3       	rjmp	.+1560   	; 0x632 <__bad_interrupt>
      1a:	0b c3       	rjmp	.+1558   	; 0x632 <__bad_interrupt>
      1c:	0a c3       	rjmp	.+1556   	; 0x632 <__bad_interrupt>
      1e:	09 c3       	rjmp	.+1554   	; 0x632 <__bad_interrupt>
      20:	08 c3       	rjmp	.+1552   	; 0x632 <__bad_interrupt>
      22:	07 c3       	rjmp	.+1550   	; 0x632 <__bad_interrupt>
      24:	06 c3       	rjmp	.+1548   	; 0x632 <__bad_interrupt>

00000026 <introScreen>:
      26:	82 fe 8e 3e f8 e0 30 8e fe fe 82 88 fa fa 80 88     ...>..0.........
      36:	f8 f8 08 f8 f0 80 88 fa fa 80 00 00 00 00 00 00     ................
      46:	00 00 00 00 fe 12 12 12 02 00 78 c0 60 c0 78 00     ..........x.`.x.
      56:	00 00 00 00 00 00 38 40 80 40 38 00 00 84 fe 80     ......8@.@8.....
      66:	00 00 00 c0 c0 00 00 00 7c a2 92 8a 7c 00 7c a2     ........|...|.|.
      76:	92 8a 7c 00 10 f0 f0 10 00 00 00 00 80 c0 40 40     ..|...........@@
      86:	c0 80 00 80 c0 40 e0 a0 00 40 d0 d0 00 80 c0 40     .....@...@.....@
      96:	c0 00 00 00 00 00 00 00 e0 10 70 e0 80 00 40 c0     ..........p...@.
      a6:	c0 40 c0 80 00 00 40 40 40 c0 80 00 10 f0 f0 00     .@....@@@.......
      b6:	40 c0 c0 00 c0 00 40 40 c0 c0 40 00 80 c0 40 c0     @.....@@..@...@.
      c6:	80 00 40 c0 c0 40 c0 00 04 07 07 04 04 04 06 00     ..@..@..........
      d6:	03 07 04 04 07 03 00 0e 15 15 15 0c 00 04 07 07     ................
      e6:	04 03 07 04 04 00 00 00 00 00 04 07 05 01 05 07     ................
      f6:	07 04 04 07 07 00 07 07 04 02 07 05 05 07 07 04     ................
     106:	04 07 07 04 18 19 1b 06 01 00 04 06 07 04 04 00     ................
     116:	03 07 05 05 05 00 04 07 07 04 00 00 7e 02 7e 40     ............~.~@
     126:	7e 02 7e 40 7e 02 7e 40 7e 02 7e 40 7e 02 7e 40     ~.~@~.~@~.~@~.~@
     136:	7e 02 7e 40 7e 02 7e 40 7e 02 7e 40 7e 02 7e 40     ~.~@~.~@~.~@~.~@
     146:	7e 02 7e 40 7e 02 7e 40 7e 02 7e 40 7e 02 7e 40     ~.~@~.~@~.~@~.~@
     156:	7e 02 7e 40 7e 02 7e 40 7e 02 7e 40 7e 02 7e 40     ~.~@~.~@~.~@~.~@
     166:	7e 02 7e 40 7e 02 7e 40 7e 02 7e 40 7e 02 7e 40     ~.~@~.~@~.~@~.~@
     176:	7c 04 04 04 04 04 04 04 7c 40 40 40 40 40 40 40     |.......|@@@@@@@
     186:	7c 04 04 04 04 04 04 04 7c 40 40 40 40 40 40 40     |.......|@@@@@@@
     196:	40 40 40 40 40 40 7c 04 04 04 04 04 04 04 7c 40     @@@@@@|.......|@
     1a6:	40 40 40 40 40 40 7c 04 04 04 04 04 04 04 04 04     @@@@@@|.........
     1b6:	04 04 04 04 04 04 7c 40 40 40 40 40 40 40 7c 04     ......|@@@@@@@|.
     1c6:	04 04 04 04 3e 02 02 3e 20 20 20 20 20 20 20 3e     ....>..>       >
     1d6:	02 02 02 02 3e 20 20 20 20 20 20 20 20 20 20 20     ....>           
     1e6:	20 20 3e 02 02 02 02 02 02 02 3e 20 20 20 20 20       >.......>     
     1f6:	20 20 3e 02 02 02 02 02 02 02 02 02 02 02 02 02       >.............
     206:	02 02 02 02 02 02 3e 20 20 20 20 20 20 20 3e 02     ......>       >.
     216:	02 02 02 02 02 02 3e 20                             ......> 

0000021e <createdBy>:
	...
     232:	00 00 00 3e c0 00 fe 00 80 50 50 e0 00 20 50 90     ...>.....PP.. P.
     242:	20 00 20 50 90 20 00 00 00 f4 00 00 00 02 fe 00      . P. ..........
     252:	00 00 00 f4 00 00 20 50 90 20 00 00 00 00 00 00     ...... P. ......
	...
     286:	00 c0 20 20 c0 03 00 00 01 02 02 03 00 01 02 02     ..  ............
     296:	01 00 01 02 02 01 00 00 02 03 02 00 40 02 03 02     ............@...
     2a6:	00 00 e2 03 02 00 41 02 02 01 00 00 00 00 00 00     ......A.........
	...
     2da:	00 19 22 22 1c 00 1e 29 29 2e 00 01 3e 01 03 00     ..""...))...>...
     2ea:	18 25 25 3e 00 12 25 29 12 00 00 20 3f 20 00 1e     .%%>..%)... ? ..
     2fa:	21 21 3f 00 00 20 3f 20 00 12 25 29 12 00 00 00     !!?.. ? ..%)....
	...
     322:	00 fc 02 00 00 e0 10 10 10 00 00 02 fc 00 00 fc     ................
     332:	02 02 fe 00 08 04 fe 00 00 00 00 00 00 00 80 02     ................
     342:	fe 02 00 80 50 50 e0 00 f0 20 10 e0 00 00 00 00     ....PP... ......
     352:	00 00 8c 42 22 1c 00 fc 02 02 fe 00 08 04 fe 00     ...B"...........
     362:	00 8c 42 22 1c 00 00 00 00 00 00 00 00 00 00 00     ..B"............
     372:	00 00 00 00 00 01 02 00 00 01 02 02 02 00 00 02     ................
     382:	01 00 00 03 02 02 01 00 02 02 03 02 00 00 00 00     ................
     392:	00 00 01 02 01 00 00 01 02 02 03 00 03 00 40 03     ..............@.
     3a2:	00 00 00 00 e0 00 03 02 42 02 00 03 02 02 01 00     ........B.......
     3b2:	02 02 03 02 00 03 02 02 02 00 00 00 00 00 00 00     ................
     3c2:	00 00 00 3f 10 10 3f 00 3f 10 10 3f 00 3f 10 10     ...?..?.?..?.?..
     3d2:	3f 00 00 30 30 00 00 12 25 29 12 00 1e 29 29 2e     ?..00...%)...)).
     3e2:	00 01 3e 01 03 00 18 25 25 3e 00 12 25 29 12 00     ..>....%%>..%)..
     3f2:	00 20 3f 20 00 1e 21 21 3f 00 00 20 3f 20 00 12     . ? ..!!?.. ? ..
     402:	25 29 12 00 00 30 30 00 00 1e a1 a1 7f 00 01 3e     %)...00........>
     412:	01 03 00 00                                         ....

00000416 <font5x7>:
     416:	00 00 00 00 00 00 00 2f 00 00 00 07 00 07 00 14     ......./........
     426:	7f 14 7f 14 24 2a 7f 2a 12 32 34 08 16 26 36 49     ....$*.*.24..&6I
     436:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     446:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 00 50 30     ....>....>....P0
     456:	00 10 10 10 10 10 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     466:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     476:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     486:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     496:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     4a6:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     4b6:	32 49 59 51 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IYQ>~...~.III6>
     4c6:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     4d6:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     4e6:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     4f6:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     506:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     516:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     526:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     536:	08 07 61 51 49 45 43 00 7f 41 41 00 55 2a 55 2a     ..aQIEC..AA.U*U*
     546:	55 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40     U.AA.......@@@@@
     556:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     566:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     576:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     586:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     596:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     5a6:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     5b6:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     5c6:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     5d6:	50 3c 44 64 54 4c 44 00 7f 3e 1c 08 08 1c 3e 7f     P<DdTLD..>....>.
     5e6:	00 08 7c 7e 7c 08 10 3e 7e 3e 10 3e 3e 3e 3e 3e     ..|~|..>~>.>>>>>
     5f6:	00 7f 3e 1c 08 00                                   ..>...

000005fc <__ctors_end>:
     5fc:	11 24       	eor	r1, r1
     5fe:	1f be       	out	0x3f, r1	; 63
     600:	cf e5       	ldi	r28, 0x5F	; 95
     602:	d4 e0       	ldi	r29, 0x04	; 4
     604:	de bf       	out	0x3e, r29	; 62
     606:	cd bf       	out	0x3d, r28	; 61

00000608 <__do_copy_data>:
     608:	10 e0       	ldi	r17, 0x00	; 0
     60a:	a0 e6       	ldi	r26, 0x60	; 96
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e8 e7       	ldi	r30, 0x78	; 120
     610:	f0 e1       	ldi	r31, 0x10	; 16
     612:	02 c0       	rjmp	.+4      	; 0x618 <.do_copy_data_start>

00000614 <.do_copy_data_loop>:
     614:	05 90       	lpm	r0, Z+
     616:	0d 92       	st	X+, r0

00000618 <.do_copy_data_start>:
     618:	a6 37       	cpi	r26, 0x76	; 118
     61a:	b1 07       	cpc	r27, r17
     61c:	d9 f7       	brne	.-10     	; 0x614 <.do_copy_data_loop>

0000061e <__do_clear_bss>:
     61e:	13 e0       	ldi	r17, 0x03	; 3
     620:	a6 e7       	ldi	r26, 0x76	; 118
     622:	b0 e0       	ldi	r27, 0x00	; 0
     624:	01 c0       	rjmp	.+2      	; 0x628 <.do_clear_bss_start>

00000626 <.do_clear_bss_loop>:
     626:	1d 92       	st	X+, r1

00000628 <.do_clear_bss_start>:
     628:	a4 3f       	cpi	r26, 0xF4	; 244
     62a:	b1 07       	cpc	r27, r17
     62c:	e1 f7       	brne	.-8      	; 0x626 <.do_clear_bss_loop>
     62e:	eb d2       	rcall	.+1494   	; 0xc06 <main>
     630:	21 c5       	rjmp	.+2626   	; 0x1074 <_exit>

00000632 <__bad_interrupt>:
     632:	e6 cc       	rjmp	.-1588   	; 0x0 <__vectors>

00000634 <saveSampleToBuffer>:
//========================================================================
//
//========================================================================
void saveSampleToBuffer (void)
{
	if(minSampleTime > counter)
     634:	20 91 e8 03 	lds	r18, 0x03E8
     638:	30 91 e9 03 	lds	r19, 0x03E9
     63c:	80 91 e6 03 	lds	r24, 0x03E6
     640:	90 91 e7 03 	lds	r25, 0x03E7
     644:	82 17       	cp	r24, r18
     646:	93 07       	cpc	r25, r19
     648:	40 f4       	brcc	.+16     	; 0x65a <saveSampleToBuffer+0x26>
		minSampleTime = counter;
     64a:	80 91 e6 03 	lds	r24, 0x03E6
     64e:	90 91 e7 03 	lds	r25, 0x03E7
     652:	90 93 e9 03 	sts	0x03E9, r25
     656:	80 93 e8 03 	sts	0x03E8, r24

	dataBuffer[bufferUsedSpace++] = (counter/256);  // HIGH byte of counter		
     65a:	80 91 7a 00 	lds	r24, 0x007A
     65e:	90 91 7b 00 	lds	r25, 0x007B
     662:	20 91 e6 03 	lds	r18, 0x03E6
     666:	30 91 e7 03 	lds	r19, 0x03E7
     66a:	fc 01       	movw	r30, r24
     66c:	e0 58       	subi	r30, 0x80	; 128
     66e:	ff 4f       	sbci	r31, 0xFF	; 255
     670:	30 83       	st	Z, r19
     672:	01 96       	adiw	r24, 0x01	; 1
     674:	90 93 7b 00 	sts	0x007B, r25
     678:	80 93 7a 00 	sts	0x007A, r24
	dataBuffer[bufferUsedSpace++] = counter;        // LOW byte of counter	
     67c:	80 91 7a 00 	lds	r24, 0x007A
     680:	90 91 7b 00 	lds	r25, 0x007B
     684:	20 91 e6 03 	lds	r18, 0x03E6
     688:	30 91 e7 03 	lds	r19, 0x03E7
     68c:	fc 01       	movw	r30, r24
     68e:	e0 58       	subi	r30, 0x80	; 128
     690:	ff 4f       	sbci	r31, 0xFF	; 255
     692:	20 83       	st	Z, r18
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	90 93 7b 00 	sts	0x007B, r25
     69a:	80 93 7a 00 	sts	0x007A, r24
	dataBuffer[bufferUsedSpace++] = PIND;           // Read the pins status on Port D and save it to the RAM buffer.
     69e:	80 91 7a 00 	lds	r24, 0x007A
     6a2:	90 91 7b 00 	lds	r25, 0x007B
     6a6:	20 b3       	in	r18, 0x10	; 16
     6a8:	fc 01       	movw	r30, r24
     6aa:	e0 58       	subi	r30, 0x80	; 128
     6ac:	ff 4f       	sbci	r31, 0xFF	; 255
     6ae:	20 83       	st	Z, r18
     6b0:	01 96       	adiw	r24, 0x01	; 1
     6b2:	90 93 7b 00 	sts	0x007B, r25
     6b6:	80 93 7a 00 	sts	0x007A, r24
	samplesPos = 0;
     6ba:	10 92 76 00 	sts	0x0076, r1
     6be:	10 92 77 00 	sts	0x0077, r1
     6c2:	10 92 78 00 	sts	0x0078, r1
     6c6:	10 92 79 00 	sts	0x0079, r1
	counter = 0; 
     6ca:	10 92 e7 03 	sts	0x03E7, r1
     6ce:	10 92 e6 03 	sts	0x03E6, r1
}
     6d2:	08 95       	ret

000006d4 <checkInputs>:
void checkInputs (void)
{

	unsigned char dataPins;

	dataPins = PIND; //Read the pins status on Port D (this is the initial PORT D status).
     6d4:	20 b3       	in	r18, 0x10	; 16

	while (dataPins == PIND); //Stay here until at least one pin on PORT D changes its Logic status.
     6d6:	80 b3       	in	r24, 0x10	; 16
     6d8:	28 17       	cp	r18, r24
     6da:	e9 f3       	breq	.-6      	; 0x6d6 <checkInputs+0x2>

	PORTB |= (1<<LED1); //Turn-ON the LED. Start recording sample lengths to the AVR's dataBuffer.
     6dc:	c5 9a       	sbi	0x18, 5	; 24
     6de:	16 c0       	rjmp	.+44     	; 0x70c <checkInputs+0x38>
	while(bufferUsedSpace < BUFFER_SIZE) //While the used buffer is not full, repeat this loop.
	{
		if((dataPins == PIND)&&(counter < MAX_SAMPLE_TIME)) // If the PORT D has the same status as before, just...
     6e0:	80 b3       	in	r24, 0x10	; 16
     6e2:	28 17       	cp	r18, r24
     6e4:	89 f4       	brne	.+34     	; 0x708 <checkInputs+0x34>
     6e6:	80 91 e6 03 	lds	r24, 0x03E6
     6ea:	90 91 e7 03 	lds	r25, 0x03E7
     6ee:	8e 5f       	subi	r24, 0xFE	; 254
     6f0:	9f 4f       	sbci	r25, 0xFF	; 255
     6f2:	50 f4       	brcc	.+20     	; 0x708 <checkInputs+0x34>
			counter++;										//... increase the counter.
     6f4:	80 91 e6 03 	lds	r24, 0x03E6
     6f8:	90 91 e7 03 	lds	r25, 0x03E7
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	90 93 e7 03 	sts	0x03E7, r25
     702:	80 93 e6 03 	sts	0x03E6, r24
     706:	02 c0       	rjmp	.+4      	; 0x70c <checkInputs+0x38>
		else  // or else,
		{	
			saveSampleToBuffer(); //save to the buffer the length of the pulse.
     708:	95 df       	rcall	.-214    	; 0x634 <saveSampleToBuffer>
			dataPins = PIND;      //Read the pins status on Port D.
     70a:	20 b3       	in	r18, 0x10	; 16
	dataPins = PIND; //Read the pins status on Port D (this is the initial PORT D status).

	while (dataPins == PIND); //Stay here until at least one pin on PORT D changes its Logic status.

	PORTB |= (1<<LED1); //Turn-ON the LED. Start recording sample lengths to the AVR's dataBuffer.
	while(bufferUsedSpace < BUFFER_SIZE) //While the used buffer is not full, repeat this loop.
     70c:	80 91 7a 00 	lds	r24, 0x007A
     710:	90 91 7b 00 	lds	r25, 0x007B
     714:	86 56       	subi	r24, 0x66	; 102
     716:	93 40       	sbci	r25, 0x03	; 3
     718:	18 f3       	brcs	.-58     	; 0x6e0 <checkInputs+0xc>
		{	
			saveSampleToBuffer(); //save to the buffer the length of the pulse.
			dataPins = PIND;      //Read the pins status on Port D.
		}	
	}
	PORTB &= ~(1<<LED1); //Turn-OFF the LED. That means that AVR has filled its dataBuffer.
     71a:	c5 98       	cbi	0x18, 5	; 24
}
     71c:	08 95       	ret

0000071e <printRuler>:

//========================================================================
//
//========================================================================
void printRuler (void)
{
     71e:	1f 93       	push	r17
	unsigned char k;

	lcd_goto_xy(1,2); //Go to LCD line 2.
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	62 e0       	ldi	r22, 0x02	; 2
     724:	cb d2       	rcall	.+1430   	; 0xcbc <lcd_goto_xy>
     726:	10 e0       	ldi	r17, 0x00	; 0

	for(k=0;k<8;k++)
	{
		lcd_col(TRANSITION);
     728:	8c e3       	ldi	r24, 0x3C	; 60
     72a:	ca d3       	rcall	.+1940   	; 0xec0 <lcd_col>
		lcd_col(0b00000000);
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	c8 d3       	rcall	.+1936   	; 0xec0 <lcd_col>
		lcd_col(0b00011000);
     730:	88 e1       	ldi	r24, 0x18	; 24
     732:	c6 d3       	rcall	.+1932   	; 0xec0 <lcd_col>
		lcd_col(0b00000000);
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	c4 d3       	rcall	.+1928   	; 0xec0 <lcd_col>
		lcd_col(0b00011000);
     738:	88 e1       	ldi	r24, 0x18	; 24
     73a:	c2 d3       	rcall	.+1924   	; 0xec0 <lcd_col>
		lcd_col(0b00000000);
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	c0 d3       	rcall	.+1920   	; 0xec0 <lcd_col>
		lcd_col(0b00011000); 
     740:	88 e1       	ldi	r24, 0x18	; 24
     742:	be d3       	rcall	.+1916   	; 0xec0 <lcd_col>
		lcd_col(0b00000000);
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	bc d3       	rcall	.+1912   	; 0xec0 <lcd_col>
		lcd_col(0b00011000);
     748:	88 e1       	ldi	r24, 0x18	; 24
     74a:	ba d3       	rcall	.+1908   	; 0xec0 <lcd_col>
		lcd_col(0b00000000);
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	b8 d3       	rcall	.+1904   	; 0xec0 <lcd_col>
{
	unsigned char k;

	lcd_goto_xy(1,2); //Go to LCD line 2.

	for(k=0;k<8;k++)
     750:	1f 5f       	subi	r17, 0xFF	; 255
     752:	18 30       	cpi	r17, 0x08	; 8
     754:	49 f7       	brne	.-46     	; 0x728 <printRuler+0xa>
		lcd_col(0b00011000); 
		lcd_col(0b00000000);
		lcd_col(0b00011000);
		lcd_col(0b00000000);
	}
	lcd_col(TRANSITION);
     756:	8c e3       	ldi	r24, 0x3C	; 60
     758:	b3 d3       	rcall	.+1894   	; 0xec0 <lcd_col>
	lcd_col(0b00000000);
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	b1 d3       	rcall	.+1890   	; 0xec0 <lcd_col>
	lcd_col(0b00011000);
     75e:	88 e1       	ldi	r24, 0x18	; 24
     760:	af d3       	rcall	.+1886   	; 0xec0 <lcd_col>
	lcd_col(0b00000000);
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	ad d3       	rcall	.+1882   	; 0xec0 <lcd_col>
}
     766:	1f 91       	pop	r17
     768:	08 95       	ret

0000076a <printCapturedData>:

//========================================================================
//
//========================================================================
void printCapturedData (unsigned long position, unsigned char inputChannel)
{
     76a:	2f 92       	push	r2
     76c:	3f 92       	push	r3
     76e:	4f 92       	push	r4
     770:	5f 92       	push	r5
     772:	6f 92       	push	r6
     774:	7f 92       	push	r7
     776:	8f 92       	push	r8
     778:	9f 92       	push	r9
     77a:	af 92       	push	r10
     77c:	bf 92       	push	r11
     77e:	cf 92       	push	r12
     780:	df 92       	push	r13
     782:	ef 92       	push	r14
     784:	ff 92       	push	r15
     786:	0f 93       	push	r16
     788:	1f 93       	push	r17
     78a:	df 93       	push	r29
     78c:	cf 93       	push	r28
     78e:	00 d0       	rcall	.+0      	; 0x790 <printCapturedData+0x26>
     790:	00 d0       	rcall	.+0      	; 0x792 <printCapturedData+0x28>
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	6b 01       	movw	r12, r22
     798:	7c 01       	movw	r14, r24
     79a:	74 2e       	mov	r7, r20
	unsigned int m,j, b,sampleLength,n,samplLength;
	unsigned char w, sample, nextSample = 0;
	unsigned long lengthSum,oldLength;

	lcd_clear_area(1,1,42);
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	61 e0       	ldi	r22, 0x01	; 1
     7a0:	4a e2       	ldi	r20, 0x2A	; 42
     7a2:	24 d3       	rcall	.+1608   	; 0xdec <lcd_clear_area>

	ltoa(position,int2str,10);
     7a4:	0a ee       	ldi	r16, 0xEA	; 234
     7a6:	13 e0       	ldi	r17, 0x03	; 3
     7a8:	c7 01       	movw	r24, r14
     7aa:	b6 01       	movw	r22, r12
     7ac:	a8 01       	movw	r20, r16
     7ae:	2a e0       	ldi	r18, 0x0A	; 10
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	fc d3       	rcall	.+2040   	; 0xfac <ltoa>
	w = strlen(int2str);
     7b4:	f8 01       	movw	r30, r16
     7b6:	01 90       	ld	r0, Z+
     7b8:	00 20       	and	r0, r0
     7ba:	e9 f7       	brne	.-6      	; 0x7b6 <printCapturedData+0x4c>
     7bc:	31 97       	sbiw	r30, 0x01	; 1
     7be:	e0 1b       	sub	r30, r16
     7c0:	f1 0b       	sbc	r31, r17
	lcd_goto_xy(9-w,1);
     7c2:	89 e0       	ldi	r24, 0x09	; 9
     7c4:	8e 1b       	sub	r24, r30
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	79 d2       	rcall	.+1266   	; 0xcbc <lcd_goto_xy>
	lcd_str(int2str);
     7ca:	c8 01       	movw	r24, r16
     7cc:	03 d3       	rcall	.+1542   	; 0xdd4 <lcd_str>
	lcd_goto_xy(1,inputChannel + 3); //Go to LCD line 3, 4, 5 or 6.
     7ce:	67 2d       	mov	r22, r7
     7d0:	6d 5f       	subi	r22, 0xFD	; 253
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	73 d2       	rcall	.+1254   	; 0xcbc <lcd_goto_xy>
	lengthSum = 0;
	oldLength = 0;
	samplLength = 0;

	sampleLength = dataBuffer[b];
	sampleLength <<= 8; //HIGH byte of counter
     7d6:	90 91 80 00 	lds	r25, 0x0080
     7da:	80 e0       	ldi	r24, 0x00	; 0
	sampleLength |= dataBuffer[b+1]; //LOW byte of counter
     7dc:	20 91 81 00 	lds	r18, 0x0081
     7e0:	e2 2f       	mov	r30, r18
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	e8 2b       	or	r30, r24
     7e6:	f9 2b       	or	r31, r25
     7e8:	cc 24       	eor	r12, r12
     7ea:	dd 24       	eor	r13, r13
     7ec:	40 e0       	ldi	r20, 0x00	; 0
     7ee:	50 e0       	ldi	r21, 0x00	; 0
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	88 24       	eor	r8, r8
     7f6:	99 24       	eor	r9, r9
     7f8:	54 01       	movw	r10, r8

	do
	{
		lengthSum += sampleLength;
     7fa:	8f 01       	movw	r16, r30
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	40 0f       	add	r20, r16
     802:	51 1f       	adc	r21, r17
     804:	62 1f       	adc	r22, r18
     806:	73 1f       	adc	r23, r19
		if(samplesPos > lengthSum)
     808:	80 91 76 00 	lds	r24, 0x0076
     80c:	90 91 77 00 	lds	r25, 0x0077
     810:	a0 91 78 00 	lds	r26, 0x0078
     814:	b0 91 79 00 	lds	r27, 0x0079
     818:	48 17       	cp	r20, r24
     81a:	59 07       	cpc	r21, r25
     81c:	6a 07       	cpc	r22, r26
     81e:	7b 07       	cpc	r23, r27
     820:	90 f4       	brcc	.+36     	; 0x846 <printCapturedData+0xdc>
		{
			oldLength += sampleLength;
     822:	80 0e       	add	r8, r16
     824:	91 1e       	adc	r9, r17
     826:	a2 1e       	adc	r10, r18
     828:	b3 1e       	adc	r11, r19
			b += 3; //Each sample has 3 bytes. 2 for sample length and 1 for the PIN D status data.
     82a:	23 e0       	ldi	r18, 0x03	; 3
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	c2 0e       	add	r12, r18
     830:	d3 1e       	adc	r13, r19
			sampleLength = dataBuffer[b];
     832:	f6 01       	movw	r30, r12
     834:	e0 58       	subi	r30, 0x80	; 128
     836:	ff 4f       	sbci	r31, 0xFF	; 255
			sampleLength <<= 8; //HIGH byte of counter
     838:	f0 80       	ld	r15, Z
     83a:	ee 24       	eor	r14, r14
			sampleLength |= dataBuffer[b+1]; //LOW byte of counter
     83c:	81 81       	ldd	r24, Z+1	; 0x01
     83e:	e8 2f       	mov	r30, r24
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	ee 29       	or	r30, r14
     844:	ff 29       	or	r31, r15
		}
	}while(samplesPos > lengthSum);
     846:	80 91 76 00 	lds	r24, 0x0076
     84a:	90 91 77 00 	lds	r25, 0x0077
     84e:	a0 91 78 00 	lds	r26, 0x0078
     852:	b0 91 79 00 	lds	r27, 0x0079
     856:	48 17       	cp	r20, r24
     858:	59 07       	cpc	r21, r25
     85a:	6a 07       	cpc	r22, r26
     85c:	7b 07       	cpc	r23, r27
     85e:	68 f2       	brcs	.-102    	; 0x7fa <printCapturedData+0x90>
//
//========================================================================
void printCapturedData (unsigned long position, unsigned char inputChannel)
{
	unsigned int m,j, b,sampleLength,n,samplLength;
	unsigned char w, sample, nextSample = 0;
     860:	1a 82       	std	Y+2, r1	; 0x02
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	02 c0       	rjmp	.+4      	; 0x86c <printCapturedData+0x102>
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	7a 94       	dec	r7
     86e:	e2 f7       	brpl	.-8      	; 0x868 <printCapturedData+0xfe>
     870:	9c 83       	std	Y+4, r25	; 0x04
     872:	8b 83       	std	Y+3, r24	; 0x03
     874:	80 e8       	ldi	r24, 0x80	; 128
     876:	e8 2e       	mov	r14, r24
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	f8 2e       	mov	r15, r24
     87c:	ec 0c       	add	r14, r12
     87e:	fd 1c       	adc	r15, r13
     880:	16 01       	movw	r2, r12
     882:	44 24       	eor	r4, r4
     884:	55 24       	eor	r5, r5
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	65 c0       	rjmp	.+202    	; 0x954 <printCapturedData+0x1ea>
	}while(samplesPos > lengthSum);

	for(m=b;m<BUFFER_SIZE;m+=3)
	{
		sampleLength = dataBuffer[m];
		sampleLength <<= 8; //HIGH byte of counter
     88a:	f7 01       	movw	r30, r14
     88c:	d0 80       	ld	r13, Z
     88e:	cc 24       	eor	r12, r12
		sampleLength |= dataBuffer[m+1]; //LOW byte of counter
     890:	81 81       	ldd	r24, Z+1	; 0x01
     892:	28 2f       	mov	r18, r24
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	2c 29       	or	r18, r12
     898:	3d 29       	or	r19, r13

		if(w > 0)
     89a:	99 23       	and	r25, r25
     89c:	61 f0       	breq	.+24     	; 0x8b6 <printCapturedData+0x14c>
		{
			sampleLength -= (samplesPos - oldLength);
     89e:	80 91 76 00 	lds	r24, 0x0076
     8a2:	90 91 77 00 	lds	r25, 0x0077
     8a6:	a0 91 78 00 	lds	r26, 0x0078
     8aa:	b0 91 79 00 	lds	r27, 0x0079
     8ae:	28 1b       	sub	r18, r24
     8b0:	39 0b       	sbc	r19, r25
     8b2:	28 0d       	add	r18, r8
     8b4:	39 1d       	adc	r19, r9
			w=0;			
		}
		
		sample = dataBuffer[m+2];
     8b6:	f7 01       	movw	r30, r14
     8b8:	42 81       	ldd	r20, Z+2	; 0x02
     8ba:	49 83       	std	Y+1, r20	; 0x01
		if((m+5) < BUFFER_SIZE)
     8bc:	c1 01       	movw	r24, r2
     8be:	05 96       	adiw	r24, 0x05	; 5
     8c0:	86 56       	subi	r24, 0x66	; 102
     8c2:	93 40       	sbci	r25, 0x03	; 3
     8c4:	20 f4       	brcc	.+8      	; 0x8ce <printCapturedData+0x164>
		{
			nextSample = dataBuffer[m+5]; 
     8c6:	f7 01       	movw	r30, r14
     8c8:	85 81       	ldd	r24, Z+5	; 0x05
			nextSample ^= sample;
     8ca:	84 27       	eor	r24, r20
     8cc:	8a 83       	std	Y+2, r24	; 0x02
		}
		samplLength = sampleLength;
		if(zoom > 0)
     8ce:	80 91 7c 00 	lds	r24, 0x007C
     8d2:	90 91 7d 00 	lds	r25, 0x007D
     8d6:	89 2b       	or	r24, r25
     8d8:	11 f4       	brne	.+4      	; 0x8de <printCapturedData+0x174>
     8da:	39 01       	movw	r6, r18
     8dc:	07 c0       	rjmp	.+14     	; 0x8ec <printCapturedData+0x182>
			samplLength /= zoom; 
     8de:	60 91 7c 00 	lds	r22, 0x007C
     8e2:	70 91 7d 00 	lds	r23, 0x007D
     8e6:	c9 01       	movw	r24, r18
     8e8:	2e d3       	rcall	.+1628   	; 0xf46 <__udivmodhi4>
     8ea:	3b 01       	movw	r6, r22
     8ec:	00 e0       	ldi	r16, 0x00	; 0
     8ee:	10 e0       	ldi	r17, 0x00	; 0
     8f0:	15 c0       	rjmp	.+42     	; 0x91c <printCapturedData+0x1b2>

		for(j=0;j<samplLength;j++)
		{
			if(bit_is_set(sample,inputChannel))
     8f2:	89 81       	ldd	r24, Y+1	; 0x01
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	2b 81       	ldd	r18, Y+3	; 0x03
     8f8:	3c 81       	ldd	r19, Y+4	; 0x04
     8fa:	82 23       	and	r24, r18
     8fc:	93 23       	and	r25, r19
     8fe:	89 2b       	or	r24, r25
     900:	11 f0       	breq	.+4      	; 0x906 <printCapturedData+0x19c>
				lcd_col(ONE); //1
     902:	80 e2       	ldi	r24, 0x20	; 32
     904:	01 c0       	rjmp	.+2      	; 0x908 <printCapturedData+0x19e>
			else
				lcd_col(ZERO);//0
     906:	84 e0       	ldi	r24, 0x04	; 4
     908:	db d2       	rcall	.+1462   	; 0xec0 <lcd_col>
			n++;
     90a:	08 94       	sec
     90c:	41 1c       	adc	r4, r1
     90e:	51 1c       	adc	r5, r1

			if(n >= ONE_LINE_LENGTH)
     910:	34 e5       	ldi	r19, 0x54	; 84
     912:	43 16       	cp	r4, r19
     914:	51 04       	cpc	r5, r1
     916:	28 f4       	brcc	.+10     	; 0x922 <printCapturedData+0x1b8>
		}
		samplLength = sampleLength;
		if(zoom > 0)
			samplLength /= zoom; 

		for(j=0;j<samplLength;j++)
     918:	0f 5f       	subi	r16, 0xFF	; 255
     91a:	1f 4f       	sbci	r17, 0xFF	; 255
     91c:	06 15       	cp	r16, r6
     91e:	17 05       	cpc	r17, r7
     920:	40 f3       	brcs	.-48     	; 0x8f2 <printCapturedData+0x188>
			n++;

			if(n >= ONE_LINE_LENGTH)
				break;
		}
		if(bit_is_set(nextSample,inputChannel))
     922:	8a 81       	ldd	r24, Y+2	; 0x02
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	eb 81       	ldd	r30, Y+3	; 0x03
     928:	fc 81       	ldd	r31, Y+4	; 0x04
     92a:	8e 23       	and	r24, r30
     92c:	9f 23       	and	r25, r31
     92e:	89 2b       	or	r24, r25
     930:	21 f0       	breq	.+8      	; 0x93a <printCapturedData+0x1d0>
		{
				lcd_pixelBack();
     932:	db d2       	rcall	.+1462   	; 0xeea <lcd_pixelBack>
				lcd_col(TRANSITION);
     934:	8c e3       	ldi	r24, 0x3C	; 60
     936:	c4 d2       	rcall	.+1416   	; 0xec0 <lcd_col>
				nextSample = 0; //Set nextSample to <No Sample> status.
     938:	1a 82       	std	Y+2, r1	; 0x02
     93a:	23 e0       	ldi	r18, 0x03	; 3
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	e2 0e       	add	r14, r18
     940:	f3 1e       	adc	r15, r19
		}

		if(n >= ONE_LINE_LENGTH)
     942:	34 e5       	ldi	r19, 0x54	; 84
     944:	43 16       	cp	r4, r19
     946:	51 04       	cpc	r5, r1
     948:	58 f4       	brcc	.+22     	; 0x960 <printCapturedData+0x1f6>
			sampleLength <<= 8; //HIGH byte of counter
			sampleLength |= dataBuffer[b+1]; //LOW byte of counter
		}
	}while(samplesPos > lengthSum);

	for(m=b;m<BUFFER_SIZE;m+=3)
     94a:	83 e0       	ldi	r24, 0x03	; 3
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	28 0e       	add	r2, r24
     950:	39 1e       	adc	r3, r25
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	e6 e6       	ldi	r30, 0x66	; 102
     956:	2e 16       	cp	r2, r30
     958:	e3 e0       	ldi	r30, 0x03	; 3
     95a:	3e 06       	cpc	r3, r30
     95c:	08 f4       	brcc	.+2      	; 0x960 <printCapturedData+0x1f6>
     95e:	95 cf       	rjmp	.-214    	; 0x88a <printCapturedData+0x120>
		}

		if(n >= ONE_LINE_LENGTH)
			break;
	}
}
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	cf 91       	pop	r28
     96a:	df 91       	pop	r29
     96c:	1f 91       	pop	r17
     96e:	0f 91       	pop	r16
     970:	ff 90       	pop	r15
     972:	ef 90       	pop	r14
     974:	df 90       	pop	r13
     976:	cf 90       	pop	r12
     978:	bf 90       	pop	r11
     97a:	af 90       	pop	r10
     97c:	9f 90       	pop	r9
     97e:	8f 90       	pop	r8
     980:	7f 90       	pop	r7
     982:	6f 90       	pop	r6
     984:	5f 90       	pop	r5
     986:	4f 90       	pop	r4
     988:	3f 90       	pop	r3
     98a:	2f 90       	pop	r2
     98c:	08 95       	ret

0000098e <sendChannelsDataOnLCD>:
//========================================================================
//
//========================================================================
void sendChannelsDataOnLCD (void)
{
	printCapturedData(samplesPos, IN1);
     98e:	60 91 76 00 	lds	r22, 0x0076
     992:	70 91 77 00 	lds	r23, 0x0077
     996:	80 91 78 00 	lds	r24, 0x0078
     99a:	90 91 79 00 	lds	r25, 0x0079
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	e4 de       	rcall	.-568    	; 0x76a <printCapturedData>
	printCapturedData(samplesPos, IN2);
     9a2:	60 91 76 00 	lds	r22, 0x0076
     9a6:	70 91 77 00 	lds	r23, 0x0077
     9aa:	80 91 78 00 	lds	r24, 0x0078
     9ae:	90 91 79 00 	lds	r25, 0x0079
     9b2:	41 e0       	ldi	r20, 0x01	; 1
     9b4:	da de       	rcall	.-588    	; 0x76a <printCapturedData>
	printCapturedData(samplesPos, IN3);
     9b6:	60 91 76 00 	lds	r22, 0x0076
     9ba:	70 91 77 00 	lds	r23, 0x0077
     9be:	80 91 78 00 	lds	r24, 0x0078
     9c2:	90 91 79 00 	lds	r25, 0x0079
     9c6:	42 e0       	ldi	r20, 0x02	; 2
     9c8:	d0 de       	rcall	.-608    	; 0x76a <printCapturedData>
	printCapturedData(samplesPos, IN4);
     9ca:	60 91 76 00 	lds	r22, 0x0076
     9ce:	70 91 77 00 	lds	r23, 0x0077
     9d2:	80 91 78 00 	lds	r24, 0x0078
     9d6:	90 91 79 00 	lds	r25, 0x0079
     9da:	43 e0       	ldi	r20, 0x03	; 3
     9dc:	c6 de       	rcall	.-628    	; 0x76a <printCapturedData>
}
     9de:	08 95       	ret

000009e0 <checkDecreaseButton>:
//========================================================================
//
//========================================================================
void checkDecreaseButton (void)
{
	if(bit_is_clear(PINC,BTN_DECREASE)&&(samplesPos > 0)) //Scroll to the right the waveform content.
     9e0:	9d 99       	sbic	0x13, 5	; 19
     9e2:	41 c0       	rjmp	.+130    	; 0xa66 <checkDecreaseButton+0x86>
     9e4:	80 91 76 00 	lds	r24, 0x0076
     9e8:	90 91 77 00 	lds	r25, 0x0077
     9ec:	a0 91 78 00 	lds	r26, 0x0078
     9f0:	b0 91 79 00 	lds	r27, 0x0079
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	a1 05       	cpc	r26, r1
     9f8:	b1 05       	cpc	r27, r1
     9fa:	a9 f1       	breq	.+106    	; 0xa66 <checkDecreaseButton+0x86>
	{
		if(counter < MAX_SAMPLE_TIME)
     9fc:	80 91 e6 03 	lds	r24, 0x03E6
     a00:	90 91 e7 03 	lds	r25, 0x03E7
     a04:	8e 5f       	subi	r24, 0xFE	; 254
     a06:	9f 4f       	sbci	r25, 0xFF	; 255
     a08:	70 f5       	brcc	.+92     	; 0xa66 <checkDecreaseButton+0x86>
		{
			if(samplesPos >= zoom)
     a0a:	20 91 76 00 	lds	r18, 0x0076
     a0e:	30 91 77 00 	lds	r19, 0x0077
     a12:	40 91 78 00 	lds	r20, 0x0078
     a16:	50 91 79 00 	lds	r21, 0x0079
     a1a:	80 91 7c 00 	lds	r24, 0x007C
     a1e:	90 91 7d 00 	lds	r25, 0x007D
     a22:	a0 e0       	ldi	r26, 0x00	; 0
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	28 17       	cp	r18, r24
     a28:	39 07       	cpc	r19, r25
     a2a:	4a 07       	cpc	r20, r26
     a2c:	5b 07       	cpc	r21, r27
     a2e:	d0 f0       	brcs	.+52     	; 0xa64 <checkDecreaseButton+0x84>
				samplesPos -= zoom;
     a30:	20 91 76 00 	lds	r18, 0x0076
     a34:	30 91 77 00 	lds	r19, 0x0077
     a38:	40 91 78 00 	lds	r20, 0x0078
     a3c:	50 91 79 00 	lds	r21, 0x0079
     a40:	80 91 7c 00 	lds	r24, 0x007C
     a44:	90 91 7d 00 	lds	r25, 0x007D
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	28 1b       	sub	r18, r24
     a4e:	39 0b       	sbc	r19, r25
     a50:	4a 0b       	sbc	r20, r26
     a52:	5b 0b       	sbc	r21, r27
     a54:	20 93 76 00 	sts	0x0076, r18
     a58:	30 93 77 00 	sts	0x0077, r19
     a5c:	40 93 78 00 	sts	0x0078, r20
     a60:	50 93 79 00 	sts	0x0079, r21
			sendChannelsDataOnLCD();
     a64:	94 df       	rcall	.-216    	; 0x98e <sendChannelsDataOnLCD>
     a66:	08 95       	ret

00000a68 <checkIncreaseButton>:

//========================================================================
//
//========================================================================
void checkIncreaseButton (void)
{
     a68:	ef 92       	push	r14
     a6a:	ff 92       	push	r15
     a6c:	0f 93       	push	r16
     a6e:	1f 93       	push	r17
	if(bit_is_clear(PIND,BTN_INCREASE)&&(samplesPos < POSITIONS_LENGTH)) //Scroll to the left the waveform content.
     a70:	84 99       	sbic	0x10, 4	; 16
     a72:	4a c0       	rjmp	.+148    	; 0xb08 <checkIncreaseButton+0xa0>
     a74:	80 91 76 00 	lds	r24, 0x0076
     a78:	90 91 77 00 	lds	r25, 0x0077
     a7c:	a0 91 78 00 	lds	r26, 0x0078
     a80:	b0 91 79 00 	lds	r27, 0x0079
     a84:	8c 5b       	subi	r24, 0xBC	; 188
     a86:	9d 4f       	sbci	r25, 0xFD	; 253
     a88:	a1 42       	sbci	r26, 0x21	; 33
     a8a:	b1 40       	sbci	r27, 0x01	; 1
     a8c:	e8 f5       	brcc	.+122    	; 0xb08 <checkIncreaseButton+0xa0>
	{

		if(counter < MAX_SAMPLE_TIME)
     a8e:	80 91 e6 03 	lds	r24, 0x03E6
     a92:	90 91 e7 03 	lds	r25, 0x03E7
     a96:	8e 5f       	subi	r24, 0xFE	; 254
     a98:	9f 4f       	sbci	r25, 0xFF	; 255
     a9a:	b0 f5       	brcc	.+108    	; 0xb08 <checkIncreaseButton+0xa0>
		{
			if(samplesPos < (POSITIONS_LENGTH - zoom))
     a9c:	e0 90 76 00 	lds	r14, 0x0076
     aa0:	f0 90 77 00 	lds	r15, 0x0077
     aa4:	00 91 78 00 	lds	r16, 0x0078
     aa8:	10 91 79 00 	lds	r17, 0x0079
     aac:	20 91 7c 00 	lds	r18, 0x007C
     ab0:	30 91 7d 00 	lds	r19, 0x007D
     ab4:	40 e0       	ldi	r20, 0x00	; 0
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	8c eb       	ldi	r24, 0xBC	; 188
     aba:	9d ef       	ldi	r25, 0xFD	; 253
     abc:	a1 e2       	ldi	r26, 0x21	; 33
     abe:	b1 e0       	ldi	r27, 0x01	; 1
     ac0:	82 1b       	sub	r24, r18
     ac2:	93 0b       	sbc	r25, r19
     ac4:	a4 0b       	sbc	r26, r20
     ac6:	b5 0b       	sbc	r27, r21
     ac8:	e8 16       	cp	r14, r24
     aca:	f9 06       	cpc	r15, r25
     acc:	0a 07       	cpc	r16, r26
     ace:	1b 07       	cpc	r17, r27
     ad0:	d0 f4       	brcc	.+52     	; 0xb06 <checkIncreaseButton+0x9e>
				samplesPos += zoom;
     ad2:	20 91 76 00 	lds	r18, 0x0076
     ad6:	30 91 77 00 	lds	r19, 0x0077
     ada:	40 91 78 00 	lds	r20, 0x0078
     ade:	50 91 79 00 	lds	r21, 0x0079
     ae2:	80 91 7c 00 	lds	r24, 0x007C
     ae6:	90 91 7d 00 	lds	r25, 0x007D
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	82 0f       	add	r24, r18
     af0:	93 1f       	adc	r25, r19
     af2:	a4 1f       	adc	r26, r20
     af4:	b5 1f       	adc	r27, r21
     af6:	80 93 76 00 	sts	0x0076, r24
     afa:	90 93 77 00 	sts	0x0077, r25
     afe:	a0 93 78 00 	sts	0x0078, r26
     b02:	b0 93 79 00 	sts	0x0079, r27
			sendChannelsDataOnLCD();
     b06:	43 df       	rcall	.-378    	; 0x98e <sendChannelsDataOnLCD>
		}
	}
}		
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	08 95       	ret

00000b12 <getNextSampleString>:
//========================================================================
void getNextSampleString (void)
{
	unsigned int w;

	if(bit_is_clear(PINC,BTN_DECREASE))
     b12:	9d 99       	sbic	0x13, 5	; 19
     b14:	37 c0       	rjmp	.+110    	; 0xb84 <getNextSampleString+0x72>
     b16:	e0 e8       	ldi	r30, 0x80	; 128
     b18:	f0 e0       	ldi	r31, 0x00	; 0
	{
		for(w=0; w<BUFFER_SIZE;w++) //Clear the buffer for next sample string.
			dataBuffer[w] = 0xFF;
     b1a:	8f ef       	ldi	r24, 0xFF	; 255
     b1c:	81 93       	st	Z+, r24
{
	unsigned int w;

	if(bit_is_clear(PINC,BTN_DECREASE))
	{
		for(w=0; w<BUFFER_SIZE;w++) //Clear the buffer for next sample string.
     b1e:	93 e0       	ldi	r25, 0x03	; 3
     b20:	e6 3e       	cpi	r30, 0xE6	; 230
     b22:	f9 07       	cpc	r31, r25
     b24:	d9 f7       	brne	.-10     	; 0xb1c <getNextSampleString+0xa>
			dataBuffer[w] = 0xFF;

		samplesPos = 0;
     b26:	10 92 76 00 	sts	0x0076, r1
     b2a:	10 92 77 00 	sts	0x0077, r1
     b2e:	10 92 78 00 	sts	0x0078, r1
     b32:	10 92 79 00 	sts	0x0079, r1
		bufferUsedSpace = 0;
     b36:	10 92 7b 00 	sts	0x007B, r1
     b3a:	10 92 7a 00 	sts	0x007A, r1
		zoom = 0;
     b3e:	10 92 7d 00 	sts	0x007D, r1
     b42:	10 92 7c 00 	sts	0x007C, r1
		minSampleTime = MAX_SAMPLE_TIME;
     b46:	8e ef       	ldi	r24, 0xFE	; 254
     b48:	9f ef       	ldi	r25, 0xFF	; 255
     b4a:	90 93 e9 03 	sts	0x03E9, r25
     b4e:	80 93 e8 03 	sts	0x03E8, r24
		counter = 0;
     b52:	10 92 e7 03 	sts	0x03E7, r1
     b56:	10 92 e6 03 	sts	0x03E6, r1
		
		lcd_clear();
     b5a:	6f d1       	rcall	.+734    	; 0xe3a <lcd_clear>
		lcd_goto_xy(3,3);
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	63 e0       	ldi	r22, 0x03	; 3
     b60:	ad d0       	rcall	.+346    	; 0xcbc <lcd_goto_xy>
		lcd_str("Waiting for");
     b62:	80 e6       	ldi	r24, 0x60	; 96
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	36 d1       	rcall	.+620    	; 0xdd4 <lcd_str>
		lcd_goto_xy(4,4);
     b68:	84 e0       	ldi	r24, 0x04	; 4
     b6a:	64 e0       	ldi	r22, 0x04	; 4
     b6c:	a7 d0       	rcall	.+334    	; 0xcbc <lcd_goto_xy>
		lcd_str("signal...");
     b6e:	8c e6       	ldi	r24, 0x6C	; 108
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	30 d1       	rcall	.+608    	; 0xdd4 <lcd_str>
		checkInputs();
     b74:	af dd       	rcall	.-1186   	; 0x6d4 <checkInputs>
		lcd_clear();
     b76:	61 d1       	rcall	.+706    	; 0xe3a <lcd_clear>
		lcd_goto_xy(14,1);
     b78:	8e e0       	ldi	r24, 0x0E	; 14
     b7a:	61 e0       	ldi	r22, 0x01	; 1
     b7c:	9f d0       	rcall	.+318    	; 0xcbc <lcd_goto_xy>
		lcd_chr('1');
     b7e:	81 e3       	ldi	r24, 0x31	; 49
     b80:	fa d0       	rcall	.+500    	; 0xd76 <lcd_chr>
		printRuler();
     b82:	cd dd       	rcall	.-1126   	; 0x71e <printRuler>
     b84:	08 95       	ret

00000b86 <checkIfNoButtonIsPressed>:
}
//========================================================================
//
//========================================================================
void checkIfNoButtonIsPressed (void)
{
     b86:	0f 93       	push	r16
     b88:	1f 93       	push	r17
	unsigned int w;

	if(bit_is_clear(PIND,BTN_ZOOM_OUT))
     b8a:	85 99       	sbic	0x10, 5	; 16
     b8c:	39 c0       	rjmp	.+114    	; 0xc00 <checkIfNoButtonIsPressed+0x7a>
	{
		while(bit_is_clear(PIND,BTN_ZOOM_OUT));
     b8e:	85 9b       	sbis	0x10, 5	; 16
     b90:	fe cf       	rjmp	.-4      	; 0xb8e <checkIfNoButtonIsPressed+0x8>
			getNextSampleString();
     b92:	bf df       	rcall	.-130    	; 0xb12 <getNextSampleString>
		if((zoom > 0)&&(zoom < 8192))
     b94:	80 91 7c 00 	lds	r24, 0x007C
     b98:	90 91 7d 00 	lds	r25, 0x007D
     b9c:	89 2b       	or	r24, r25
     b9e:	71 f0       	breq	.+28     	; 0xbbc <checkIfNoButtonIsPressed+0x36>
     ba0:	80 91 7c 00 	lds	r24, 0x007C
     ba4:	90 91 7d 00 	lds	r25, 0x007D
     ba8:	80 50       	subi	r24, 0x00	; 0
     baa:	90 42       	sbci	r25, 0x20	; 32
     bac:	38 f4       	brcc	.+14     	; 0xbbc <checkIfNoButtonIsPressed+0x36>
			zoom *= 2;
     bae:	80 91 7c 00 	lds	r24, 0x007C
     bb2:	90 91 7d 00 	lds	r25, 0x007D
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <checkIfNoButtonIsPressed+0x3a>
		else
			zoom = 1;
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	90 93 7d 00 	sts	0x007D, r25
     bc4:	80 93 7c 00 	sts	0x007C, r24
		
		lcd_clear_area(1,61,83);
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	6d e3       	ldi	r22, 0x3D	; 61
     bcc:	43 e5       	ldi	r20, 0x53	; 83
     bce:	0e d1       	rcall	.+540    	; 0xdec <lcd_clear_area>
		itoa(zoom,int2str,10);
     bd0:	80 91 7c 00 	lds	r24, 0x007C
     bd4:	90 91 7d 00 	lds	r25, 0x007D
     bd8:	0a ee       	ldi	r16, 0xEA	; 234
     bda:	13 e0       	ldi	r17, 0x03	; 3
     bdc:	b8 01       	movw	r22, r16
     bde:	4a e0       	ldi	r20, 0x0A	; 10
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	c5 d1       	rcall	.+906    	; 0xf6e <itoa>
		w = strlen(int2str);
     be4:	f8 01       	movw	r30, r16
     be6:	01 90       	ld	r0, Z+
     be8:	00 20       	and	r0, r0
     bea:	e9 f7       	brne	.-6      	; 0xbe6 <checkIfNoButtonIsPressed+0x60>
     bec:	31 97       	sbiw	r30, 0x01	; 1
     bee:	e0 1b       	sub	r30, r16
     bf0:	f1 0b       	sbc	r31, r17
		lcd_goto_xy(15 - w,1);
     bf2:	8f e0       	ldi	r24, 0x0F	; 15
     bf4:	8e 1b       	sub	r24, r30
     bf6:	61 e0       	ldi	r22, 0x01	; 1
     bf8:	61 d0       	rcall	.+194    	; 0xcbc <lcd_goto_xy>
		lcd_str(int2str);
     bfa:	c8 01       	movw	r24, r16
     bfc:	eb d0       	rcall	.+470    	; 0xdd4 <lcd_str>

		sendChannelsDataOnLCD();
     bfe:	c7 de       	rcall	.-626    	; 0x98e <sendChannelsDataOnLCD>
	}
}
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	08 95       	ret

00000c06 <main>:
//  Main program 
//========================================================================
int main(void)
{	
	
	DDRD = 0x00;
     c06:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x00;
     c08:	12 ba       	out	0x12, r1	; 18

	DDRC = 0x00;
     c0a:	14 ba       	out	0x14, r1	; 20
	PORTC = 0xff;
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	85 bb       	out	0x15, r24	; 21

	DDRB |= (1<<LED1);
     c10:	bd 9a       	sbi	0x17, 5	; 23

	PORTB &= ~(1<<LED1);
     c12:	c5 98       	cbi	0x18, 5	; 24
	PORTD |= (1<<BTN_INCREASE);     //Enable pull-up resistor on BTN_DECREASE pin.
     c14:	94 9a       	sbi	0x12, 4	; 18
	PORTC |= (1<<BTN_DECREASE);    //Enable pull-up resistor on BTN_INCREASE pin.
     c16:	ad 9a       	sbi	0x15, 5	; 21
	PORTD |= (1<<BTN_ZOOM_OUT); //Enable pull-up resistor on BTN_ZOOM_OUT pin.
     c18:	95 9a       	sbi	0x12, 5	; 18
     c1a:	88 ee       	ldi	r24, 0xE8	; 232
     c1c:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	20 e9       	ldi	r18, 0x90	; 144
     c20:	31 e0       	ldi	r19, 0x01	; 1
     c22:	f9 01       	movw	r30, r18
     c24:	31 97       	sbiw	r30, 0x01	; 1
     c26:	f1 f7       	brne	.-4      	; 0xc24 <main+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c28:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c2a:	d9 f7       	brne	.-10     	; 0xc22 <main+0x1c>

	_delay_ms(100);

	lcd_init();
     c2c:	2a d1       	rcall	.+596    	; 0xe82 <lcd_init>
     c2e:	88 ee       	ldi	r24, 0xE8	; 232
     c30:	93 e0       	ldi	r25, 0x03	; 3
     c32:	20 e9       	ldi	r18, 0x90	; 144
     c34:	31 e0       	ldi	r19, 0x01	; 1
     c36:	f9 01       	movw	r30, r18
     c38:	31 97       	sbiw	r30, 0x01	; 1
     c3a:	f1 f7       	brne	.-4      	; 0xc38 <main+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c3c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c3e:	d9 f7       	brne	.-10     	; 0xc36 <main+0x30>

	_delay_ms(100);

	lcd_contrast(0x40);
     c40:	80 e4       	ldi	r24, 0x40	; 64
     c42:	11 d1       	rcall	.+546    	; 0xe66 <lcd_contrast>

	printPictureOnLCD(introScreen);
     c44:	86 e2       	ldi	r24, 0x26	; 38
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	5a d1       	rcall	.+692    	; 0xefe <printPictureOnLCD>
	printPictureOnLCD(createdBy);
     c4a:	8e e1       	ldi	r24, 0x1E	; 30
     c4c:	92 e0       	ldi	r25, 0x02	; 2
     c4e:	57 d1       	rcall	.+686    	; 0xefe <printPictureOnLCD>
	
	samplesPos = 0;
     c50:	10 92 76 00 	sts	0x0076, r1
     c54:	10 92 77 00 	sts	0x0077, r1
     c58:	10 92 78 00 	sts	0x0078, r1
     c5c:	10 92 79 00 	sts	0x0079, r1
	bufferUsedSpace = 0;
     c60:	10 92 7b 00 	sts	0x007B, r1
     c64:	10 92 7a 00 	sts	0x007A, r1
	zoom = 1;
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	90 93 7d 00 	sts	0x007D, r25
     c70:	80 93 7c 00 	sts	0x007C, r24
	minSampleTime = MAX_SAMPLE_TIME;
     c74:	8e ef       	ldi	r24, 0xFE	; 254
     c76:	9f ef       	ldi	r25, 0xFF	; 255
     c78:	90 93 e9 03 	sts	0x03E9, r25
     c7c:	80 93 e8 03 	sts	0x03E8, r24
	counter = 0;
     c80:	10 92 e7 03 	sts	0x03E7, r1
     c84:	10 92 e6 03 	sts	0x03E6, r1

	lcd_clear();
     c88:	d8 d0       	rcall	.+432    	; 0xe3a <lcd_clear>
	lcd_goto_xy(3,3);
     c8a:	83 e0       	ldi	r24, 0x03	; 3
     c8c:	63 e0       	ldi	r22, 0x03	; 3
     c8e:	16 d0       	rcall	.+44     	; 0xcbc <lcd_goto_xy>
	lcd_str("Waiting for");
     c90:	80 e6       	ldi	r24, 0x60	; 96
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	9f d0       	rcall	.+318    	; 0xdd4 <lcd_str>
	lcd_goto_xy(4,4);
     c96:	84 e0       	ldi	r24, 0x04	; 4
     c98:	64 e0       	ldi	r22, 0x04	; 4
     c9a:	10 d0       	rcall	.+32     	; 0xcbc <lcd_goto_xy>
	lcd_str("signal...");
     c9c:	8c e6       	ldi	r24, 0x6C	; 108
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	99 d0       	rcall	.+306    	; 0xdd4 <lcd_str>
	
	checkInputs(); // Stay here until a logic level change will be made on PORT D.
     ca2:	18 dd       	rcall	.-1488   	; 0x6d4 <checkInputs>
	               // Then, read all changes on PORT D until dataBuffer will be full.

	lcd_clear();
     ca4:	ca d0       	rcall	.+404    	; 0xe3a <lcd_clear>
	lcd_goto_xy(14,1);
     ca6:	8e e0       	ldi	r24, 0x0E	; 14
     ca8:	61 e0       	ldi	r22, 0x01	; 1
     caa:	08 d0       	rcall	.+16     	; 0xcbc <lcd_goto_xy>
	lcd_chr('1');
     cac:	81 e3       	ldi	r24, 0x31	; 49
     cae:	63 d0       	rcall	.+198    	; 0xd76 <lcd_chr>
	printRuler();
     cb0:	36 dd       	rcall	.-1428   	; 0x71e <printRuler>
	sendChannelsDataOnLCD();
     cb2:	6d de       	rcall	.-806    	; 0x98e <sendChannelsDataOnLCD>
	
	for(;;)
	{
		checkDecreaseButton();
     cb4:	95 de       	rcall	.-726    	; 0x9e0 <checkDecreaseButton>
		checkIncreaseButton();
     cb6:	d8 de       	rcall	.-592    	; 0xa68 <checkIncreaseButton>
		checkIfNoButtonIsPressed();
     cb8:	66 df       	rcall	.-308    	; 0xb86 <checkIfNoButtonIsPressed>
     cba:	fc cf       	rjmp	.-8      	; 0xcb4 <main+0xae>

00000cbc <lcd_goto_xy>:
}

/* Sets cursor location to xy location corresponding to basic font size */
void lcd_goto_xy(unsigned char x, unsigned char y)
{
    lcdCacheIdx = (x-1)*6 + (y-1)*84;
     cbc:	96 e0       	ldi	r25, 0x06	; 6
     cbe:	89 9f       	mul	r24, r25
     cc0:	c0 01       	movw	r24, r0
     cc2:	11 24       	eor	r1, r1
     cc4:	8a 55       	subi	r24, 0x5A	; 90
     cc6:	90 40       	sbci	r25, 0x00	; 0
     cc8:	24 e5       	ldi	r18, 0x54	; 84
     cca:	62 9f       	mul	r22, r18
     ccc:	b0 01       	movw	r22, r0
     cce:	11 24       	eor	r1, r1
     cd0:	86 0f       	add	r24, r22
     cd2:	97 1f       	adc	r25, r23
     cd4:	90 93 f3 03 	sts	0x03F3, r25
     cd8:	80 93 f2 03 	sts	0x03F2, r24
}
     cdc:	08 95       	ret

00000cde <lcd_goto_xy_exact>:

/* Sets cursor location to exact xy pixel location on the lcd */
void lcd_goto_xy_exact(unsigned char x, unsigned char y)
{
    lcdCacheIdx = (x-1) + (y-1)*84;
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	85 55       	subi	r24, 0x55	; 85
     ce2:	90 40       	sbci	r25, 0x00	; 0
     ce4:	24 e5       	ldi	r18, 0x54	; 84
     ce6:	62 9f       	mul	r22, r18
     ce8:	b0 01       	movw	r22, r0
     cea:	11 24       	eor	r1, r1
     cec:	86 0f       	add	r24, r22
     cee:	97 1f       	adc	r25, r23
     cf0:	90 93 f3 03 	sts	0x03F3, r25
     cf4:	80 93 f2 03 	sts	0x03F2, r24
}
     cf8:	08 95       	ret

00000cfa <lcd_send>:
	lcd_send(0x40 |(addr / LCD_X_RES), LCD_CMD);
}

/* Sends data to display controller */
void lcd_send(unsigned char data, LcdCmdData cd)
{
     cfa:	98 2f       	mov	r25, r24
	// Data/DC are outputs for the lcd (all low)
	LCD_DDR |= LCD_DATA_PIN | LCD_DC_PIN;
     cfc:	87 b3       	in	r24, 0x17	; 23
     cfe:	8c 60       	ori	r24, 0x0C	; 12
     d00:	87 bb       	out	0x17, r24	; 23
	
    // Enable display controller (active low)
    LCD_PORT &= ~LCD_SCE_PIN;
     d02:	c0 98       	cbi	0x18, 0	; 24

    // Either command or data
    if(cd == LCD_DATA) {
     d04:	61 30       	cpi	r22, 0x01	; 1
     d06:	11 f4       	brne	.+4      	; 0xd0c <lcd_send+0x12>
        LCD_PORT |= LCD_DC_PIN;
     d08:	c2 9a       	sbi	0x18, 2	; 24
     d0a:	01 c0       	rjmp	.+2      	; 0xd0e <lcd_send+0x14>
    } else {
        LCD_PORT &= ~LCD_DC_PIN;
     d0c:	c2 98       	cbi	0x18, 2	; 24
     d0e:	27 e0       	ldi	r18, 0x07	; 7
     d10:	30 e0       	ldi	r19, 0x00	; 0
    }
	
	for(unsigned char i=0;i<8;i++) {
	
		// Set the DATA pin value
		if((data>>(7-i)) & 0x01) {
     d12:	49 2f       	mov	r20, r25
     d14:	50 e0       	ldi	r21, 0x00	; 0
     d16:	ca 01       	movw	r24, r20
     d18:	02 2e       	mov	r0, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <lcd_send+0x26>
     d1c:	95 95       	asr	r25
     d1e:	87 95       	ror	r24
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <lcd_send+0x22>
     d24:	80 ff       	sbrs	r24, 0
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <lcd_send+0x32>
			LCD_PORT |= LCD_DATA_PIN;
     d28:	c3 9a       	sbi	0x18, 3	; 24
     d2a:	01 c0       	rjmp	.+2      	; 0xd2e <lcd_send+0x34>
		} else {
			LCD_PORT &= ~LCD_DATA_PIN;
     d2c:	c3 98       	cbi	0x18, 3	; 24
		}
		
		// Toggle the clock
		LCD_PORT |= LCD_CLK_PIN;
     d2e:	c4 9a       	sbi	0x18, 4	; 24
		LCD_PORT &= ~LCD_CLK_PIN;
     d30:	c4 98       	cbi	0x18, 4	; 24
     d32:	21 50       	subi	r18, 0x01	; 1
     d34:	30 40       	sbci	r19, 0x00	; 0
        LCD_PORT |= LCD_DC_PIN;
    } else {
        LCD_PORT &= ~LCD_DC_PIN;
    }
	
	for(unsigned char i=0;i<8;i++) {
     d36:	8f ef       	ldi	r24, 0xFF	; 255
     d38:	2f 3f       	cpi	r18, 0xFF	; 255
     d3a:	38 07       	cpc	r19, r24
     d3c:	61 f7       	brne	.-40     	; 0xd16 <lcd_send+0x1c>
		LCD_PORT |= LCD_CLK_PIN;
		LCD_PORT &= ~LCD_CLK_PIN;
	}

	// Disable display controller
    LCD_PORT |= LCD_SCE_PIN;
     d3e:	c0 9a       	sbi	0x18, 0	; 24
	
	// Data/DC can be used as button inputs when not sending to LCD (/w pullups)
	LCD_DDR &= ~(LCD_DATA_PIN | LCD_DC_PIN);
     d40:	87 b3       	in	r24, 0x17	; 23
     d42:	83 7f       	andi	r24, 0xF3	; 243
     d44:	87 bb       	out	0x17, r24	; 23
	LCD_PORT |= LCD_DATA_PIN | LCD_DC_PIN;
     d46:	88 b3       	in	r24, 0x18	; 24
     d48:	8c 60       	ori	r24, 0x0C	; 12
     d4a:	88 bb       	out	0x18, r24	; 24
}
     d4c:	08 95       	ret

00000d4e <lcd_base_addr>:
        lcd_chr(*str++);
    }
}

// Set the base address of the lcd
void lcd_base_addr(unsigned int addr) {
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	8c 01       	movw	r16, r24
	lcd_send(0x80 |(addr % LCD_X_RES), LCD_CMD);
     d54:	64 e5       	ldi	r22, 0x54	; 84
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	f6 d0       	rcall	.+492    	; 0xf46 <__udivmodhi4>
     d5a:	80 68       	ori	r24, 0x80	; 128
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	cd df       	rcall	.-102    	; 0xcfa <lcd_send>
	lcd_send(0x40 |(addr / LCD_X_RES), LCD_CMD);
     d60:	c8 01       	movw	r24, r16
     d62:	64 e5       	ldi	r22, 0x54	; 84
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	ef d0       	rcall	.+478    	; 0xf46 <__udivmodhi4>
     d68:	86 2f       	mov	r24, r22
     d6a:	80 64       	ori	r24, 0x40	; 64
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	c5 df       	rcall	.-118    	; 0xcfa <lcd_send>
}
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	08 95       	ret

00000d76 <lcd_chr>:
    lcdCacheIdx = (x-1) + (y-1)*84;
}

/* Displays a character at current cursor location */
void lcd_chr(char chr)
{
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	08 2f       	mov	r16, r24
	lcd_base_addr(lcdCacheIdx);
     d80:	80 91 f2 03 	lds	r24, 0x03F2
     d84:	90 91 f3 03 	lds	r25, 0x03F3
     d88:	e2 df       	rcall	.-60     	; 0xd4e <lcd_base_addr>

    // 5 pixel wide characters and add space
    for(unsigned char i=0;i<5;i++) {
		lcd_send(pgm_read_byte(&font5x7[chr-32][i]) << 1, LCD_DATA);
     d8a:	85 e0       	ldi	r24, 0x05	; 5
     d8c:	08 9f       	mul	r16, r24
     d8e:	80 01       	movw	r16, r0
     d90:	11 24       	eor	r1, r1
     d92:	e8 01       	movw	r28, r16
     d94:	ca 58       	subi	r28, 0x8A	; 138
     d96:	dc 4f       	sbci	r29, 0xFC	; 252
void lcd_chr(char chr)
{
	lcd_base_addr(lcdCacheIdx);

    // 5 pixel wide characters and add space
    for(unsigned char i=0;i<5;i++) {
     d98:	0b 59       	subi	r16, 0x9B	; 155
     d9a:	10 40       	sbci	r17, 0x00	; 0
     d9c:	0a 5e       	subi	r16, 0xEA	; 234
     d9e:	1b 4f       	sbci	r17, 0xFB	; 251
		lcd_send(pgm_read_byte(&font5x7[chr-32][i]) << 1, LCD_DATA);
     da0:	fe 01       	movw	r30, r28
     da2:	84 91       	lpm	r24, Z+
     da4:	88 0f       	add	r24, r24
     da6:	61 e0       	ldi	r22, 0x01	; 1
     da8:	a8 df       	rcall	.-176    	; 0xcfa <lcd_send>
     daa:	21 96       	adiw	r28, 0x01	; 1
void lcd_chr(char chr)
{
	lcd_base_addr(lcdCacheIdx);

    // 5 pixel wide characters and add space
    for(unsigned char i=0;i<5;i++) {
     dac:	c0 17       	cp	r28, r16
     dae:	d1 07       	cpc	r29, r17
     db0:	b9 f7       	brne	.-18     	; 0xda0 <lcd_chr+0x2a>
		lcd_send(pgm_read_byte(&font5x7[chr-32][i]) << 1, LCD_DATA);
    }
	lcd_send(0, LCD_DATA);
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	61 e0       	ldi	r22, 0x01	; 1
     db6:	a1 df       	rcall	.-190    	; 0xcfa <lcd_send>
	
	lcdCacheIdx += 6;
     db8:	80 91 f2 03 	lds	r24, 0x03F2
     dbc:	90 91 f3 03 	lds	r25, 0x03F3
     dc0:	06 96       	adiw	r24, 0x06	; 6
     dc2:	90 93 f3 03 	sts	0x03F3, r25
     dc6:	80 93 f2 03 	sts	0x03F2, r24
}
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	08 95       	ret

00000dd4 <lcd_str>:

/* Displays string at current cursor location and increment cursor location */
void lcd_str(char *str)
{
     dd4:	cf 93       	push	r28
     dd6:	df 93       	push	r29
     dd8:	ec 01       	movw	r28, r24
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <lcd_str+0xc>
    while(*str) {
        lcd_chr(*str++);
     ddc:	21 96       	adiw	r28, 0x01	; 1
     dde:	cb df       	rcall	.-106    	; 0xd76 <lcd_chr>
}

/* Displays string at current cursor location and increment cursor location */
void lcd_str(char *str)
{
    while(*str) {
     de0:	88 81       	ld	r24, Y
     de2:	88 23       	and	r24, r24
     de4:	d9 f7       	brne	.-10     	; 0xddc <lcd_str+0x8>
        lcd_chr(*str++);
    }
}
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	08 95       	ret

00000dec <lcd_clear_area>:
    }
}

/* Clears an area on a line */
void lcd_clear_area(unsigned char line, unsigned char startX, unsigned char endX)
{  
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
    // Start and end positions of line
    int start = (line-1)*84+(startX-1);
     df4:	94 e5       	ldi	r25, 0x54	; 84
     df6:	89 9f       	mul	r24, r25
     df8:	c0 01       	movw	r24, r0
     dfa:	11 24       	eor	r1, r1
     dfc:	84 55       	subi	r24, 0x54	; 84
     dfe:	90 40       	sbci	r25, 0x00	; 0
    int end = (line-1)*84+(endX-1);
     e00:	8c 01       	movw	r16, r24
     e02:	04 0f       	add	r16, r20
     e04:	11 1d       	adc	r17, r1
     e06:	01 50       	subi	r16, 0x01	; 1
     e08:	10 40       	sbci	r17, 0x00	; 0
	
	lcd_base_addr(start);
     e0a:	c6 2f       	mov	r28, r22
     e0c:	d0 e0       	ldi	r29, 0x00	; 0
     e0e:	21 97       	sbiw	r28, 0x01	; 1
     e10:	c8 0f       	add	r28, r24
     e12:	d9 1f       	adc	r29, r25
     e14:	ce 01       	movw	r24, r28
     e16:	9b df       	rcall	.-202    	; 0xd4e <lcd_base_addr>
     e18:	04 c0       	rjmp	.+8      	; 0xe22 <lcd_clear_area+0x36>
    
    // Clear all data in range from cache
    for(unsigned int i=start;i<end;i++) {
        lcd_send(0, LCD_DATA);
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	61 e0       	ldi	r22, 0x01	; 1
     e1e:	6d df       	rcall	.-294    	; 0xcfa <lcd_send>
    int end = (line-1)*84+(endX-1);
	
	lcd_base_addr(start);
    
    // Clear all data in range from cache
    for(unsigned int i=start;i<end;i++) {
     e20:	21 96       	adiw	r28, 0x01	; 1
     e22:	c0 17       	cp	r28, r16
     e24:	d1 07       	cpc	r29, r17
     e26:	c8 f3       	brcs	.-14     	; 0xe1a <lcd_clear_area+0x2e>
        lcd_send(0, LCD_DATA);
    }
}
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	08 95       	ret

00000e32 <lcd_clear_line>:

/* Clears an entire text block. (rows of 8 pixels on the lcd) */
void lcd_clear_line(unsigned char line)
{
    lcd_clear_area(line, 1, LCD_X_RES);
     e32:	61 e0       	ldi	r22, 0x01	; 1
     e34:	44 e5       	ldi	r20, 0x54	; 84
     e36:	da df       	rcall	.-76     	; 0xdec <lcd_clear_area>
}
     e38:	08 95       	ret

00000e3a <lcd_clear>:
    lcd_send(0x20, LCD_CMD);				// LCD std cmds, hori addr mode
}

/* Clears the display */
void lcd_clear(void)
{
     e3a:	cf 93       	push	r28
     e3c:	df 93       	push	r29
	lcdCacheIdx = 0;
     e3e:	10 92 f3 03 	sts	0x03F3, r1
     e42:	10 92 f2 03 	sts	0x03F2, r1
	
	lcd_base_addr(lcdCacheIdx);
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	81 df       	rcall	.-254    	; 0xd4e <lcd_base_addr>
     e4c:	c0 e0       	ldi	r28, 0x00	; 0
     e4e:	d0 e0       	ldi	r29, 0x00	; 0
	
    // Set the entire cache to zero and write 0s to lcd
    for(int i=0;i<LCD_CACHE_SIZE;i++) {
		lcd_send(0, LCD_DATA);
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	61 e0       	ldi	r22, 0x01	; 1
     e54:	52 df       	rcall	.-348    	; 0xcfa <lcd_send>
	lcdCacheIdx = 0;
	
	lcd_base_addr(lcdCacheIdx);
	
    // Set the entire cache to zero and write 0s to lcd
    for(int i=0;i<LCD_CACHE_SIZE;i++) {
     e56:	21 96       	adiw	r28, 0x01	; 1
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	c8 3f       	cpi	r28, 0xF8	; 248
     e5c:	d8 07       	cpc	r29, r24
     e5e:	c1 f7       	brne	.-16     	; 0xe50 <lcd_clear+0x16>
		lcd_send(0, LCD_DATA);
    }
}
     e60:	df 91       	pop	r29
     e62:	cf 91       	pop	r28
     e64:	08 95       	ret

00000e66 <lcd_contrast>:
	//fdevopen(lcd_chr, 0);
}

/* Set display contrast. Note: No change is visible at ambient temperature */
void lcd_contrast(unsigned char contrast)
{
     e66:	1f 93       	push	r17
     e68:	18 2f       	mov	r17, r24
	lcd_send(0x21, LCD_CMD);				// LCD Extended Commands
     e6a:	81 e2       	ldi	r24, 0x21	; 33
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	45 df       	rcall	.-374    	; 0xcfa <lcd_send>
    lcd_send(0x80 | contrast, LCD_CMD);		// Set LCD Vop(Contrast)
     e70:	81 2f       	mov	r24, r17
     e72:	80 68       	ori	r24, 0x80	; 128
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	41 df       	rcall	.-382    	; 0xcfa <lcd_send>
    lcd_send(0x20, LCD_CMD);				// LCD std cmds, hori addr mode
     e78:	80 e2       	ldi	r24, 0x20	; 32
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	3e df       	rcall	.-388    	; 0xcfa <lcd_send>
}
     e7e:	1f 91       	pop	r17
     e80:	08 95       	ret

00000e82 <lcd_init>:

/* Performs IO & LCD controller initialization */
void lcd_init(void)
{
    // Pull-up on reset pin
    LCD_PORT |= LCD_RST_PIN;
     e82:	c1 9a       	sbi	0x18, 1	; 24
	
	// Set output bits on lcd port
	LCD_DDR |= LCD_RST_PIN | LCD_SCE_PIN | LCD_DC_PIN | LCD_DATA_PIN | LCD_CLK_PIN;
     e84:	87 b3       	in	r24, 0x17	; 23
     e86:	8f 61       	ori	r24, 0x1F	; 31
     e88:	87 bb       	out	0x17, r24	; 23
     e8a:	80 e6       	ldi	r24, 0x60	; 96
     e8c:	9a ee       	ldi	r25, 0xEA	; 234
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	f1 f7       	brne	.-4      	; 0xe8e <lcd_init+0xc>
    
	// Wait after VCC high for reset (max 30ms)
    _delay_ms(15);
    
    // Toggle display reset pin
    LCD_PORT &= ~LCD_RST_PIN;
     e92:	c1 98       	cbi	0x18, 1	; 24
    lcd_delay();
    LCD_PORT |= LCD_RST_PIN;
     e94:	c1 9a       	sbi	0x18, 1	; 24

    // Disable LCD controller
    LCD_PORT |= LCD_SCE_PIN;
     e96:	c0 9a       	sbi	0x18, 0	; 24

    lcd_send(0x21, LCD_CMD);  // LCD Extended Commands
     e98:	81 e2       	ldi	r24, 0x21	; 33
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	2e df       	rcall	.-420    	; 0xcfa <lcd_send>
    lcd_send(0xC8, LCD_CMD);  // Set LCD Vop(Contrast)
     e9e:	88 ec       	ldi	r24, 0xC8	; 200
     ea0:	60 e0       	ldi	r22, 0x00	; 0
     ea2:	2b df       	rcall	.-426    	; 0xcfa <lcd_send>
    lcd_send(0x06, LCD_CMD);  // Set Temp coefficent
     ea4:	86 e0       	ldi	r24, 0x06	; 6
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	28 df       	rcall	.-432    	; 0xcfa <lcd_send>
    lcd_send(0x13, LCD_CMD);  // LCD bias mode 1:48
     eaa:	83 e1       	ldi	r24, 0x13	; 19
     eac:	60 e0       	ldi	r22, 0x00	; 0
     eae:	25 df       	rcall	.-438    	; 0xcfa <lcd_send>
    lcd_send(0x20, LCD_CMD);  // Standard Commands, Horizontal addressing
     eb0:	80 e2       	ldi	r24, 0x20	; 32
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	22 df       	rcall	.-444    	; 0xcfa <lcd_send>
    lcd_send(0x0C, LCD_CMD);  // LCD in normal mode
     eb6:	8c e0       	ldi	r24, 0x0C	; 12
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	1f df       	rcall	.-450    	; 0xcfa <lcd_send>
    
    // Clear lcd
    lcd_clear();
     ebc:	be df       	rcall	.-132    	; 0xe3a <lcd_clear>
	
	// For using printf
	//fdevopen(lcd_chr, 0);
}
     ebe:	08 95       	ret

00000ec0 <lcd_col>:
	LCD_DDR &= ~(LCD_DATA_PIN | LCD_DC_PIN);
	LCD_PORT |= LCD_DATA_PIN | LCD_DC_PIN;
}

void lcd_col(char chr)
{
     ec0:	1f 93       	push	r17
     ec2:	18 2f       	mov	r17, r24
	lcd_base_addr(lcdCacheIdx);
     ec4:	80 91 f2 03 	lds	r24, 0x03F2
     ec8:	90 91 f3 03 	lds	r25, 0x03F3
     ecc:	40 df       	rcall	.-384    	; 0xd4e <lcd_base_addr>
    
	lcd_send(chr, LCD_DATA);
     ece:	81 2f       	mov	r24, r17
     ed0:	61 e0       	ldi	r22, 0x01	; 1
     ed2:	13 df       	rcall	.-474    	; 0xcfa <lcd_send>
	
	lcdCacheIdx++;
     ed4:	80 91 f2 03 	lds	r24, 0x03F2
     ed8:	90 91 f3 03 	lds	r25, 0x03F3
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	90 93 f3 03 	sts	0x03F3, r25
     ee2:	80 93 f2 03 	sts	0x03F2, r24
}
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <lcd_pixelBack>:

/* It goes back the cursor on LCD for a single step 
   This function added by Vassilis on 01 Jan 2012 */
void lcd_pixelBack(void) 
{
	lcdCacheIdx--;
     eea:	80 91 f2 03 	lds	r24, 0x03F2
     eee:	90 91 f3 03 	lds	r25, 0x03F3
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	90 93 f3 03 	sts	0x03F3, r25
     ef8:	80 93 f2 03 	sts	0x03F2, r24
}
     efc:	08 95       	ret

00000efe <printPictureOnLCD>:

/* Prints on LCD a hex based picture.
   A hex picture can be produced from the "LCDAssistant.exe" windows based software. 
   This function added by Vassilis on 01 Jan 2012 */
void printPictureOnLCD ( const unsigned char *data)
{
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	8c 01       	movw	r16, r24
}

/* Sets cursor location to xy location corresponding to basic font size */
void lcd_goto_xy(unsigned char x, unsigned char y)
{
    lcdCacheIdx = (x-1)*6 + (y-1)*84;
     f08:	10 92 f3 03 	sts	0x03F3, r1
     f0c:	10 92 f2 03 	sts	0x03F2, r1
     f10:	c0 e0       	ldi	r28, 0x00	; 0
     f12:	d0 e0       	ldi	r29, 0x00	; 0
{
	unsigned int i;

 	lcd_goto_xy(1,1);
	for(i=0;i<LCD_TOTAL_PIXEL_COLUMNS;i++)
		lcd_col(pgm_read_byte(data++));
     f14:	f8 01       	movw	r30, r16
     f16:	ec 0f       	add	r30, r28
     f18:	fd 1f       	adc	r31, r29
     f1a:	e4 91       	lpm	r30, Z+
     f1c:	8e 2f       	mov	r24, r30
     f1e:	d0 df       	rcall	.-96     	; 0xec0 <lcd_col>
void printPictureOnLCD ( const unsigned char *data)
{
	unsigned int i;

 	lcd_goto_xy(1,1);
	for(i=0;i<LCD_TOTAL_PIXEL_COLUMNS;i++)
     f20:	21 96       	adiw	r28, 0x01	; 1
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	c8 3f       	cpi	r28, 0xF8	; 248
     f26:	d8 07       	cpc	r29, r24
     f28:	a9 f7       	brne	.-22     	; 0xf14 <printPictureOnLCD+0x16>
     f2a:	80 e1       	ldi	r24, 0x10	; 16
     f2c:	97 e2       	ldi	r25, 0x27	; 39
     f2e:	20 e9       	ldi	r18, 0x90	; 144
     f30:	31 e0       	ldi	r19, 0x01	; 1
     f32:	f9 01       	movw	r30, r18
     f34:	31 97       	sbiw	r30, 0x01	; 1
     f36:	f1 f7       	brne	.-4      	; 0xf34 <printPictureOnLCD+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f38:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3a:	d9 f7       	brne	.-10     	; 0xf32 <printPictureOnLCD+0x34>
		lcd_col(pgm_read_byte(data++));
	_delay_ms(1000);
}
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	08 95       	ret

00000f46 <__udivmodhi4>:
     f46:	aa 1b       	sub	r26, r26
     f48:	bb 1b       	sub	r27, r27
     f4a:	51 e1       	ldi	r21, 0x11	; 17
     f4c:	07 c0       	rjmp	.+14     	; 0xf5c <__udivmodhi4_ep>

00000f4e <__udivmodhi4_loop>:
     f4e:	aa 1f       	adc	r26, r26
     f50:	bb 1f       	adc	r27, r27
     f52:	a6 17       	cp	r26, r22
     f54:	b7 07       	cpc	r27, r23
     f56:	10 f0       	brcs	.+4      	; 0xf5c <__udivmodhi4_ep>
     f58:	a6 1b       	sub	r26, r22
     f5a:	b7 0b       	sbc	r27, r23

00000f5c <__udivmodhi4_ep>:
     f5c:	88 1f       	adc	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	5a 95       	dec	r21
     f62:	a9 f7       	brne	.-22     	; 0xf4e <__udivmodhi4_loop>
     f64:	80 95       	com	r24
     f66:	90 95       	com	r25
     f68:	bc 01       	movw	r22, r24
     f6a:	cd 01       	movw	r24, r26
     f6c:	08 95       	ret

00000f6e <itoa>:
     f6e:	fb 01       	movw	r30, r22
     f70:	9f 01       	movw	r18, r30
     f72:	e8 94       	clt
     f74:	42 30       	cpi	r20, 0x02	; 2
     f76:	bc f0       	brlt	.+46     	; 0xfa6 <itoa+0x38>
     f78:	45 32       	cpi	r20, 0x25	; 37
     f7a:	ac f4       	brge	.+42     	; 0xfa6 <itoa+0x38>
     f7c:	4a 30       	cpi	r20, 0x0A	; 10
     f7e:	29 f4       	brne	.+10     	; 0xf8a <itoa+0x1c>
     f80:	97 fb       	bst	r25, 7
     f82:	1e f4       	brtc	.+6      	; 0xf8a <itoa+0x1c>
     f84:	90 95       	com	r25
     f86:	81 95       	neg	r24
     f88:	9f 4f       	sbci	r25, 0xFF	; 255
     f8a:	64 2f       	mov	r22, r20
     f8c:	77 27       	eor	r23, r23
     f8e:	db df       	rcall	.-74     	; 0xf46 <__udivmodhi4>
     f90:	80 5d       	subi	r24, 0xD0	; 208
     f92:	8a 33       	cpi	r24, 0x3A	; 58
     f94:	0c f0       	brlt	.+2      	; 0xf98 <itoa+0x2a>
     f96:	89 5d       	subi	r24, 0xD9	; 217
     f98:	81 93       	st	Z+, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	a9 f7       	brne	.-22     	; 0xf8a <itoa+0x1c>
     fa0:	16 f4       	brtc	.+4      	; 0xfa6 <itoa+0x38>
     fa2:	5d e2       	ldi	r21, 0x2D	; 45
     fa4:	51 93       	st	Z+, r21
     fa6:	10 82       	st	Z, r1
     fa8:	c9 01       	movw	r24, r18
     faa:	32 c0       	rjmp	.+100    	; 0x1010 <strrev>

00000fac <ltoa>:
     fac:	fa 01       	movw	r30, r20
     fae:	cf 93       	push	r28
     fb0:	ff 93       	push	r31
     fb2:	ef 93       	push	r30
     fb4:	22 30       	cpi	r18, 0x02	; 2
     fb6:	3c f1       	brlt	.+78     	; 0x1006 <ltoa+0x5a>
     fb8:	25 32       	cpi	r18, 0x25	; 37
     fba:	2c f5       	brge	.+74     	; 0x1006 <ltoa+0x5a>
     fbc:	c2 2f       	mov	r28, r18
     fbe:	e8 94       	clt
     fc0:	ca 30       	cpi	r28, 0x0A	; 10
     fc2:	49 f4       	brne	.+18     	; 0xfd6 <ltoa+0x2a>
     fc4:	97 fb       	bst	r25, 7
     fc6:	3e f4       	brtc	.+14     	; 0xfd6 <ltoa+0x2a>
     fc8:	90 95       	com	r25
     fca:	80 95       	com	r24
     fcc:	70 95       	com	r23
     fce:	61 95       	neg	r22
     fd0:	7f 4f       	sbci	r23, 0xFF	; 255
     fd2:	8f 4f       	sbci	r24, 0xFF	; 255
     fd4:	9f 4f       	sbci	r25, 0xFF	; 255
     fd6:	2c 2f       	mov	r18, r28
     fd8:	33 27       	eor	r19, r19
     fda:	44 27       	eor	r20, r20
     fdc:	55 27       	eor	r21, r21
     fde:	ff 93       	push	r31
     fe0:	ef 93       	push	r30
     fe2:	26 d0       	rcall	.+76     	; 0x1030 <__udivmodsi4>
     fe4:	ef 91       	pop	r30
     fe6:	ff 91       	pop	r31
     fe8:	60 5d       	subi	r22, 0xD0	; 208
     fea:	6a 33       	cpi	r22, 0x3A	; 58
     fec:	0c f0       	brlt	.+2      	; 0xff0 <ltoa+0x44>
     fee:	69 5d       	subi	r22, 0xD9	; 217
     ff0:	61 93       	st	Z+, r22
     ff2:	b9 01       	movw	r22, r18
     ff4:	ca 01       	movw	r24, r20
     ff6:	60 50       	subi	r22, 0x00	; 0
     ff8:	70 40       	sbci	r23, 0x00	; 0
     ffa:	80 40       	sbci	r24, 0x00	; 0
     ffc:	90 40       	sbci	r25, 0x00	; 0
     ffe:	59 f7       	brne	.-42     	; 0xfd6 <ltoa+0x2a>
    1000:	16 f4       	brtc	.+4      	; 0x1006 <ltoa+0x5a>
    1002:	cd e2       	ldi	r28, 0x2D	; 45
    1004:	c1 93       	st	Z+, r28
    1006:	10 82       	st	Z, r1
    1008:	8f 91       	pop	r24
    100a:	9f 91       	pop	r25
    100c:	cf 91       	pop	r28
    100e:	00 c0       	rjmp	.+0      	; 0x1010 <strrev>

00001010 <strrev>:
    1010:	dc 01       	movw	r26, r24
    1012:	fc 01       	movw	r30, r24
    1014:	67 2f       	mov	r22, r23
    1016:	71 91       	ld	r23, Z+
    1018:	77 23       	and	r23, r23
    101a:	e1 f7       	brne	.-8      	; 0x1014 <strrev+0x4>
    101c:	32 97       	sbiw	r30, 0x02	; 2
    101e:	04 c0       	rjmp	.+8      	; 0x1028 <strrev+0x18>
    1020:	7c 91       	ld	r23, X
    1022:	6d 93       	st	X+, r22
    1024:	70 83       	st	Z, r23
    1026:	62 91       	ld	r22, -Z
    1028:	ae 17       	cp	r26, r30
    102a:	bf 07       	cpc	r27, r31
    102c:	c8 f3       	brcs	.-14     	; 0x1020 <strrev+0x10>
    102e:	08 95       	ret

00001030 <__udivmodsi4>:
    1030:	a1 e2       	ldi	r26, 0x21	; 33
    1032:	1a 2e       	mov	r1, r26
    1034:	aa 1b       	sub	r26, r26
    1036:	bb 1b       	sub	r27, r27
    1038:	fd 01       	movw	r30, r26
    103a:	0d c0       	rjmp	.+26     	; 0x1056 <__udivmodsi4_ep>

0000103c <__udivmodsi4_loop>:
    103c:	aa 1f       	adc	r26, r26
    103e:	bb 1f       	adc	r27, r27
    1040:	ee 1f       	adc	r30, r30
    1042:	ff 1f       	adc	r31, r31
    1044:	a2 17       	cp	r26, r18
    1046:	b3 07       	cpc	r27, r19
    1048:	e4 07       	cpc	r30, r20
    104a:	f5 07       	cpc	r31, r21
    104c:	20 f0       	brcs	.+8      	; 0x1056 <__udivmodsi4_ep>
    104e:	a2 1b       	sub	r26, r18
    1050:	b3 0b       	sbc	r27, r19
    1052:	e4 0b       	sbc	r30, r20
    1054:	f5 0b       	sbc	r31, r21

00001056 <__udivmodsi4_ep>:
    1056:	66 1f       	adc	r22, r22
    1058:	77 1f       	adc	r23, r23
    105a:	88 1f       	adc	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	1a 94       	dec	r1
    1060:	69 f7       	brne	.-38     	; 0x103c <__udivmodsi4_loop>
    1062:	60 95       	com	r22
    1064:	70 95       	com	r23
    1066:	80 95       	com	r24
    1068:	90 95       	com	r25
    106a:	9b 01       	movw	r18, r22
    106c:	ac 01       	movw	r20, r24
    106e:	bd 01       	movw	r22, r26
    1070:	cf 01       	movw	r24, r30
    1072:	08 95       	ret

00001074 <_exit>:
    1074:	f8 94       	cli

00001076 <__stop_program>:
    1076:	ff cf       	rjmp	.-2      	; 0x1076 <__stop_program>
